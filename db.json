{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/obsidian/source/css/ball-atom.min.css","path":"css/ball-atom.min.css","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/codemirror.styl","path":"css/codemirror.styl","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/theme.styl","path":"css/theme.styl","modified":1,"renderable":1},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","path":"font/Rubik-Bold-kern-latin.woff2","modified":1,"renderable":1},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","path":"font/Rubik-Regular-kern-latin.woff2","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/busuanzi.min.js","path":"js/busuanzi.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.truncate.js","path":"js/jquery.truncate.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/busuanzi.js","path":"js/busuanzi.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","path":"js/jquery.truncate.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/obsidian.js","path":"js/obsidian.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/obsidian.min.js","path":"js/obsidian.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/logo_icon.png","path":"img/logo_icon.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/obsidian.styl","path":"css/obsidian.styl","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/cover.jpg","path":"img/cover.jpg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/profile.jpg","path":"img/profile.jpg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/statics/chengdu.mp3","path":"statics/chengdu.mp3","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"dc0f50bf546bd330fafe2279f40cfb5b734522b6","modified":1599205480921},{"_id":"themes/obsidian/.gitignore","hash":"17af13fb332a7f2313e6669ca97e95296a1a7126","modified":1599207088090},{"_id":"themes/obsidian/CHANGELOG.md","hash":"b7c46172cd1f74138262b5dc9af671a0e7bfcac5","modified":1599207088090},{"_id":"themes/obsidian/CHANGELOG_CN.md","hash":"4cd71664c07be8294a843d010ed21285a01e0985","modified":1599207088090},{"_id":"themes/obsidian/LICENSE","hash":"5433bef2c6c055447443802b3538cf37adabd705","modified":1599207088090},{"_id":"themes/obsidian/README.md","hash":"2ba14184d94671678689fbe1e1648dc078f394e8","modified":1599207088090},{"_id":"themes/obsidian/README_CN.md","hash":"735bfa1652972dca4a2b42d7f4e9b2c4d92785c9","modified":1599207088090},{"_id":"themes/obsidian/_config.yml","hash":"b2bd75958153c96a6b42799dea94b900614e640b","modified":1599207299854},{"_id":"themes/obsidian/package-lock.json","hash":"65b2d05eeab89fbb11dea248835d2e5c58659a9e","modified":1599207088094},{"_id":"themes/obsidian/package.json","hash":"58dff57dc13b339fe6d749f97dbfb4828375f3a8","modified":1599207088094},{"_id":"source/_posts/Flypy一键部署.md","hash":"09e038f3e022ae08d8f2859564e68b7dce3364fb","modified":1599205480921},{"_id":"source/_posts/Linux控制电脑风扇.md","hash":"acbf010c6097c5eb5acdc601564e0b14b92c818f","modified":1599205480921},{"_id":"source/_posts/利用Docker搭建Samba服务.md","hash":"480c4306b1c5ffa857ebb32c1c42c3ae1db1b9ff","modified":1599205480921},{"_id":"source/_posts/玩HASS一年的故事 (一).md","hash":"533e9a4ceaab7c49808e5fa32936f1d0280d1faa","modified":1599205480921},{"_id":"source/_posts/译：UEFI 启动真正做了什么.md","hash":"9221918319398d488d9f46b94ce504d9f6b341f1","modified":1599205480921},{"_id":"source/_posts/路由器通过锐捷认证.md","hash":"1cb62122ea52798f076d028d99b434137d8eb963","modified":1599205480921},{"_id":"source/_posts/软件测试复习.md","hash":"a8ce2d8266f18cf7824e49663ec19247718eb35e","modified":1599205480921},{"_id":"source/categories/index.md","hash":"26ef7adb8247e27cc014641fcf3fcdf522e7723e","modified":1599205480921},{"_id":"source/tags/index.md","hash":"a7cf1976928d5fa27f32a159e6007d8c6e5ca1e6","modified":1599206592867},{"_id":"source/whoami/index.md","hash":"3063c68ac2acc1dca7acaddead1938f228f1afb8","modified":1599206604555},{"_id":"themes/obsidian/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1599207088062},{"_id":"themes/obsidian/.git/config","hash":"f923d8fd7d60e96fda777194e9e763e26c0a44aa","modified":1599207088066},{"_id":"themes/obsidian/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1599207083502},{"_id":"themes/obsidian/.git/index","hash":"b68aa7ada9e1426eff2372f340535ea37c2e9529","modified":1599207256579},{"_id":"themes/obsidian/.git/packed-refs","hash":"c44558394683736c191a8a5e1be8e32dabccbd4e","modified":1599207088062},{"_id":"themes/obsidian/.github/FUNDING.yml","hash":"46219c4d56bf5ed005a94216e2e5121b2597667c","modified":1599207088090},{"_id":"themes/obsidian/languages/fr.yml","hash":"fa0dbaf1464c62ce6e9e7ad315edb287a18a992f","modified":1599207088090},{"_id":"themes/obsidian/languages/default.yml","hash":"79c90d32b88bf865be8c27d63e4364ede6b2abab","modified":1599207088090},{"_id":"themes/obsidian/languages/it.yml","hash":"d7fd4985abff51f40034f107aacc515f45d632b6","modified":1599207088090},{"_id":"themes/obsidian/languages/no.yml","hash":"5235962d6d8198185db9c288e3eb88f7aa63ac39","modified":1599207088090},{"_id":"themes/obsidian/languages/nl.yml","hash":"0f1ec0333eb993ba8a40e2d32009f618738e4d47","modified":1599207088090},{"_id":"themes/obsidian/languages/zh-CN.yml","hash":"10b50135da5d34930cefd630c5c824c2029e6180","modified":1599207088090},{"_id":"themes/obsidian/languages/ru.yml","hash":"f3e6ea6ac5073583ab306c383b0160f7e4891a83","modified":1599207088090},{"_id":"themes/obsidian/languages/zh-TW.yml","hash":"891bbfc18194ef3f1c39fd2cafdf93d6d6844ccf","modified":1599207088090},{"_id":"themes/obsidian/layout/archive.ejs","hash":"17eb8f480c30e1de60e5f696942c697e20dc6d3a","modified":1599207088094},{"_id":"themes/obsidian/layout/category.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1599207088094},{"_id":"themes/obsidian/layout/index.ejs","hash":"7873010b22819f17b08c67edb60fa01fba94589c","modified":1599207088094},{"_id":"themes/obsidian/layout/page.ejs","hash":"db7051aba9f46e48808236a3887d440d2369d74e","modified":1599207088094},{"_id":"themes/obsidian/layout/layout.ejs","hash":"c9a44e84e19189f42aef85ad2b074fa1285072b8","modified":1599207088094},{"_id":"themes/obsidian/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1599207088094},{"_id":"themes/obsidian/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1599207088094},{"_id":"themes/obsidian/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1599207083502},{"_id":"themes/obsidian/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1599207083502},{"_id":"themes/obsidian/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1599207083502},{"_id":"themes/obsidian/.git/logs/HEAD","hash":"1ea849953f3a0f81ba877482e978c8230d183cfd","modified":1599207088062},{"_id":"themes/obsidian/layout/_partial/categories.ejs","hash":"db45b83951cd4dca8b9f1fac289e0f38e13c3dc1","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/head.ejs","hash":"df52b2adcbdd40b3bbe6925312f3dece240e55f1","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/mathjax.ejs","hash":"3aae1c6eb8795525090f83b4e2ab00a1c04db13d","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/menu.ejs","hash":"34c14e4d39fda3f4b0f6ec7e393529ebb33c1139","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/photoswipe.ejs","hash":"9cd0571569a37aef1c6c4a5bf074dc1dc7b0558b","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/screen.ejs","hash":"919c1a9ab04ba22eac1e2e66f46e69b362dea93a","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/scripts.ejs","hash":"eef3077d691c67c81138a07b5575dec8889134a8","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/tags.ejs","hash":"fc037d52e956ed280d2d69f9683461ef86b5b453","modified":1599207088094},{"_id":"themes/obsidian/scripts/helpers/hexo-html-truncate.js","hash":"72733931cbe4841f3da9a680e7549718f13bd0b7","modified":1599207088094},{"_id":"themes/obsidian/scripts/helpers/hexo-symbols-count-time.js","hash":"dc213a7d2533f4624bd6c41217657c9ab4e9ce85","modified":1599207088094},{"_id":"themes/obsidian/scripts/helpers/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1599207088094},{"_id":"themes/obsidian/source/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1599207088098},{"_id":"themes/obsidian/source/css/codemirror.styl","hash":"b2e335244baf9703d2281eb41bbbf37ddf820713","modified":1599207088098},{"_id":"themes/obsidian/source/css/theme.styl","hash":"bd1edc12656c7dc6d2fbeac9c44286b0d509c7b6","modified":1599207088098},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1599207088098},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1599207088098},{"_id":"themes/obsidian/source/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1599207088126},{"_id":"themes/obsidian/source/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1599207088130},{"_id":"themes/obsidian/source/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1599207088126},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1599207088130},{"_id":"themes/obsidian/source/js/obsidian.js","hash":"77e2c2e2c5a23fd83ba19c5dbd25125fc08bde10","modified":1599207088130},{"_id":"themes/obsidian/source/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1599207088130},{"_id":"themes/obsidian/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1599207088130},{"_id":"themes/obsidian/source/js/search.js","hash":"ccd638c9f9a1e4c4e94dfdbbde5fcc5e7a4eba0c","modified":1599207088130},{"_id":"themes/obsidian/source/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1599207088102},{"_id":"themes/obsidian/source/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1599207088102},{"_id":"themes/obsidian/source/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1599207088102},{"_id":"themes/obsidian/source/css/obsidian.styl","hash":"519777788a0b7e1872a1cc05e634d8ce135a1d92","modified":1599207088098},{"_id":"themes/obsidian/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1599207088130},{"_id":"themes/obsidian/.git/refs/heads/master","hash":"86a499776ca410233dd7bd653276c0391c6f3000","modified":1599207088062},{"_id":"themes/obsidian/.git/objects/pack/pack-5f2e1d589cb3705af609965076a03b73a811dca8.idx","hash":"e711fdc2ff95ad177d2c8aabeb7c2bf714ed74c5","modified":1599207087918},{"_id":"themes/obsidian/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/post/article.ejs","hash":"c871d924f612fd40cd37f7cfc04f77e30c59a09e","modified":1599207088090},{"_id":"themes/obsidian/layout/_partial/post/header.ejs","hash":"95af4961efdc1421fc62b60075672cc49bc49a2c","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/post/gitalk.ejs","hash":"512874f93fed1bd259df00acf0efa24afc6b9927","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/post/item.ejs","hash":"6b211ed210f25c1b3fe0e8903a332dd8161ba253","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1599207088094},{"_id":"themes/obsidian/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1599207088094},{"_id":"themes/obsidian/scripts/libs/cheerio/cheerio.js","hash":"df60e3da86341b0474f15d9aa8547d71617cb5a9","modified":1599207088094},{"_id":"themes/obsidian/scripts/libs/cheerio/parse.js","hash":"dc8dc6f82fd1c8f33eda9442025235a3632bfa36","modified":1599207088098},{"_id":"themes/obsidian/scripts/libs/cheerio/static.js","hash":"36ad488d734e0d9930d0a478deacebe6d5b8c775","modified":1599207088098},{"_id":"themes/obsidian/scripts/libs/cheerio/utils.js","hash":"425759c783010cd1d72771f2b8d471047a1e1285","modified":1599207088098},{"_id":"themes/obsidian/source/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1599207088102},{"_id":"themes/obsidian/.git/logs/refs/heads/master","hash":"1ea849953f3a0f81ba877482e978c8230d183cfd","modified":1599207088062},{"_id":"themes/obsidian/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1599207088062},{"_id":"themes/obsidian/scripts/libs/cheerio/api/attributes.js","hash":"404a942475f8bf31dd4704d17490b25bfcdffb07","modified":1599207088094},{"_id":"themes/obsidian/scripts/libs/cheerio/api/css.js","hash":"de88fe4f6977eab77bf080d9a688cc3f2b0d516c","modified":1599207088094},{"_id":"themes/obsidian/scripts/libs/cheerio/api/forms.js","hash":"e9d8465f092ce6c2d2e48575bfa1de7e1cbaf3bd","modified":1599207088094},{"_id":"themes/obsidian/scripts/libs/cheerio/api/manipulation.js","hash":"93b36f7e67557d2a2f5ba65eee21a65f93c37b1f","modified":1599207088094},{"_id":"themes/obsidian/scripts/libs/cheerio/api/traversing.js","hash":"5a83ea3c18f2e73eb1b4f4e4425de932e20d38bb","modified":1599207088094},{"_id":"themes/obsidian/.git/logs/refs/remotes/origin/HEAD","hash":"1ea849953f3a0f81ba877482e978c8230d183cfd","modified":1599207088062},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1599207088126},{"_id":"themes/obsidian/source/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1599207088122},{"_id":"themes/obsidian/source/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1599207088162},{"_id":"themes/obsidian/.git/objects/pack/pack-5f2e1d589cb3705af609965076a03b73a811dca8.pack","hash":"b974637733ae65099f78a8d5ec4351a7e4d5bfa2","modified":1599207087918},{"_id":"public/categories/index.html","hash":"62a9d49e823c8f65943a64974e9be0fd3f738207","modified":1599207616832},{"_id":"public/tags/index.html","hash":"14f189ec03a3e8b979037c497e9192cb755a4c52","modified":1599207616832},{"_id":"public/whoami/index.html","hash":"14f189ec03a3e8b979037c497e9192cb755a4c52","modified":1599207616832},{"_id":"public/categories/故事/index.html","hash":"cfa01d1c489e7cc8e0e1f3e2b8d6ff40be6e89d5","modified":1599207616832},{"_id":"public/categories/学习资料/index.html","hash":"42d0f95f231f62266fe2bf38aaacd1b2a9fa28cd","modified":1599207616832},{"_id":"public/categories/路由器/index.html","hash":"f653999079f85c1a66a8bf281c0ed76f2b264968","modified":1599207616832},{"_id":"public/2020/09/04/译：UEFI 启动真正做了什么/index.html","hash":"10a0ae394b0043238998e1d0174be0aad500bf10","modified":1599207616833},{"_id":"public/2019/03/17/利用Docker搭建Samba服务/index.html","hash":"b44d8755a6956a35b99a1fc4887bc9f0cd03fb35","modified":1599207616833},{"_id":"public/2019/01/05/软件测试复习/index.html","hash":"52052dd81ea1a4b0e91b6292a9b939650acea3d2","modified":1599207616833},{"_id":"public/2019/01/01/Flypy一键部署/index.html","hash":"a4750d46ee0ed40e5c52cd8c8aafa4c0ffaaa26e","modified":1599207616833},{"_id":"public/2018/12/19/Linux控制电脑风扇/index.html","hash":"742defac5b67fa1c69ab1bc9da3ffe20e11622d6","modified":1599207616833},{"_id":"public/2018/12/19/玩HASS一年的故事 (一)/index.html","hash":"5bfe3324cb9a42bd05eccfbd503bbd10db8c9f14","modified":1599207616833},{"_id":"public/2018/12/19/路由器通过锐捷认证/index.html","hash":"751599ea82c83f4e31681bd040cfb052f3c97c84","modified":1599207616833},{"_id":"public/archives/index.html","hash":"5c91d2ed80a6f28aaac7258442be398ef176b22f","modified":1599207616833},{"_id":"public/archives/2018/index.html","hash":"68891a4a19e604e42498b680e7c1dbb191f7505a","modified":1599207616833},{"_id":"public/archives/2018/12/index.html","hash":"26bfb3873627288b3b29d337fd420e89982381d6","modified":1599207616833},{"_id":"public/archives/2019/index.html","hash":"6b14838c62b2744e612111ec64989a0015a98683","modified":1599207616833},{"_id":"public/archives/2019/01/index.html","hash":"01acd85dca1fe015f9d725f9f1f802538fb3445e","modified":1599207616833},{"_id":"public/archives/2019/03/index.html","hash":"c92a38874ae903aff095fc2d350a74c0fe86e9fc","modified":1599207616833},{"_id":"public/archives/2020/index.html","hash":"e1ee590f0cbd78917be11fdbc1f6d00ce9c3e383","modified":1599207616833},{"_id":"public/archives/2020/09/index.html","hash":"387f801ae51324d94bb485fb10793a3ddc6830bd","modified":1599207616833},{"_id":"public/index.html","hash":"30616a2c824cef514826743c1714d59639946e90","modified":1599207616833},{"_id":"public/categories/Linux/index.html","hash":"6a0b887cbbd32cd08abcd584223c78e7d395840e","modified":1599207616833},{"_id":"public/CNAME","hash":"dc0f50bf546bd330fafe2279f40cfb5b734522b6","modified":1599207616836},{"_id":"public/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1599207616836},{"_id":"public/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1599207616836},{"_id":"public/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1599207616836},{"_id":"public/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1599207616836},{"_id":"public/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1599207616836},{"_id":"public/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1599207617117},{"_id":"public/css/codemirror.css","hash":"d45967fa2b7e701c3d0dd62cdce0385f5c8f6961","modified":1599207617117},{"_id":"public/css/theme.css","hash":"9b61386db1bb6ffe784738a2dd7ee11348fea17d","modified":1599207617117},{"_id":"public/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1599207617118},{"_id":"public/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1599207617118},{"_id":"public/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1599207617118},{"_id":"public/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1599207617118},{"_id":"public/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1599207617118},{"_id":"public/js/search.js","hash":"ccd638c9f9a1e4c4e94dfdbbde5fcc5e7a4eba0c","modified":1599207617118},{"_id":"public/js/obsidian.js","hash":"77e2c2e2c5a23fd83ba19c5dbd25125fc08bde10","modified":1599207617118},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1599207617118},{"_id":"public/css/obsidian.css","hash":"8e942c098dec45ad952ce31e030576375b31104a","modified":1599207617118},{"_id":"public/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1599207617118},{"_id":"public/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1599207617118},{"_id":"public/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1599207617129},{"_id":"public/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1599207617131},{"_id":"public/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1599207617143}],"Category":[{"name":"Linux","_id":"ckenyxa5c0004kilcu867eruc"},{"name":"故事","_id":"ckenyxa5l000ekilcj67ht80y"},{"name":"学习资料","_id":"ckenyxa5m000hkilcb0bypbft"},{"name":"路由器","_id":"ckenyxa5m000jkilc4356o7oo"}],"Data":[],"Page":[{"title":"categories","date":"2018-12-18T18:39:28.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-19 02:39:28\ntype: \"categories\"\ncomments: true\n---\n","updated":"2020-09-04T07:44:40.921Z","path":"categories/index.html","layout":"page","_id":"ckenyxa5a0001kilc17iip0iv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-04T08:03:12.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-04 16:03:12\n---\n","updated":"2020-09-04T08:03:12.867Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckenyxa5c0003kilcend8w6aq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"whoami","date":"2020-09-04T08:03:24.000Z","_content":"","source":"whoami/index.md","raw":"---\ntitle: whoami\ndate: 2020-09-04 16:03:24\n---\n","updated":"2020-09-04T08:03:24.555Z","path":"whoami/index.html","comments":1,"layout":"page","_id":"ckenyxa5f0006kilcn12gqnfd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"一键部署小鹤音形方案","date":"2018-12-31T16:00:00.000Z","_content":"### 部署原理\n1. 安装 Fcitx 输入框架\n2. 安装 Rime 输入法\n3. 部署音形方案\n\n**Fcitx** (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 **GPL** 方式发布的输入法平台,可以通过安装引擎支持多种输入法，支持简入繁出，是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。\n\n**Rime** 是一种中文输入法引擎是一种被广泛支持的输入法。**Rime** 输入法引擎可以被用在 **IBus** 和 **Fcitx** 输入框架下。\n\n这也就是说小鹤音形只是一种输入法方案，并不是输入法。我们可以将这个方案挂接在 **Rime** 输入法下。**ibus-rime** 和 **fcitx-rime** 都可以部署音形方案。\n\n该脚本就是在 **fcitx-rime** 这种模式下部署的小鹤音形方案。\n\n### 演示\n![example](https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/example.gif)\n\n### 手动安装演示\n[bilibili](https://bilibili.com/video/av46403021)\n\n### 安装\n该一键安装脚本只适用于 Debian、Ubuntu、Centos 系统。\n直接在终端下执行以下命令就是了。该项目地址 [github](https://github.com/Caffreyfans/flypy-install)\n```bash\nwget -O install.sh https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/install.sh && sudo chmod +x install.sh && ./install.sh\n```\n","source":"_posts/Flypy一键部署.md","raw":"---\ntitle: 一键部署小鹤音形方案\ndate: 2019-01-01\ncategories: Linux\n\n---\n### 部署原理\n1. 安装 Fcitx 输入框架\n2. 安装 Rime 输入法\n3. 部署音形方案\n\n**Fcitx** (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 **GPL** 方式发布的输入法平台,可以通过安装引擎支持多种输入法，支持简入繁出，是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。\n\n**Rime** 是一种中文输入法引擎是一种被广泛支持的输入法。**Rime** 输入法引擎可以被用在 **IBus** 和 **Fcitx** 输入框架下。\n\n这也就是说小鹤音形只是一种输入法方案，并不是输入法。我们可以将这个方案挂接在 **Rime** 输入法下。**ibus-rime** 和 **fcitx-rime** 都可以部署音形方案。\n\n该脚本就是在 **fcitx-rime** 这种模式下部署的小鹤音形方案。\n\n### 演示\n![example](https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/example.gif)\n\n### 手动安装演示\n[bilibili](https://bilibili.com/video/av46403021)\n\n### 安装\n该一键安装脚本只适用于 Debian、Ubuntu、Centos 系统。\n直接在终端下执行以下命令就是了。该项目地址 [github](https://github.com/Caffreyfans/flypy-install)\n```bash\nwget -O install.sh https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/install.sh && sudo chmod +x install.sh && ./install.sh\n```\n","slug":"Flypy一键部署","published":1,"updated":"2020-09-04T07:44:40.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckenyxa570000kilctg3s2paz","content":"<h3 id=\"部署原理\"><a href=\"#部署原理\" class=\"headerlink\" title=\"部署原理\"></a>部署原理</h3><ol>\n<li>安装 Fcitx 输入框架</li>\n<li>安装 Rime 输入法</li>\n<li>部署音形方案</li>\n</ol>\n<p><strong>Fcitx</strong> (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 <strong>GPL</strong> 方式发布的输入法平台,可以通过安装引擎支持多种输入法，支持简入繁出，是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。</p>\n<p><strong>Rime</strong> 是一种中文输入法引擎是一种被广泛支持的输入法。<strong>Rime</strong> 输入法引擎可以被用在 <strong>IBus</strong> 和 <strong>Fcitx</strong> 输入框架下。</p>\n<p>这也就是说小鹤音形只是一种输入法方案，并不是输入法。我们可以将这个方案挂接在 <strong>Rime</strong> 输入法下。<strong>ibus-rime</strong> 和 <strong>fcitx-rime</strong> 都可以部署音形方案。</p>\n<p>该脚本就是在 <strong>fcitx-rime</strong> 这种模式下部署的小鹤音形方案。</p>\n<h3 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h3><p><img src=\"https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/example.gif\" alt=\"example\"></p>\n<h3 id=\"手动安装演示\"><a href=\"#手动安装演示\" class=\"headerlink\" title=\"手动安装演示\"></a>手动安装演示</h3><p><a href=\"https://bilibili.com/video/av46403021\" target=\"_blank\" rel=\"noopener\">bilibili</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>该一键安装脚本只适用于 Debian、Ubuntu、Centos 系统。<br>直接在终端下执行以下命令就是了。该项目地址 <a href=\"https://github.com/Caffreyfans/flypy-install\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O install.sh https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/install.sh &amp;&amp; sudo chmod +x install.sh &amp;&amp; ./install.sh</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"部署原理\"><a href=\"#部署原理\" class=\"headerlink\" title=\"部署原理\"></a>部署原理</h3><ol>\n<li>安装 Fcitx 输入框架</li>\n<li>安装 Rime 输入法</li>\n<li>部署音形方案</li>\n</ol>\n<p><strong>Fcitx</strong> (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 <strong>GPL</strong> 方式发布的输入法平台,可以通过安装引擎支持多种输入法，支持简入繁出，是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。</p>\n<p><strong>Rime</strong> 是一种中文输入法引擎是一种被广泛支持的输入法。<strong>Rime</strong> 输入法引擎可以被用在 <strong>IBus</strong> 和 <strong>Fcitx</strong> 输入框架下。</p>\n<p>这也就是说小鹤音形只是一种输入法方案，并不是输入法。我们可以将这个方案挂接在 <strong>Rime</strong> 输入法下。<strong>ibus-rime</strong> 和 <strong>fcitx-rime</strong> 都可以部署音形方案。</p>\n<p>该脚本就是在 <strong>fcitx-rime</strong> 这种模式下部署的小鹤音形方案。</p>\n<h3 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h3><p><img src=\"https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/example.gif\" alt=\"example\"></p>\n<h3 id=\"手动安装演示\"><a href=\"#手动安装演示\" class=\"headerlink\" title=\"手动安装演示\"></a>手动安装演示</h3><p><a href=\"https://bilibili.com/video/av46403021\" target=\"_blank\" rel=\"noopener\">bilibili</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>该一键安装脚本只适用于 Debian、Ubuntu、Centos 系统。<br>直接在终端下执行以下命令就是了。该项目地址 <a href=\"https://github.com/Caffreyfans/flypy-install\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O install.sh https://raw.githubusercontent.com/Caffreyfans/flypy-install/master/install.sh &amp;&amp; sudo chmod +x install.sh &amp;&amp; ./install.sh</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Linux 系统下手动控制电脑风扇","date":"2018-12-18T16:00:00.000Z","comments":1,"_content":"\n## 命令控制简单方便\n笔记本风扇的轴承坏了，导致电脑运行时声音特别大。所以我到处在网上找资料看能不能通过手动的方法来限制风扇的转速，皇天不负有心人我还是找到了文档。风扇应该是I2C控制的，这样主板可以控制风扇的转速，风扇的转速也可以反馈到电脑。\n我们需要先找到风扇控制在 **Linux** 下的位置。我们只需要通过安装一个很小的工具就可以检测我们的电脑风扇了位置了。\n\n```bash\nsudo apt-get install lm-sensors fancontrol -y # 安装 lm-sensors fancontrol\n```\n\n这里讲解一下 **lm-sensors** 与 **fancontrol** 这两个工具的作用。\n\n| 工具包名 | 使用命令 | 作用 |\n| --- | --- | --- |\n| lm-sensors | sensors | 查看硬件温度 |\n| fancontrol | pwmconfig | 查找风扇位置 |\n\n安装好工具包之后我们首先通过\n```bash\nsudo pwmconfig\n```\n来找到我们风扇的位置，如果你是第一次使用它会询问你，输入 `y`  确认一下就行了。看一下执行结果\n\n| sudo pwmconfig | sensors |\n| --- | --- |\n| ![1](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/1.jpg) | ![2](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/2.jpg) |\n\n从 `sudo pwmconfig` 的执行结果来看，`Found the following PWM controls:` `hwmon3/pwm1` 那么就说明风扇的控制文件位置在 `hwmon3/pwm1` 了，那么我们直接在这个文件里直接填入控制值就可以实现手动控制电脑风扇了。\n```bash\necho 50 > /etc/class/hwmon/hwmon3/pwm1\n```\n\n风扇的转速通过 **PWM** 控制，也就是脉冲宽度调制。可以这样理解在一个周期内，高电平所占的时间长那么风扇就会转的更快，**PWM** 值可以取 0~255 之间的整数，0 就代表停止，255就代表最大转速。比如我这里查到我风扇对应的控制文件位置是 /hwmon3/pwm1，那么你就可以通过修改 **/sys/class/hwmon/hwmon3/pwm1** 文件里面的数值来改变风扇的转速了，这种办法只是暂时有效，一旦用户休眠或则注销，又得重新设置了。所以如果你想开机就让风扇转速受到控制你还得写个脚本再把它做成服务，然后让它开机执行。\n\n其实最好的解决风扇的问题就是换个风扇。换个笔记本风扇不难，去网上自己买个笔记本风扇就几十块钱，把笔记本拆开自己就换了用不了多就，要不然就找外面修理店的人帮你换。对于一般的笔记本来说超过 **50** 就算坑你了，自己可以在网上先看看你那种机型的风扇值多少。","source":"_posts/Linux控制电脑风扇.md","raw":"---\ntitle: Linux 系统下手动控制电脑风扇\ndate: 2018-12-19\ncategories: Linux\ncomments: true\n---\n\n## 命令控制简单方便\n笔记本风扇的轴承坏了，导致电脑运行时声音特别大。所以我到处在网上找资料看能不能通过手动的方法来限制风扇的转速，皇天不负有心人我还是找到了文档。风扇应该是I2C控制的，这样主板可以控制风扇的转速，风扇的转速也可以反馈到电脑。\n我们需要先找到风扇控制在 **Linux** 下的位置。我们只需要通过安装一个很小的工具就可以检测我们的电脑风扇了位置了。\n\n```bash\nsudo apt-get install lm-sensors fancontrol -y # 安装 lm-sensors fancontrol\n```\n\n这里讲解一下 **lm-sensors** 与 **fancontrol** 这两个工具的作用。\n\n| 工具包名 | 使用命令 | 作用 |\n| --- | --- | --- |\n| lm-sensors | sensors | 查看硬件温度 |\n| fancontrol | pwmconfig | 查找风扇位置 |\n\n安装好工具包之后我们首先通过\n```bash\nsudo pwmconfig\n```\n来找到我们风扇的位置，如果你是第一次使用它会询问你，输入 `y`  确认一下就行了。看一下执行结果\n\n| sudo pwmconfig | sensors |\n| --- | --- |\n| ![1](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/1.jpg) | ![2](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/2.jpg) |\n\n从 `sudo pwmconfig` 的执行结果来看，`Found the following PWM controls:` `hwmon3/pwm1` 那么就说明风扇的控制文件位置在 `hwmon3/pwm1` 了，那么我们直接在这个文件里直接填入控制值就可以实现手动控制电脑风扇了。\n```bash\necho 50 > /etc/class/hwmon/hwmon3/pwm1\n```\n\n风扇的转速通过 **PWM** 控制，也就是脉冲宽度调制。可以这样理解在一个周期内，高电平所占的时间长那么风扇就会转的更快，**PWM** 值可以取 0~255 之间的整数，0 就代表停止，255就代表最大转速。比如我这里查到我风扇对应的控制文件位置是 /hwmon3/pwm1，那么你就可以通过修改 **/sys/class/hwmon/hwmon3/pwm1** 文件里面的数值来改变风扇的转速了，这种办法只是暂时有效，一旦用户休眠或则注销，又得重新设置了。所以如果你想开机就让风扇转速受到控制你还得写个脚本再把它做成服务，然后让它开机执行。\n\n其实最好的解决风扇的问题就是换个风扇。换个笔记本风扇不难，去网上自己买个笔记本风扇就几十块钱，把笔记本拆开自己就换了用不了多就，要不然就找外面修理店的人帮你换。对于一般的笔记本来说超过 **50** 就算坑你了，自己可以在网上先看看你那种机型的风扇值多少。","slug":"Linux控制电脑风扇","published":1,"updated":"2020-09-04T07:44:40.921Z","layout":"post","photos":[],"link":"","_id":"ckenyxa5b0002kilcg2e1lz4q","content":"<h2 id=\"命令控制简单方便\"><a href=\"#命令控制简单方便\" class=\"headerlink\" title=\"命令控制简单方便\"></a>命令控制简单方便</h2><p>笔记本风扇的轴承坏了，导致电脑运行时声音特别大。所以我到处在网上找资料看能不能通过手动的方法来限制风扇的转速，皇天不负有心人我还是找到了文档。风扇应该是I2C控制的，这样主板可以控制风扇的转速，风扇的转速也可以反馈到电脑。<br>我们需要先找到风扇控制在 <strong>Linux</strong> 下的位置。我们只需要通过安装一个很小的工具就可以检测我们的电脑风扇了位置了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lm-sensors fancontrol -y <span class=\"comment\"># 安装 lm-sensors fancontrol</span></span><br></pre></td></tr></table></figure>\n\n<p>这里讲解一下 <strong>lm-sensors</strong> 与 <strong>fancontrol</strong> 这两个工具的作用。</p>\n<table>\n<thead>\n<tr>\n<th>工具包名</th>\n<th>使用命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lm-sensors</td>\n<td>sensors</td>\n<td>查看硬件温度</td>\n</tr>\n<tr>\n<td>fancontrol</td>\n<td>pwmconfig</td>\n<td>查找风扇位置</td>\n</tr>\n</tbody></table>\n<p>安装好工具包之后我们首先通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pwmconfig</span><br></pre></td></tr></table></figure>\n\n<p>来找到我们风扇的位置，如果你是第一次使用它会询问你，输入 <code>y</code>  确认一下就行了。看一下执行结果</p>\n<table>\n<thead>\n<tr>\n<th>sudo pwmconfig</th>\n<th>sensors</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/1.jpg\" alt=\"1\"></td>\n<td><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/2.jpg\" alt=\"2\"></td>\n</tr>\n</tbody></table>\n<p>从 <code>sudo pwmconfig</code> 的执行结果来看，<code>Found the following PWM controls:</code> <code>hwmon3/pwm1</code> 那么就说明风扇的控制文件位置在 <code>hwmon3/pwm1</code> 了，那么我们直接在这个文件里直接填入控制值就可以实现手动控制电脑风扇了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 50 &gt; /etc/class/hwmon/hwmon3/pwm1</span><br></pre></td></tr></table></figure>\n\n<p>风扇的转速通过 <strong>PWM</strong> 控制，也就是脉冲宽度调制。可以这样理解在一个周期内，高电平所占的时间长那么风扇就会转的更快，<strong>PWM</strong> 值可以取 0~255 之间的整数，0 就代表停止，255就代表最大转速。比如我这里查到我风扇对应的控制文件位置是 /hwmon3/pwm1，那么你就可以通过修改 <strong>/sys/class/hwmon/hwmon3/pwm1</strong> 文件里面的数值来改变风扇的转速了，这种办法只是暂时有效，一旦用户休眠或则注销，又得重新设置了。所以如果你想开机就让风扇转速受到控制你还得写个脚本再把它做成服务，然后让它开机执行。</p>\n<p>其实最好的解决风扇的问题就是换个风扇。换个笔记本风扇不难，去网上自己买个笔记本风扇就几十块钱，把笔记本拆开自己就换了用不了多就，要不然就找外面修理店的人帮你换。对于一般的笔记本来说超过 <strong>50</strong> 就算坑你了，自己可以在网上先看看你那种机型的风扇值多少。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令控制简单方便\"><a href=\"#命令控制简单方便\" class=\"headerlink\" title=\"命令控制简单方便\"></a>命令控制简单方便</h2><p>笔记本风扇的轴承坏了，导致电脑运行时声音特别大。所以我到处在网上找资料看能不能通过手动的方法来限制风扇的转速，皇天不负有心人我还是找到了文档。风扇应该是I2C控制的，这样主板可以控制风扇的转速，风扇的转速也可以反馈到电脑。<br>我们需要先找到风扇控制在 <strong>Linux</strong> 下的位置。我们只需要通过安装一个很小的工具就可以检测我们的电脑风扇了位置了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lm-sensors fancontrol -y <span class=\"comment\"># 安装 lm-sensors fancontrol</span></span><br></pre></td></tr></table></figure>\n\n<p>这里讲解一下 <strong>lm-sensors</strong> 与 <strong>fancontrol</strong> 这两个工具的作用。</p>\n<table>\n<thead>\n<tr>\n<th>工具包名</th>\n<th>使用命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lm-sensors</td>\n<td>sensors</td>\n<td>查看硬件温度</td>\n</tr>\n<tr>\n<td>fancontrol</td>\n<td>pwmconfig</td>\n<td>查找风扇位置</td>\n</tr>\n</tbody></table>\n<p>安装好工具包之后我们首先通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pwmconfig</span><br></pre></td></tr></table></figure>\n\n<p>来找到我们风扇的位置，如果你是第一次使用它会询问你，输入 <code>y</code>  确认一下就行了。看一下执行结果</p>\n<table>\n<thead>\n<tr>\n<th>sudo pwmconfig</th>\n<th>sensors</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/1.jpg\" alt=\"1\"></td>\n<td><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_2/2.jpg\" alt=\"2\"></td>\n</tr>\n</tbody></table>\n<p>从 <code>sudo pwmconfig</code> 的执行结果来看，<code>Found the following PWM controls:</code> <code>hwmon3/pwm1</code> 那么就说明风扇的控制文件位置在 <code>hwmon3/pwm1</code> 了，那么我们直接在这个文件里直接填入控制值就可以实现手动控制电脑风扇了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 50 &gt; /etc/class/hwmon/hwmon3/pwm1</span><br></pre></td></tr></table></figure>\n\n<p>风扇的转速通过 <strong>PWM</strong> 控制，也就是脉冲宽度调制。可以这样理解在一个周期内，高电平所占的时间长那么风扇就会转的更快，<strong>PWM</strong> 值可以取 0~255 之间的整数，0 就代表停止，255就代表最大转速。比如我这里查到我风扇对应的控制文件位置是 /hwmon3/pwm1，那么你就可以通过修改 <strong>/sys/class/hwmon/hwmon3/pwm1</strong> 文件里面的数值来改变风扇的转速了，这种办法只是暂时有效，一旦用户休眠或则注销，又得重新设置了。所以如果你想开机就让风扇转速受到控制你还得写个脚本再把它做成服务，然后让它开机执行。</p>\n<p>其实最好的解决风扇的问题就是换个风扇。换个笔记本风扇不难，去网上自己买个笔记本风扇就几十块钱，把笔记本拆开自己就换了用不了多就，要不然就找外面修理店的人帮你换。对于一般的笔记本来说超过 <strong>50</strong> 就算坑你了，自己可以在网上先看看你那种机型的风扇值多少。</p>\n"},{"title":"利用Docker搭建Samba服务","date":"2019-03-16T16:00:00.000Z","_content":"### 前述\n能看到搜索到这篇文章想必你已经了解了什么是 **Docker**，什么是 **Samba** 了。如果你不了解这两样东西，那么我建议你在网上搜索一下，仔细了解下这两样比较实用的工具。\n\n我就以我通俗的语言简述下这两样东西，**Docker** 是一种标准化的软件单元，说白了有了它，我们使用一个软件就像手机上使用 **APP** 一样，我们不用管这个软件怎么写的，以及运行这个软件需要什么环境啊。当我们手机需要某个软件的时候，我们都直接在应用商店里直接搜索下载某个软件，然后打开运行。**Docker** 跟这种道理差不多，如果我们需要某个软件，那么我们也直接从镜像仓库里直接拉取（手机上我们说下载应用，**Docker** 使用的是 **pull** 命令那么就该翻译成拉取，道理是一样的），手机上我们下载的称做安装包，**Docker** 中对应就是应该是镜像。手机上下载好软件包后安装的这个步骤对应 **Docker** 中就应该是创建容器的这个步骤了，创建容器的时候只需要你配置一些简单的参数。手机安装包在你的手机上能下载并安装，在别人的手机上也一样。**Docker** 也是如此，同一镜像都可以在同样的 **CPU** 架构下创建容器运行。只要你装了 **Docker** 就不在乎你用的什么系统了，就只有 **CPU** 架构的区分了。这样就大大为应用的部署提供了方便，而且通常来说一个容器是非常\t轻量的，创建和删除它都非常的方便。这就是为什么要使用 **Docker** 来搭建 **Samba** 服务的原因了。\n\n至于 **Samba** 就是适用与 **Linux** 和 **Unix** 的标准 **Windows** 互操作性程序套件。有了它我们就可以把任意文件在我们的 **Windows** 系统和 **Linux** 系统中任意的转移了。\n\n### 启动容器\n```bash\nsudo docker run -it --name samba --restart always \\\n\t--net host -p 139:139 -p 455:455  -v /home:/shared \\\n\t-d dperson/samba -s \"share;/shared;yes;no;yes\" -n\n```\n我们来说下每个参数的含义:\n\nsudo -> 使用 root 权限执行后续命令\n\ndocker -> docker 命令\n\nrun -> docker 命令的参数，用于启动容器\n\n-i -> 让容器的标准保持打开\n\n-t -> 为容器分配一个伪终端\n\n--name -> 容器名， samba 这里就给该容器命名为 samba\n\n--restart -> 重启参数，always 我们这里选的就是一直重启，只要是启动失败了它就会不断的重启，这里的作用主要是为了开机启动\n\n--net -> 加入网络，host 就是说该容器加入到主机网络中\n\n-p -> 端口映射，139、455 是 **Samba** 协议的端口\n\n-v -> 文件映射， /home:/shared 就是把主机中的 /home 目录映射到 容器中的 /shared 目录中\n\n-d -> 后台运行\n\ndperson/samba 使用的镜像名，当我们的本地没有该镜像时，它会自动去网络仓库里搜索并拉取， 镜像可以是我们自己写的，也可以是别人写好的，我们这里所使用的就是别人已经写的了的\n\n这上面的都是 **Docker** 命令中的参数，而镜像名后面跟的参数就是该镜像自己设定的参数了，有的镜像可能有，有的镜像可能也没有。这主要就要看这个镜像是怎么写的了\n\n-s -> 设置共享目录， \"share;/shared;yes;no;yes\" 给共享的文件夹取名为 share，共享的是容器中的 shared 文件夹（前面的参数就已经把主机中的文件映射到这里了），可见，非只读，启用访客\n\n***关于更多的 dperson/samba 详细设置请见 [dperson/samba](https://hub.docker.com/r/dperson/samba/)***\n\n","source":"_posts/利用Docker搭建Samba服务.md","raw":"---\ntitle: 利用Docker搭建Samba服务\ndate: 2019-03-17\ncategories: Linux\n\n---\n### 前述\n能看到搜索到这篇文章想必你已经了解了什么是 **Docker**，什么是 **Samba** 了。如果你不了解这两样东西，那么我建议你在网上搜索一下，仔细了解下这两样比较实用的工具。\n\n我就以我通俗的语言简述下这两样东西，**Docker** 是一种标准化的软件单元，说白了有了它，我们使用一个软件就像手机上使用 **APP** 一样，我们不用管这个软件怎么写的，以及运行这个软件需要什么环境啊。当我们手机需要某个软件的时候，我们都直接在应用商店里直接搜索下载某个软件，然后打开运行。**Docker** 跟这种道理差不多，如果我们需要某个软件，那么我们也直接从镜像仓库里直接拉取（手机上我们说下载应用，**Docker** 使用的是 **pull** 命令那么就该翻译成拉取，道理是一样的），手机上我们下载的称做安装包，**Docker** 中对应就是应该是镜像。手机上下载好软件包后安装的这个步骤对应 **Docker** 中就应该是创建容器的这个步骤了，创建容器的时候只需要你配置一些简单的参数。手机安装包在你的手机上能下载并安装，在别人的手机上也一样。**Docker** 也是如此，同一镜像都可以在同样的 **CPU** 架构下创建容器运行。只要你装了 **Docker** 就不在乎你用的什么系统了，就只有 **CPU** 架构的区分了。这样就大大为应用的部署提供了方便，而且通常来说一个容器是非常\t轻量的，创建和删除它都非常的方便。这就是为什么要使用 **Docker** 来搭建 **Samba** 服务的原因了。\n\n至于 **Samba** 就是适用与 **Linux** 和 **Unix** 的标准 **Windows** 互操作性程序套件。有了它我们就可以把任意文件在我们的 **Windows** 系统和 **Linux** 系统中任意的转移了。\n\n### 启动容器\n```bash\nsudo docker run -it --name samba --restart always \\\n\t--net host -p 139:139 -p 455:455  -v /home:/shared \\\n\t-d dperson/samba -s \"share;/shared;yes;no;yes\" -n\n```\n我们来说下每个参数的含义:\n\nsudo -> 使用 root 权限执行后续命令\n\ndocker -> docker 命令\n\nrun -> docker 命令的参数，用于启动容器\n\n-i -> 让容器的标准保持打开\n\n-t -> 为容器分配一个伪终端\n\n--name -> 容器名， samba 这里就给该容器命名为 samba\n\n--restart -> 重启参数，always 我们这里选的就是一直重启，只要是启动失败了它就会不断的重启，这里的作用主要是为了开机启动\n\n--net -> 加入网络，host 就是说该容器加入到主机网络中\n\n-p -> 端口映射，139、455 是 **Samba** 协议的端口\n\n-v -> 文件映射， /home:/shared 就是把主机中的 /home 目录映射到 容器中的 /shared 目录中\n\n-d -> 后台运行\n\ndperson/samba 使用的镜像名，当我们的本地没有该镜像时，它会自动去网络仓库里搜索并拉取， 镜像可以是我们自己写的，也可以是别人写好的，我们这里所使用的就是别人已经写的了的\n\n这上面的都是 **Docker** 命令中的参数，而镜像名后面跟的参数就是该镜像自己设定的参数了，有的镜像可能有，有的镜像可能也没有。这主要就要看这个镜像是怎么写的了\n\n-s -> 设置共享目录， \"share;/shared;yes;no;yes\" 给共享的文件夹取名为 share，共享的是容器中的 shared 文件夹（前面的参数就已经把主机中的文件映射到这里了），可见，非只读，启用访客\n\n***关于更多的 dperson/samba 详细设置请见 [dperson/samba](https://hub.docker.com/r/dperson/samba/)***\n\n","slug":"利用Docker搭建Samba服务","published":1,"updated":"2020-09-04T07:44:40.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckenyxa5e0005kilcw45xxiub","content":"<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><p>能看到搜索到这篇文章想必你已经了解了什么是 <strong>Docker</strong>，什么是 <strong>Samba</strong> 了。如果你不了解这两样东西，那么我建议你在网上搜索一下，仔细了解下这两样比较实用的工具。</p>\n<p>我就以我通俗的语言简述下这两样东西，<strong>Docker</strong> 是一种标准化的软件单元，说白了有了它，我们使用一个软件就像手机上使用 <strong>APP</strong> 一样，我们不用管这个软件怎么写的，以及运行这个软件需要什么环境啊。当我们手机需要某个软件的时候，我们都直接在应用商店里直接搜索下载某个软件，然后打开运行。<strong>Docker</strong> 跟这种道理差不多，如果我们需要某个软件，那么我们也直接从镜像仓库里直接拉取（手机上我们说下载应用，<strong>Docker</strong> 使用的是 <strong>pull</strong> 命令那么就该翻译成拉取，道理是一样的），手机上我们下载的称做安装包，<strong>Docker</strong> 中对应就是应该是镜像。手机上下载好软件包后安装的这个步骤对应 <strong>Docker</strong> 中就应该是创建容器的这个步骤了，创建容器的时候只需要你配置一些简单的参数。手机安装包在你的手机上能下载并安装，在别人的手机上也一样。<strong>Docker</strong> 也是如此，同一镜像都可以在同样的 <strong>CPU</strong> 架构下创建容器运行。只要你装了 <strong>Docker</strong> 就不在乎你用的什么系统了，就只有 <strong>CPU</strong> 架构的区分了。这样就大大为应用的部署提供了方便，而且通常来说一个容器是非常    轻量的，创建和删除它都非常的方便。这就是为什么要使用 <strong>Docker</strong> 来搭建 <strong>Samba</strong> 服务的原因了。</p>\n<p>至于 <strong>Samba</strong> 就是适用与 <strong>Linux</strong> 和 <strong>Unix</strong> 的标准 <strong>Windows</strong> 互操作性程序套件。有了它我们就可以把任意文件在我们的 <strong>Windows</strong> 系统和 <strong>Linux</strong> 系统中任意的转移了。</p>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -it --name samba --restart always \\</span><br><span class=\"line\">\t--net host -p 139:139 -p 455:455  -v /home:/shared \\</span><br><span class=\"line\">\t-d dperson/samba -s <span class=\"string\">\"share;/shared;yes;no;yes\"</span> -n</span><br></pre></td></tr></table></figure>\n\n<p>我们来说下每个参数的含义:</p>\n<p>sudo -&gt; 使用 root 权限执行后续命令</p>\n<p>docker -&gt; docker 命令</p>\n<p>run -&gt; docker 命令的参数，用于启动容器</p>\n<p>-i -&gt; 让容器的标准保持打开</p>\n<p>-t -&gt; 为容器分配一个伪终端</p>\n<p>–name -&gt; 容器名， samba 这里就给该容器命名为 samba</p>\n<p>–restart -&gt; 重启参数，always 我们这里选的就是一直重启，只要是启动失败了它就会不断的重启，这里的作用主要是为了开机启动</p>\n<p>–net -&gt; 加入网络，host 就是说该容器加入到主机网络中</p>\n<p>-p -&gt; 端口映射，139、455 是 <strong>Samba</strong> 协议的端口</p>\n<p>-v -&gt; 文件映射， /home:/shared 就是把主机中的 /home 目录映射到 容器中的 /shared 目录中</p>\n<p>-d -&gt; 后台运行</p>\n<p>dperson/samba 使用的镜像名，当我们的本地没有该镜像时，它会自动去网络仓库里搜索并拉取， 镜像可以是我们自己写的，也可以是别人写好的，我们这里所使用的就是别人已经写的了的</p>\n<p>这上面的都是 <strong>Docker</strong> 命令中的参数，而镜像名后面跟的参数就是该镜像自己设定的参数了，有的镜像可能有，有的镜像可能也没有。这主要就要看这个镜像是怎么写的了</p>\n<p>-s -&gt; 设置共享目录， “share;/shared;yes;no;yes” 给共享的文件夹取名为 share，共享的是容器中的 shared 文件夹（前面的参数就已经把主机中的文件映射到这里了），可见，非只读，启用访客</p>\n<p><strong><em>关于更多的 dperson/samba 详细设置请见 <a href=\"https://hub.docker.com/r/dperson/samba/\" target=\"_blank\" rel=\"noopener\">dperson/samba</a></em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><p>能看到搜索到这篇文章想必你已经了解了什么是 <strong>Docker</strong>，什么是 <strong>Samba</strong> 了。如果你不了解这两样东西，那么我建议你在网上搜索一下，仔细了解下这两样比较实用的工具。</p>\n<p>我就以我通俗的语言简述下这两样东西，<strong>Docker</strong> 是一种标准化的软件单元，说白了有了它，我们使用一个软件就像手机上使用 <strong>APP</strong> 一样，我们不用管这个软件怎么写的，以及运行这个软件需要什么环境啊。当我们手机需要某个软件的时候，我们都直接在应用商店里直接搜索下载某个软件，然后打开运行。<strong>Docker</strong> 跟这种道理差不多，如果我们需要某个软件，那么我们也直接从镜像仓库里直接拉取（手机上我们说下载应用，<strong>Docker</strong> 使用的是 <strong>pull</strong> 命令那么就该翻译成拉取，道理是一样的），手机上我们下载的称做安装包，<strong>Docker</strong> 中对应就是应该是镜像。手机上下载好软件包后安装的这个步骤对应 <strong>Docker</strong> 中就应该是创建容器的这个步骤了，创建容器的时候只需要你配置一些简单的参数。手机安装包在你的手机上能下载并安装，在别人的手机上也一样。<strong>Docker</strong> 也是如此，同一镜像都可以在同样的 <strong>CPU</strong> 架构下创建容器运行。只要你装了 <strong>Docker</strong> 就不在乎你用的什么系统了，就只有 <strong>CPU</strong> 架构的区分了。这样就大大为应用的部署提供了方便，而且通常来说一个容器是非常    轻量的，创建和删除它都非常的方便。这就是为什么要使用 <strong>Docker</strong> 来搭建 <strong>Samba</strong> 服务的原因了。</p>\n<p>至于 <strong>Samba</strong> 就是适用与 <strong>Linux</strong> 和 <strong>Unix</strong> 的标准 <strong>Windows</strong> 互操作性程序套件。有了它我们就可以把任意文件在我们的 <strong>Windows</strong> 系统和 <strong>Linux</strong> 系统中任意的转移了。</p>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -it --name samba --restart always \\</span><br><span class=\"line\">\t--net host -p 139:139 -p 455:455  -v /home:/shared \\</span><br><span class=\"line\">\t-d dperson/samba -s <span class=\"string\">\"share;/shared;yes;no;yes\"</span> -n</span><br></pre></td></tr></table></figure>\n\n<p>我们来说下每个参数的含义:</p>\n<p>sudo -&gt; 使用 root 权限执行后续命令</p>\n<p>docker -&gt; docker 命令</p>\n<p>run -&gt; docker 命令的参数，用于启动容器</p>\n<p>-i -&gt; 让容器的标准保持打开</p>\n<p>-t -&gt; 为容器分配一个伪终端</p>\n<p>–name -&gt; 容器名， samba 这里就给该容器命名为 samba</p>\n<p>–restart -&gt; 重启参数，always 我们这里选的就是一直重启，只要是启动失败了它就会不断的重启，这里的作用主要是为了开机启动</p>\n<p>–net -&gt; 加入网络，host 就是说该容器加入到主机网络中</p>\n<p>-p -&gt; 端口映射，139、455 是 <strong>Samba</strong> 协议的端口</p>\n<p>-v -&gt; 文件映射， /home:/shared 就是把主机中的 /home 目录映射到 容器中的 /shared 目录中</p>\n<p>-d -&gt; 后台运行</p>\n<p>dperson/samba 使用的镜像名，当我们的本地没有该镜像时，它会自动去网络仓库里搜索并拉取， 镜像可以是我们自己写的，也可以是别人写好的，我们这里所使用的就是别人已经写的了的</p>\n<p>这上面的都是 <strong>Docker</strong> 命令中的参数，而镜像名后面跟的参数就是该镜像自己设定的参数了，有的镜像可能有，有的镜像可能也没有。这主要就要看这个镜像是怎么写的了</p>\n<p>-s -&gt; 设置共享目录， “share;/shared;yes;no;yes” 给共享的文件夹取名为 share，共享的是容器中的 shared 文件夹（前面的参数就已经把主机中的文件映射到这里了），可见，非只读，启用访客</p>\n<p><strong><em>关于更多的 dperson/samba 详细设置请见 <a href=\"https://hub.docker.com/r/dperson/samba/\" target=\"_blank\" rel=\"noopener\">dperson/samba</a></em></strong></p>\n"},{"title":"讲一个玩 Homeassistant 一年的故事(一)","date":"2018-12-18T16:00:00.000Z","comments":1,"_content":"\n## 大家好，以下为我玩 ***HASS*** 一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\n\n### 我是如何入坑？\n\t\n那么我就先从入坑开始讲起，大概是 `2017` 年的 `5` 月份我买了一块树莓派，型号是 `3b` ，买这个的初衷是为了玩，看着网上的教程资料发现这个小板子好玩的很呐，感觉无所不能，于是就在淘宝上购买了我的第一块板子，和一些面包板、杜邦线之类的东西。\n\n<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/1.png\" width=\"50%\" height=\"50%\"/><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/2.png\" width=\"50%\" height=\"50%\"/>\n买了这些东西其实不是为了玩 ***HASS*** ，当时想的是学习传感器以及单片机，自己一心想做个遥控小车出来。然后自己跟着一本印度人写的树莓派应用的书学习，初步了解到了点什么是 **传感器**，什么是 **Linux** 。自己傻乎乎的在那里玩 **超声波** 、**DHT11** 的驱动还以为自己发现了新大陆，觉得自己非常的牛逼。忍不住想在别人面前炫耀，于是自己加了个树莓派交流群，其实里面吹牛的多，干事的少。一天我例行公事在群友面前炫耀自己是怎么用树莓派让我的 **HC-SR04**、**DHT11** 如何工作的，结果有位老哥一声不吭的录了一段视频，视频里的内容我现在都记得，他用 **Siri** 控制了他一个自制的台灯。这种从来没发过话的人，突然发了一个比你还牛的视频，对于我来说无疑是对我巨大的打击，我顿时感觉自己的人格受到了严重的侮辱。我立马加了他好友，他也很很快的添加了我。于是我疯狂的赞美他，夸他是多么多么的牛，希望他也能教教我怎么做。最开始他没理我，于是我第二天又问他是怎么做的，可能是他不耐烦了，就回了我两个词 **homeassistant + homebridge** 就完了，再问他具体怎么做的也不说了，大神的口是真的难开，就回我两个词。再怎么问他都不鸟我了，于是我就在百度上找 **homeassistant homebridge** ，最开始这个资料是真的少，百度了许久才搞懂这个 **Homeassistant** 和 **Homebridge** 是两个东西，**Homeassistant** 可以理解为一个 **Hub** 而 **Homebridge** 应该理解为 `homeassistant to homekit` 的一个网关。百度上有用的资料就两篇，一个是 **老高** 的帖子，另一个是一个不知名的人写的，这两位人就是带我入门的人。老高的贴子最好，他讲的很详细，我的树莓派也因此发挥了它的光和热, 要知道我最初买树莓派并不是为了玩 **Hass** 的，所以这个也就告诉我们一个道理 \"无心插柳柳成阴\" ，他的教程从树莓派刷机到安装 **Homeassistant** ，到配置以及 **Sonoff** 刷固件每个细节都讲了，他还专门录制了视频害怕我们不会，没办法那时候是真的菜，他不讲那么细中间卡一步就够折腾的。\n\n\n就这样照着老高的帖子我跌跌撞撞的在一个星期内成功的用 **Siri** 了我的一个发光二级管的亮灭。于是我按耐不住激动的心情又录了一个 **Siri** 控制发光二级管的视频，这次的视频引起的反响就更大了。连前面我主动加的那位小哥都表示惊讶——\"你这么快就弄好了？\"，呵呵你也不看看我是谁。后面我与这个小哥互相交流了会，发现他也是个狠角色，比我大一级，参加过学校的比赛还获得过奖。顿时我就对他心存敬意，希望有朝一日也像他那样成功。过了几天我又把这个视频拿到群里炫耀，这时一个在 **HomeAssistant智能家居** 群里的人发现了我，并夸赞我东西做的不错，问我是不是也玩 **Homeassistant** 的。不一会他就把我拉到了全国最大的 **Homeassistant** 交流群，进入之后我又发现自己原来又是最菜的，别人都开始研究怎么让空调连接到 **Homeassistant** 了，**Sonoff** 这些别人早会了。\n\n\n\n\n### 这一年我学到了些什么？\n1. #### 我学会了学习新东西的能力\n\t从这张图就看的出我段位不低了，入坑早资料少，所以后面入坑的朋友真心别心急慢慢来，前面已经出了很多教程了，选自己有用的学，学的很快的，毕竟资料很丰富了。我知道有的人跟我一样很依赖问别人，自己不愿意花大功夫去网上找资料。自己经验表明一般来说你的问题在网上都会找到，你要有总结出你的问题并提取关键词的能力，然后拿到网上去搜索一会就找到了，只有你的问题很前沿或者很奇葩的问题才找不到。\n<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/3.png\" width=\"50%\" height=\"50%\"/>\n2. #### 国外网站要多逛\n\t不得不承认老外是真的强，不是我舔他们。其实我们玩的这些东西都是老外玩了之后我们再玩的。除了 **ESP8266**、**小米设备** 是我们国产的，其余大多都是老外先玩的, **Homeassistant、Homekit、Espeasy、Tasmota、Lovelace……** 他们一般都比我们玩的溜，毕竟是他们写的东西。所以要找新的东西或者找些什么资料啊，去他们的网站找找，学习别人的东西也未尝不可。\n3. #### 要舍得花钱\n\t不得不说玩 ***HASS*** 是真的烧钱，我没玩 ***HASS*** 之前每个月都还会剩个两三百，每个月还会请别人在外面吃顿饭，自从玩了 ***HASS*** 后发现这玩意就是个无底洞。买完树莓买 **Sonoff**，刚把这个买了别人又在玩 **Nodemcu** 了又得买，双十一到了又跟风买天猫精灵，平时还买些传感器和配套的东西之类的，又什么 **WS2812B**、**N1**、**K2P**、**摄像头** 之类的反正我现在每个月都欠蚂蚁花呗钱，活动资金不够了就问朋友借。舍得花钱但到理性消费，买些自己需要的东西就行了，别看见什么就买，买来不用浪费。\n\n**看一张白神设备图**\n<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/4.jpg\" width=\"50%\" height=\"50%\"/>\n4. #### 学到了些新技术\n    学校没学到的玩 **HASS** 学到了些，玩 **HASS** 你起码会学到点 **Linux** 的基础吧，设置开机启动，设置账户，权限，防火墙问题等等，再说 **Linux** 上的软件 **Frp**、**Docker**、**Nginx**、**Shadowsocket** ……也会接触到，反正东西需要自己琢磨。硬件也有从硬件连接到固件烧录，体验过之后就会收获很多，学习的时候要保持敬畏之心。为什么这么说？如果你弄些东西的过程中完全想当然的来做，很容易吃亏，有时候是耗时，有时候就是把东西弄坏。得不偿失，我一般喜欢弄东西的时候完全按教程来，等我把东西弄好了，自己再在再创造。这样一来是为了让我更快的体验到这东西弄好之后是什么样子，二来是为了总结经验方便再创造。","source":"_posts/玩HASS一年的故事 (一).md","raw":"---\ntitle: 讲一个玩 Homeassistant 一年的故事(一)\ndate: 2018-12-19\ncategories: 故事\ncomments: true\n---\n\n## 大家好，以下为我玩 ***HASS*** 一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\n\n### 我是如何入坑？\n\t\n那么我就先从入坑开始讲起，大概是 `2017` 年的 `5` 月份我买了一块树莓派，型号是 `3b` ，买这个的初衷是为了玩，看着网上的教程资料发现这个小板子好玩的很呐，感觉无所不能，于是就在淘宝上购买了我的第一块板子，和一些面包板、杜邦线之类的东西。\n\n<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/1.png\" width=\"50%\" height=\"50%\"/><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/2.png\" width=\"50%\" height=\"50%\"/>\n买了这些东西其实不是为了玩 ***HASS*** ，当时想的是学习传感器以及单片机，自己一心想做个遥控小车出来。然后自己跟着一本印度人写的树莓派应用的书学习，初步了解到了点什么是 **传感器**，什么是 **Linux** 。自己傻乎乎的在那里玩 **超声波** 、**DHT11** 的驱动还以为自己发现了新大陆，觉得自己非常的牛逼。忍不住想在别人面前炫耀，于是自己加了个树莓派交流群，其实里面吹牛的多，干事的少。一天我例行公事在群友面前炫耀自己是怎么用树莓派让我的 **HC-SR04**、**DHT11** 如何工作的，结果有位老哥一声不吭的录了一段视频，视频里的内容我现在都记得，他用 **Siri** 控制了他一个自制的台灯。这种从来没发过话的人，突然发了一个比你还牛的视频，对于我来说无疑是对我巨大的打击，我顿时感觉自己的人格受到了严重的侮辱。我立马加了他好友，他也很很快的添加了我。于是我疯狂的赞美他，夸他是多么多么的牛，希望他也能教教我怎么做。最开始他没理我，于是我第二天又问他是怎么做的，可能是他不耐烦了，就回了我两个词 **homeassistant + homebridge** 就完了，再问他具体怎么做的也不说了，大神的口是真的难开，就回我两个词。再怎么问他都不鸟我了，于是我就在百度上找 **homeassistant homebridge** ，最开始这个资料是真的少，百度了许久才搞懂这个 **Homeassistant** 和 **Homebridge** 是两个东西，**Homeassistant** 可以理解为一个 **Hub** 而 **Homebridge** 应该理解为 `homeassistant to homekit` 的一个网关。百度上有用的资料就两篇，一个是 **老高** 的帖子，另一个是一个不知名的人写的，这两位人就是带我入门的人。老高的贴子最好，他讲的很详细，我的树莓派也因此发挥了它的光和热, 要知道我最初买树莓派并不是为了玩 **Hass** 的，所以这个也就告诉我们一个道理 \"无心插柳柳成阴\" ，他的教程从树莓派刷机到安装 **Homeassistant** ，到配置以及 **Sonoff** 刷固件每个细节都讲了，他还专门录制了视频害怕我们不会，没办法那时候是真的菜，他不讲那么细中间卡一步就够折腾的。\n\n\n就这样照着老高的帖子我跌跌撞撞的在一个星期内成功的用 **Siri** 了我的一个发光二级管的亮灭。于是我按耐不住激动的心情又录了一个 **Siri** 控制发光二级管的视频，这次的视频引起的反响就更大了。连前面我主动加的那位小哥都表示惊讶——\"你这么快就弄好了？\"，呵呵你也不看看我是谁。后面我与这个小哥互相交流了会，发现他也是个狠角色，比我大一级，参加过学校的比赛还获得过奖。顿时我就对他心存敬意，希望有朝一日也像他那样成功。过了几天我又把这个视频拿到群里炫耀，这时一个在 **HomeAssistant智能家居** 群里的人发现了我，并夸赞我东西做的不错，问我是不是也玩 **Homeassistant** 的。不一会他就把我拉到了全国最大的 **Homeassistant** 交流群，进入之后我又发现自己原来又是最菜的，别人都开始研究怎么让空调连接到 **Homeassistant** 了，**Sonoff** 这些别人早会了。\n\n\n\n\n### 这一年我学到了些什么？\n1. #### 我学会了学习新东西的能力\n\t从这张图就看的出我段位不低了，入坑早资料少，所以后面入坑的朋友真心别心急慢慢来，前面已经出了很多教程了，选自己有用的学，学的很快的，毕竟资料很丰富了。我知道有的人跟我一样很依赖问别人，自己不愿意花大功夫去网上找资料。自己经验表明一般来说你的问题在网上都会找到，你要有总结出你的问题并提取关键词的能力，然后拿到网上去搜索一会就找到了，只有你的问题很前沿或者很奇葩的问题才找不到。\n<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/3.png\" width=\"50%\" height=\"50%\"/>\n2. #### 国外网站要多逛\n\t不得不承认老外是真的强，不是我舔他们。其实我们玩的这些东西都是老外玩了之后我们再玩的。除了 **ESP8266**、**小米设备** 是我们国产的，其余大多都是老外先玩的, **Homeassistant、Homekit、Espeasy、Tasmota、Lovelace……** 他们一般都比我们玩的溜，毕竟是他们写的东西。所以要找新的东西或者找些什么资料啊，去他们的网站找找，学习别人的东西也未尝不可。\n3. #### 要舍得花钱\n\t不得不说玩 ***HASS*** 是真的烧钱，我没玩 ***HASS*** 之前每个月都还会剩个两三百，每个月还会请别人在外面吃顿饭，自从玩了 ***HASS*** 后发现这玩意就是个无底洞。买完树莓买 **Sonoff**，刚把这个买了别人又在玩 **Nodemcu** 了又得买，双十一到了又跟风买天猫精灵，平时还买些传感器和配套的东西之类的，又什么 **WS2812B**、**N1**、**K2P**、**摄像头** 之类的反正我现在每个月都欠蚂蚁花呗钱，活动资金不够了就问朋友借。舍得花钱但到理性消费，买些自己需要的东西就行了，别看见什么就买，买来不用浪费。\n\n**看一张白神设备图**\n<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/4.jpg\" width=\"50%\" height=\"50%\"/>\n4. #### 学到了些新技术\n    学校没学到的玩 **HASS** 学到了些，玩 **HASS** 你起码会学到点 **Linux** 的基础吧，设置开机启动，设置账户，权限，防火墙问题等等，再说 **Linux** 上的软件 **Frp**、**Docker**、**Nginx**、**Shadowsocket** ……也会接触到，反正东西需要自己琢磨。硬件也有从硬件连接到固件烧录，体验过之后就会收获很多，学习的时候要保持敬畏之心。为什么这么说？如果你弄些东西的过程中完全想当然的来做，很容易吃亏，有时候是耗时，有时候就是把东西弄坏。得不偿失，我一般喜欢弄东西的时候完全按教程来，等我把东西弄好了，自己再在再创造。这样一来是为了让我更快的体验到这东西弄好之后是什么样子，二来是为了总结经验方便再创造。","slug":"玩HASS一年的故事 (一)","published":1,"updated":"2020-09-04T07:44:40.921Z","layout":"post","photos":[],"link":"","_id":"ckenyxa5f0007kilcdi1k5nqn","content":"<h2 id=\"大家好，以下为我玩-HASS-一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\"><a href=\"#大家好，以下为我玩-HASS-一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\" class=\"headerlink\" title=\"大家好，以下为我玩 HASS 一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\"></a>大家好，以下为我玩 <strong><em>HASS</em></strong> 一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。</h2><h3 id=\"我是如何入坑？\"><a href=\"#我是如何入坑？\" class=\"headerlink\" title=\"我是如何入坑？\"></a>我是如何入坑？</h3><p>那么我就先从入坑开始讲起，大概是 <code>2017</code> 年的 <code>5</code> 月份我买了一块树莓派，型号是 <code>3b</code> ，买这个的初衷是为了玩，看着网上的教程资料发现这个小板子好玩的很呐，感觉无所不能，于是就在淘宝上购买了我的第一块板子，和一些面包板、杜邦线之类的东西。</p>\n<p><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/1.png\" width=\"50%\" height=\"50%\"><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/2.png\" width=\"50%\" height=\"50%\"><br>买了这些东西其实不是为了玩 <strong><em>HASS</em></strong> ，当时想的是学习传感器以及单片机，自己一心想做个遥控小车出来。然后自己跟着一本印度人写的树莓派应用的书学习，初步了解到了点什么是 <strong>传感器</strong>，什么是 <strong>Linux</strong> 。自己傻乎乎的在那里玩 <strong>超声波</strong> 、<strong>DHT11</strong> 的驱动还以为自己发现了新大陆，觉得自己非常的牛逼。忍不住想在别人面前炫耀，于是自己加了个树莓派交流群，其实里面吹牛的多，干事的少。一天我例行公事在群友面前炫耀自己是怎么用树莓派让我的 <strong>HC-SR04</strong>、<strong>DHT11</strong> 如何工作的，结果有位老哥一声不吭的录了一段视频，视频里的内容我现在都记得，他用 <strong>Siri</strong> 控制了他一个自制的台灯。这种从来没发过话的人，突然发了一个比你还牛的视频，对于我来说无疑是对我巨大的打击，我顿时感觉自己的人格受到了严重的侮辱。我立马加了他好友，他也很很快的添加了我。于是我疯狂的赞美他，夸他是多么多么的牛，希望他也能教教我怎么做。最开始他没理我，于是我第二天又问他是怎么做的，可能是他不耐烦了，就回了我两个词 <strong>homeassistant + homebridge</strong> 就完了，再问他具体怎么做的也不说了，大神的口是真的难开，就回我两个词。再怎么问他都不鸟我了，于是我就在百度上找 <strong>homeassistant homebridge</strong> ，最开始这个资料是真的少，百度了许久才搞懂这个 <strong>Homeassistant</strong> 和 <strong>Homebridge</strong> 是两个东西，<strong>Homeassistant</strong> 可以理解为一个 <strong>Hub</strong> 而 <strong>Homebridge</strong> 应该理解为 <code>homeassistant to homekit</code> 的一个网关。百度上有用的资料就两篇，一个是 <strong>老高</strong> 的帖子，另一个是一个不知名的人写的，这两位人就是带我入门的人。老高的贴子最好，他讲的很详细，我的树莓派也因此发挥了它的光和热, 要知道我最初买树莓派并不是为了玩 <strong>Hass</strong> 的，所以这个也就告诉我们一个道理 “无心插柳柳成阴” ，他的教程从树莓派刷机到安装 <strong>Homeassistant</strong> ，到配置以及 <strong>Sonoff</strong> 刷固件每个细节都讲了，他还专门录制了视频害怕我们不会，没办法那时候是真的菜，他不讲那么细中间卡一步就够折腾的。</p>\n<p>就这样照着老高的帖子我跌跌撞撞的在一个星期内成功的用 <strong>Siri</strong> 了我的一个发光二级管的亮灭。于是我按耐不住激动的心情又录了一个 <strong>Siri</strong> 控制发光二级管的视频，这次的视频引起的反响就更大了。连前面我主动加的那位小哥都表示惊讶——“你这么快就弄好了？”，呵呵你也不看看我是谁。后面我与这个小哥互相交流了会，发现他也是个狠角色，比我大一级，参加过学校的比赛还获得过奖。顿时我就对他心存敬意，希望有朝一日也像他那样成功。过了几天我又把这个视频拿到群里炫耀，这时一个在 <strong>HomeAssistant智能家居</strong> 群里的人发现了我，并夸赞我东西做的不错，问我是不是也玩 <strong>Homeassistant</strong> 的。不一会他就把我拉到了全国最大的 <strong>Homeassistant</strong> 交流群，进入之后我又发现自己原来又是最菜的，别人都开始研究怎么让空调连接到 <strong>Homeassistant</strong> 了，<strong>Sonoff</strong> 这些别人早会了。</p>\n<h3 id=\"这一年我学到了些什么？\"><a href=\"#这一年我学到了些什么？\" class=\"headerlink\" title=\"这一年我学到了些什么？\"></a>这一年我学到了些什么？</h3><ol>\n<li><h4 id=\"我学会了学习新东西的能力\"><a href=\"#我学会了学习新东西的能力\" class=\"headerlink\" title=\"我学会了学习新东西的能力\"></a>我学会了学习新东西的能力</h4> 从这张图就看的出我段位不低了，入坑早资料少，所以后面入坑的朋友真心别心急慢慢来，前面已经出了很多教程了，选自己有用的学，学的很快的，毕竟资料很丰富了。我知道有的人跟我一样很依赖问别人，自己不愿意花大功夫去网上找资料。自己经验表明一般来说你的问题在网上都会找到，你要有总结出你的问题并提取关键词的能力，然后拿到网上去搜索一会就找到了，只有你的问题很前沿或者很奇葩的问题才找不到。<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/3.png\" width=\"50%\" height=\"50%\"></li>\n<li><h4 id=\"国外网站要多逛\"><a href=\"#国外网站要多逛\" class=\"headerlink\" title=\"国外网站要多逛\"></a>国外网站要多逛</h4> 不得不承认老外是真的强，不是我舔他们。其实我们玩的这些东西都是老外玩了之后我们再玩的。除了 <strong>ESP8266</strong>、<strong>小米设备</strong> 是我们国产的，其余大多都是老外先玩的, <strong>Homeassistant、Homekit、Espeasy、Tasmota、Lovelace……</strong> 他们一般都比我们玩的溜，毕竟是他们写的东西。所以要找新的东西或者找些什么资料啊，去他们的网站找找，学习别人的东西也未尝不可。</li>\n<li><h4 id=\"要舍得花钱\"><a href=\"#要舍得花钱\" class=\"headerlink\" title=\"要舍得花钱\"></a>要舍得花钱</h4> 不得不说玩 <strong><em>HASS</em></strong> 是真的烧钱，我没玩 <strong><em>HASS</em></strong> 之前每个月都还会剩个两三百，每个月还会请别人在外面吃顿饭，自从玩了 <strong><em>HASS</em></strong> 后发现这玩意就是个无底洞。买完树莓买 <strong>Sonoff</strong>，刚把这个买了别人又在玩 <strong>Nodemcu</strong> 了又得买，双十一到了又跟风买天猫精灵，平时还买些传感器和配套的东西之类的，又什么 <strong>WS2812B</strong>、<strong>N1</strong>、<strong>K2P</strong>、<strong>摄像头</strong> 之类的反正我现在每个月都欠蚂蚁花呗钱，活动资金不够了就问朋友借。舍得花钱但到理性消费，买些自己需要的东西就行了，别看见什么就买，买来不用浪费。</li>\n</ol>\n<p><strong>看一张白神设备图</strong><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/4.jpg\" width=\"50%\" height=\"50%\"></p>\n<ol start=\"4\">\n<li><h4 id=\"学到了些新技术\"><a href=\"#学到了些新技术\" class=\"headerlink\" title=\"学到了些新技术\"></a>学到了些新技术</h4> 学校没学到的玩 <strong>HASS</strong> 学到了些，玩 <strong>HASS</strong> 你起码会学到点 <strong>Linux</strong> 的基础吧，设置开机启动，设置账户，权限，防火墙问题等等，再说 <strong>Linux</strong> 上的软件 <strong>Frp</strong>、<strong>Docker</strong>、<strong>Nginx</strong>、<strong>Shadowsocket</strong> ……也会接触到，反正东西需要自己琢磨。硬件也有从硬件连接到固件烧录，体验过之后就会收获很多，学习的时候要保持敬畏之心。为什么这么说？如果你弄些东西的过程中完全想当然的来做，很容易吃亏，有时候是耗时，有时候就是把东西弄坏。得不偿失，我一般喜欢弄东西的时候完全按教程来，等我把东西弄好了，自己再在再创造。这样一来是为了让我更快的体验到这东西弄好之后是什么样子，二来是为了总结经验方便再创造。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大家好，以下为我玩-HASS-一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\"><a href=\"#大家好，以下为我玩-HASS-一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\" class=\"headerlink\" title=\"大家好，以下为我玩 HASS 一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。\"></a>大家好，以下为我玩 <strong><em>HASS</em></strong> 一年的故事，我将以短小说的形式展现给大家，闲来无事故有此文。文中不谈技术只谈故事与经验。</h2><h3 id=\"我是如何入坑？\"><a href=\"#我是如何入坑？\" class=\"headerlink\" title=\"我是如何入坑？\"></a>我是如何入坑？</h3><p>那么我就先从入坑开始讲起，大概是 <code>2017</code> 年的 <code>5</code> 月份我买了一块树莓派，型号是 <code>3b</code> ，买这个的初衷是为了玩，看着网上的教程资料发现这个小板子好玩的很呐，感觉无所不能，于是就在淘宝上购买了我的第一块板子，和一些面包板、杜邦线之类的东西。</p>\n<p><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/1.png\" width=\"50%\" height=\"50%\"><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/2.png\" width=\"50%\" height=\"50%\"><br>买了这些东西其实不是为了玩 <strong><em>HASS</em></strong> ，当时想的是学习传感器以及单片机，自己一心想做个遥控小车出来。然后自己跟着一本印度人写的树莓派应用的书学习，初步了解到了点什么是 <strong>传感器</strong>，什么是 <strong>Linux</strong> 。自己傻乎乎的在那里玩 <strong>超声波</strong> 、<strong>DHT11</strong> 的驱动还以为自己发现了新大陆，觉得自己非常的牛逼。忍不住想在别人面前炫耀，于是自己加了个树莓派交流群，其实里面吹牛的多，干事的少。一天我例行公事在群友面前炫耀自己是怎么用树莓派让我的 <strong>HC-SR04</strong>、<strong>DHT11</strong> 如何工作的，结果有位老哥一声不吭的录了一段视频，视频里的内容我现在都记得，他用 <strong>Siri</strong> 控制了他一个自制的台灯。这种从来没发过话的人，突然发了一个比你还牛的视频，对于我来说无疑是对我巨大的打击，我顿时感觉自己的人格受到了严重的侮辱。我立马加了他好友，他也很很快的添加了我。于是我疯狂的赞美他，夸他是多么多么的牛，希望他也能教教我怎么做。最开始他没理我，于是我第二天又问他是怎么做的，可能是他不耐烦了，就回了我两个词 <strong>homeassistant + homebridge</strong> 就完了，再问他具体怎么做的也不说了，大神的口是真的难开，就回我两个词。再怎么问他都不鸟我了，于是我就在百度上找 <strong>homeassistant homebridge</strong> ，最开始这个资料是真的少，百度了许久才搞懂这个 <strong>Homeassistant</strong> 和 <strong>Homebridge</strong> 是两个东西，<strong>Homeassistant</strong> 可以理解为一个 <strong>Hub</strong> 而 <strong>Homebridge</strong> 应该理解为 <code>homeassistant to homekit</code> 的一个网关。百度上有用的资料就两篇，一个是 <strong>老高</strong> 的帖子，另一个是一个不知名的人写的，这两位人就是带我入门的人。老高的贴子最好，他讲的很详细，我的树莓派也因此发挥了它的光和热, 要知道我最初买树莓派并不是为了玩 <strong>Hass</strong> 的，所以这个也就告诉我们一个道理 “无心插柳柳成阴” ，他的教程从树莓派刷机到安装 <strong>Homeassistant</strong> ，到配置以及 <strong>Sonoff</strong> 刷固件每个细节都讲了，他还专门录制了视频害怕我们不会，没办法那时候是真的菜，他不讲那么细中间卡一步就够折腾的。</p>\n<p>就这样照着老高的帖子我跌跌撞撞的在一个星期内成功的用 <strong>Siri</strong> 了我的一个发光二级管的亮灭。于是我按耐不住激动的心情又录了一个 <strong>Siri</strong> 控制发光二级管的视频，这次的视频引起的反响就更大了。连前面我主动加的那位小哥都表示惊讶——“你这么快就弄好了？”，呵呵你也不看看我是谁。后面我与这个小哥互相交流了会，发现他也是个狠角色，比我大一级，参加过学校的比赛还获得过奖。顿时我就对他心存敬意，希望有朝一日也像他那样成功。过了几天我又把这个视频拿到群里炫耀，这时一个在 <strong>HomeAssistant智能家居</strong> 群里的人发现了我，并夸赞我东西做的不错，问我是不是也玩 <strong>Homeassistant</strong> 的。不一会他就把我拉到了全国最大的 <strong>Homeassistant</strong> 交流群，进入之后我又发现自己原来又是最菜的，别人都开始研究怎么让空调连接到 <strong>Homeassistant</strong> 了，<strong>Sonoff</strong> 这些别人早会了。</p>\n<h3 id=\"这一年我学到了些什么？\"><a href=\"#这一年我学到了些什么？\" class=\"headerlink\" title=\"这一年我学到了些什么？\"></a>这一年我学到了些什么？</h3><ol>\n<li><h4 id=\"我学会了学习新东西的能力\"><a href=\"#我学会了学习新东西的能力\" class=\"headerlink\" title=\"我学会了学习新东西的能力\"></a>我学会了学习新东西的能力</h4> 从这张图就看的出我段位不低了，入坑早资料少，所以后面入坑的朋友真心别心急慢慢来，前面已经出了很多教程了，选自己有用的学，学的很快的，毕竟资料很丰富了。我知道有的人跟我一样很依赖问别人，自己不愿意花大功夫去网上找资料。自己经验表明一般来说你的问题在网上都会找到，你要有总结出你的问题并提取关键词的能力，然后拿到网上去搜索一会就找到了，只有你的问题很前沿或者很奇葩的问题才找不到。<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/3.png\" width=\"50%\" height=\"50%\"></li>\n<li><h4 id=\"国外网站要多逛\"><a href=\"#国外网站要多逛\" class=\"headerlink\" title=\"国外网站要多逛\"></a>国外网站要多逛</h4> 不得不承认老外是真的强，不是我舔他们。其实我们玩的这些东西都是老外玩了之后我们再玩的。除了 <strong>ESP8266</strong>、<strong>小米设备</strong> 是我们国产的，其余大多都是老外先玩的, <strong>Homeassistant、Homekit、Espeasy、Tasmota、Lovelace……</strong> 他们一般都比我们玩的溜，毕竟是他们写的东西。所以要找新的东西或者找些什么资料啊，去他们的网站找找，学习别人的东西也未尝不可。</li>\n<li><h4 id=\"要舍得花钱\"><a href=\"#要舍得花钱\" class=\"headerlink\" title=\"要舍得花钱\"></a>要舍得花钱</h4> 不得不说玩 <strong><em>HASS</em></strong> 是真的烧钱，我没玩 <strong><em>HASS</em></strong> 之前每个月都还会剩个两三百，每个月还会请别人在外面吃顿饭，自从玩了 <strong><em>HASS</em></strong> 后发现这玩意就是个无底洞。买完树莓买 <strong>Sonoff</strong>，刚把这个买了别人又在玩 <strong>Nodemcu</strong> 了又得买，双十一到了又跟风买天猫精灵，平时还买些传感器和配套的东西之类的，又什么 <strong>WS2812B</strong>、<strong>N1</strong>、<strong>K2P</strong>、<strong>摄像头</strong> 之类的反正我现在每个月都欠蚂蚁花呗钱，活动资金不够了就问朋友借。舍得花钱但到理性消费，买些自己需要的东西就行了，别看见什么就买，买来不用浪费。</li>\n</ol>\n<p><strong>看一张白神设备图</strong><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/blog_1/4.jpg\" width=\"50%\" height=\"50%\"></p>\n<ol start=\"4\">\n<li><h4 id=\"学到了些新技术\"><a href=\"#学到了些新技术\" class=\"headerlink\" title=\"学到了些新技术\"></a>学到了些新技术</h4> 学校没学到的玩 <strong>HASS</strong> 学到了些，玩 <strong>HASS</strong> 你起码会学到点 <strong>Linux</strong> 的基础吧，设置开机启动，设置账户，权限，防火墙问题等等，再说 <strong>Linux</strong> 上的软件 <strong>Frp</strong>、<strong>Docker</strong>、<strong>Nginx</strong>、<strong>Shadowsocket</strong> ……也会接触到，反正东西需要自己琢磨。硬件也有从硬件连接到固件烧录，体验过之后就会收获很多，学习的时候要保持敬畏之心。为什么这么说？如果你弄些东西的过程中完全想当然的来做，很容易吃亏，有时候是耗时，有时候就是把东西弄坏。得不偿失，我一般喜欢弄东西的时候完全按教程来，等我把东西弄好了，自己再在再创造。这样一来是为了让我更快的体验到这东西弄好之后是什么样子，二来是为了总结经验方便再创造。</li>\n</ol>\n"},{"_content":"该文译自 Adam Willianson 的 \"UEFI boot:how does that actually work, then?\"\n\n又是 AdamW 文章时间了！如果你是想找简短而生动的文章，请到别处。\n\n[Kamil Paral](http://kparal.wordpress.com/) 友好地提示我，我是一名狂热的纸制化着。时刻注意自己有什么问题。\n\n*对行业大众的重要注解：* 这篇博客只针对普通大众：目的是消除一些普通神话和帮助普通大众更好的理解 UEFI。这不是低级的完全的详细描述也不能保证 100% 技术上准确的解释，我不是一名专业的固件工程师或者类似的人。如果你实际上是在构建操作系统或者其他的东西，请不要依赖我的简单说明或者向我请求帮助；我只是互联网上的白痴。如果你想做善事并且有钱的话，加入 UEFI 论坛询问您的供应商或检查您的参考实施或其他。如果你没有钱，那就问你有经验的同事，好的。*重要注解结束*\n\n也许你已经在网上读了很多关于 UEFI 的文章了。这里有一点很重要的信息你应该知道：它们 95% 的都是垃圾。如果你想知道关于 UEFI，或者拓展关于 UEFI 规范以外的知识，[mig59's blog](http://mjg59.dreamwidth.org/) 和一些看起来可靠的相关人员 - [Rod Smith](http://www.rodsbooks.com/linux-uefi/), [Peter Jones](http://blog.uncooperative.org/)，Chris Murphy 和一些相对较少的文档，这些 OS 的开发人员实际上知道 UEFI 到底做了什么。你所认为你认识像误解的混合毒药，误解、半真相、炒作和彻底的谎言。所以你应该完全忘了它们。\n\n好的，我们已经走上正道了。我最想讨论的就是引导加载了，因为那是对于大多数人最重要的固件，一些网站一直发一些误解的东西并且引起人们的误解。\n\n## 术语\n首先，让我们摆脱一些术语。BIOS 和 UEFI 都是计算机的固件。BISO 类型的固件（大多数）仅在 IBM PC 兼容计算机上找到。UEFI 相对来说更大通用，可以在非 IMB 兼容计算机上找到。UEFI\n\n你不能有 'UEFI BIOS'，也没有 'UEFI BIOS‘。请千万不要说 'UEFI BIOS'. BIOS 并非所有 PC 固件的通用术语。它只是 PC 固件的一种类型。你的计算机有一个固件。如果它是 IBM PC 兼容计算机，几乎可以肯定是一个 BIOS 或者 UEFI 固件。如果你正在跑 [Coreboot](http://www.coreboot.org/)，先生/女士祝贺您，您是个例外，你应该为你自己感到自豪。\n\n安全启动和 UEFI 并非是一个事。千万不要交换使用这些术语。安全系统是 UEFI 规范里一个单独有效的可选项，在 UEFI 规范的版本 2.2 中添加。稍后我再确切的讨论它是什么，但是现在，只需要记住它和 UEFI 不是一样东西。你需要明白安全启动是什么，UEFI 是什么，任何时间你应该知道你自己在说什么。我们先来说 UEFI，后面我们再说安全启动作为 UEFI 的拓展，因为基本上就是这样。\n\n奖金历史记录：UEFI 不是微软发明，不被它控制，并且从未被微软控制。它的前生和基础，EFI 是英特尔开发并推行的。UEFI 被[UEFI 联盟](http://uefi.org/)管理。微软是 UEFI 联盟成员之一。还有红帽、苹果还有很多主要的 PC 厂家，英特尔（很明显）、AMD、和[其他主要的次要的硬件软件公司和组织的清单](http://uefi.org/members)。这是一个广泛的共识规范，和一大堆必要的麻烦，这些我们后面再单独讲。这不是任何一家公司的 “邪恶之车”。\n\n## 参考\n如果你真正的想理解 UEFI，去读 UEFI 规范是一个很好的办法。你可以这样做，这也很简单。不你用花一分钱，我不是在告诉你阅读是让你最快乐的事情了，因为它不是。但是它会浪费你的时间，你可以在这里找到 [UEFI 的官网](http://www.uefi.org/specs/download)。你必须确认一些选项，但是你不会把你的灵魂签署给撒旦，不用担心。当我写这些事，当前版本是 [2.4 Errata A](http://www.uefi.org/sites/default/files/resources/2_4_Errata_A.pdf)，那就是这篇文章写的版本。这里没有 BIOS 规范，BIOS 是实事上的标准-它的工作方式与1980年代在实际IBM PC上的工作方式相同。这也是 UEFI 存在的原因之一。\n\n现在，让事情简单点，我们来考虑下两个世界。一个是 IBM PC 兼容计算机世界-以下简称为 PCs - 在 UEFI 和 GPT 存在之前。你们很多人可能对这个世界很熟悉并且可能非常了解。我们来说下在具有 BIOS 固件的 PC 是如何启动的。\n\nBIOS 启动\n它有效，实际上是一种非常非常简单的方式。在你老派的 BIOS PC 上，你有一个或者多个是 MBR 的硬盘。这个 MBR 是另一个实事标准；基本上，磁盘的最开始以特定格式描述了磁盘上的分区，包含一个 '启动引导',一段非常小 BIOS 固件知道如何执行的代码，它的任务是启动操作系统。（现代的启动引导通常更大能够包含 MBR 空间和必要使用的多阶段设计，MBR 中的位知道如何从其他位置加载下一阶段，但这对于我们来说并不是现在的重点）。\n\n所有 BIOS 固件都知道，在启动系统的上下文中，是哪个磁盘有操作系统。你，BIOS 基础计算机的所有者，可以告诉 BIOS 固件你要启动的哪个磁盘上的系统。固件不明白这范围以外的事情了。它执行启动引导找到具体硬盘上的 MBR ，就完了。固件再也不会被调用了。\n\n在 BIOS 的世界里，显然所有形式的多重引导都在固件层之上处理。固件层不知道什么是启动引导，或者什么是操作系统。它更不知道分区是什么。所有它能做的只是从磁盘的 MBR 分区执行启动引到程序。您也无法从固件外部配置引导过程。\n\n## UEFI 启动：背景\n好的，我们已经有 BIOS 世界的基础了。现在让我们看一下在UEFI系统上启动的工作方式。使您不了解这篇文章的细节，也请理解：它完全不同。彻底完全地不同与 BIOS 的启动方式。你不能将你对 BIOS 引导过程来理解 UEFI 启动。你需要知道这是一个完全不同的世界。\n\n这还有一件重要的十需要知道：许多 UEFI 固件实现了某种 BIOS 兼容模式，通常被叫称为 CSM。许多 UEFI 固件能像 BIOS 固件一样启动-它们会找磁盘上的 MBR，并且执行 MBR 里的启动引导，然后将所有内容留给该引导程序。人们有时会错误地将使用此功能称为“禁用 UEFI”，这是语法上的错误。你不能“禁用”你系统上的固件。这是很笨的术语。不要用它，但理解人们真正想说的东西。他们想说 UEFI 固件能以\"BIOS 模式“启动系统而不是原生 UEFI 模式。\n\n我将描述下原生 UEFI 启动。如果你有基于 UEFI 系统，其固件具有 BIOS 兼容性功能，并且你决定使用它。那么就启动而言，你可以假装你的系统是基于 BIOS 的，做所有事的方式跟 BIOS 启动方式一样。但是，如果要执行此操作，请确保您始终应用它。我真心强烈不推荐你将 UEFI-原生 与 BIOS-兼容的永久安装操作系统的引导，特别是在相同的磁盘上。这是非常非常糟糕的主意，这会造成你身心痛苦。如果你决定这样做，不要来向我哭。\n\n为了理智，我假设磁盘尺有所短  GPT 分区表，和 EFI FAT32 [EFI 系统分区](https://en.wikipedia.org/wiki/EFI_System_partition)。根据要深入研究这些内容的深度，您可能会发现，并不是严格说来，您可以始终假设在处理UEFI本机启动时将要使用 GPT 磁盘和 EFI FAT32 ESP，但是 UEFI 规范与 GPT 磁盘和 EFI FAT32 ESP 紧密相关，在99％的情况下，这是您要处理的问题。除非你正在使用 Macs，坦白说，Macs 很混乱。\n\n**编辑注解:** 以下内容（取决于含义和复杂性）在 2014-01-26 经过大量修改，此帖子的初始版本发布后几个小时根据 Peter Jones 的反馈。认为这是 V2.0 版的文章。早期版本以不太准确和混乱的方式编写。\n\n## UEFI 原生启动：它背后真正做了什么\n好吧，顺便说一句，让我们开始讨论。这就是原生 UEFI 引导实际上是如何工作的。拥有一些高级背景知道可能会有所帮助。\n\nUEFI 在固件级提供了很多基础架构来处理系统启动。它远不及 BIOS 那么简单。不像 BIOS，UEFI 真正地理解，要从不同程度上，磁盘分区、启动引导程序和操作系统等概念。\n\n你可以看一下 BIOS 引导过程，再看一下 UEFI 过程，看 UEFI 流程如何扩展各种位以解决特定问题。\n\n这 BIOS/MBR 查找引导程序的方式非常简陋，当你思考它时。它就像非特别的酱：这是在磁盘头一段极小的空间里包含神奇的代码，它只对系统固件有意义，只能用特殊工具来写它。这种方法存在几个问题。\n* 这不方便处理 - 你需要特殊的固件来写 MBR 分区， 也就只有一个办法搞清楚它是什么，dd 出内容然后分析它。\n* 如上所述，MBR 它本身没那么大不足以容纳许多现代引导程序。它所做的是安装它们自身的一小部分到 MBR 适当的位置，剩余的空间到磁盘常规 MBR 结束到第一分区开始之的空白空间。这有一个很大的问题（好吧，这整个设计就是个大问题，但是从未注意到），这就是关于第一分区的开始位置没有可靠的约定，因此很难确保会有足够的空间。通常可以认为，没有足够的空间用于某些引导加载程序配置。\n* 设计没有提供为选择引导目标（磁盘除外）的任何标准代理层或机制...但是对于人们想选择磁盘意外的引导目标。比如，他们想有个可启动的东西-通常是操作系统-每个磁盘。唯一的方式是这样，在 BIOS/MBR 时间里是引导程序来处理它；但是仍没有一个被广泛认可的约定来完成以正常的方式来完成这些。有许多许多的方法，没有一个可以与其他任何一个互操作，写一个在 OS/OS 安装代理层能干净地处理多重引导问题的工具那太难了。\n* 该设计没有提供从磁盘以外的任何东西引导的标准方法。我不想在这篇文章真正的讨论这个问题，但请注意，这是 UEFI 引导的另一个优势：它提供了从例如远程服务器引导的标准方式。\n* 没有提供机制可以用于配置高于固件的级别来配置固件的启动行为。\n\n所以你能想象 UEFI 精灵围坐在一起考虑这个问题，并提出了解决方案。取代固件只知道磁盘和每个磁盘上的“魔术”区域-引导加载程序代码可能驻留的位置，UEFI 对于处理启动引导的固件有更多的基础设施。让我们看看它定义的所有与这里相关的东西。\n\n# EFI 可执行文件\nUEFI 规格定义了一种可执行格式并要求所有 UEFI 固件能够执行这种格式的代码。当您为本机 UEFI 编写引导加载程序时，你将以这种格式编写。这种方式十分简单明了，不需要过多的解释：这是个好东西，现在我们有了一个固件规范真正地定义了固件可执行通用代码格式。\n\n# GPT(GUID 分区表)格式\n[GUID 分区表](https://en.wikipedia.org/wiki/GUID_Partition_Table) 格式非常贴符合 UEFI 规范，此外，没有什么特别复杂的或需要过多解释的，这只是规范提供的基础。GPT 只是做分区表的标准-信息在磁盘的头部，它定义了磁盘包含什么分区。它是在许多方面比 MBR/'MS-DOS' 做更好的分区标准，UEFI 规范要求符合 UEFI 的固件必须能够解释 GPT（它同样要求能够执行 MBR，为了向后兼容）。所有这些都是有用的基础：这里正在发生的事情是规范正在建立某些功能，固件层以上的所有内容都可以依赖于固件。\n\n# EFI 系统分区\n实际上，在修订本文时，我确实想将头放在 EFI 系统分区概念上，因为它非常精彩的部分。实际上，”EFI 系统分区“这概念正是回答 MBR 空间“特殊调味料”的问题。正如我们在上面看到的，在磁盘开始时一些未定义的空白空间的概念是“引导加载程序代码所在的位置”，这是一个非常糟糕的设计。EFI 系统分区就是来解决这个问题的。\n\n解决办法是：我们要求固件能够一些具体的文件系统。UEFI 规范要求合格的固件应该能读取 FAT12， FAT 格式的 FAT16 和 FAT32 变体。实际上，它所做的是编篆对那么格式特定的解释，因为他们在 UEFI 被接受时就已经存在了，就是说符合 UEFI 的固件必须能够读这些格式。规范如下：\n\n“被可扩展固件接口支持的文件系统是基于 FAT 文件系统。EFI 定义了明确记录和可测试的 FAT 版本。符合 EFI 规范","source":"_posts/译：UEFI 启动真正做了什么.md","raw":"该文译自 Adam Willianson 的 \"UEFI boot:how does that actually work, then?\"\n\n又是 AdamW 文章时间了！如果你是想找简短而生动的文章，请到别处。\n\n[Kamil Paral](http://kparal.wordpress.com/) 友好地提示我，我是一名狂热的纸制化着。时刻注意自己有什么问题。\n\n*对行业大众的重要注解：* 这篇博客只针对普通大众：目的是消除一些普通神话和帮助普通大众更好的理解 UEFI。这不是低级的完全的详细描述也不能保证 100% 技术上准确的解释，我不是一名专业的固件工程师或者类似的人。如果你实际上是在构建操作系统或者其他的东西，请不要依赖我的简单说明或者向我请求帮助；我只是互联网上的白痴。如果你想做善事并且有钱的话，加入 UEFI 论坛询问您的供应商或检查您的参考实施或其他。如果你没有钱，那就问你有经验的同事，好的。*重要注解结束*\n\n也许你已经在网上读了很多关于 UEFI 的文章了。这里有一点很重要的信息你应该知道：它们 95% 的都是垃圾。如果你想知道关于 UEFI，或者拓展关于 UEFI 规范以外的知识，[mig59's blog](http://mjg59.dreamwidth.org/) 和一些看起来可靠的相关人员 - [Rod Smith](http://www.rodsbooks.com/linux-uefi/), [Peter Jones](http://blog.uncooperative.org/)，Chris Murphy 和一些相对较少的文档，这些 OS 的开发人员实际上知道 UEFI 到底做了什么。你所认为你认识像误解的混合毒药，误解、半真相、炒作和彻底的谎言。所以你应该完全忘了它们。\n\n好的，我们已经走上正道了。我最想讨论的就是引导加载了，因为那是对于大多数人最重要的固件，一些网站一直发一些误解的东西并且引起人们的误解。\n\n## 术语\n首先，让我们摆脱一些术语。BIOS 和 UEFI 都是计算机的固件。BISO 类型的固件（大多数）仅在 IBM PC 兼容计算机上找到。UEFI 相对来说更大通用，可以在非 IMB 兼容计算机上找到。UEFI\n\n你不能有 'UEFI BIOS'，也没有 'UEFI BIOS‘。请千万不要说 'UEFI BIOS'. BIOS 并非所有 PC 固件的通用术语。它只是 PC 固件的一种类型。你的计算机有一个固件。如果它是 IBM PC 兼容计算机，几乎可以肯定是一个 BIOS 或者 UEFI 固件。如果你正在跑 [Coreboot](http://www.coreboot.org/)，先生/女士祝贺您，您是个例外，你应该为你自己感到自豪。\n\n安全启动和 UEFI 并非是一个事。千万不要交换使用这些术语。安全系统是 UEFI 规范里一个单独有效的可选项，在 UEFI 规范的版本 2.2 中添加。稍后我再确切的讨论它是什么，但是现在，只需要记住它和 UEFI 不是一样东西。你需要明白安全启动是什么，UEFI 是什么，任何时间你应该知道你自己在说什么。我们先来说 UEFI，后面我们再说安全启动作为 UEFI 的拓展，因为基本上就是这样。\n\n奖金历史记录：UEFI 不是微软发明，不被它控制，并且从未被微软控制。它的前生和基础，EFI 是英特尔开发并推行的。UEFI 被[UEFI 联盟](http://uefi.org/)管理。微软是 UEFI 联盟成员之一。还有红帽、苹果还有很多主要的 PC 厂家，英特尔（很明显）、AMD、和[其他主要的次要的硬件软件公司和组织的清单](http://uefi.org/members)。这是一个广泛的共识规范，和一大堆必要的麻烦，这些我们后面再单独讲。这不是任何一家公司的 “邪恶之车”。\n\n## 参考\n如果你真正的想理解 UEFI，去读 UEFI 规范是一个很好的办法。你可以这样做，这也很简单。不你用花一分钱，我不是在告诉你阅读是让你最快乐的事情了，因为它不是。但是它会浪费你的时间，你可以在这里找到 [UEFI 的官网](http://www.uefi.org/specs/download)。你必须确认一些选项，但是你不会把你的灵魂签署给撒旦，不用担心。当我写这些事，当前版本是 [2.4 Errata A](http://www.uefi.org/sites/default/files/resources/2_4_Errata_A.pdf)，那就是这篇文章写的版本。这里没有 BIOS 规范，BIOS 是实事上的标准-它的工作方式与1980年代在实际IBM PC上的工作方式相同。这也是 UEFI 存在的原因之一。\n\n现在，让事情简单点，我们来考虑下两个世界。一个是 IBM PC 兼容计算机世界-以下简称为 PCs - 在 UEFI 和 GPT 存在之前。你们很多人可能对这个世界很熟悉并且可能非常了解。我们来说下在具有 BIOS 固件的 PC 是如何启动的。\n\nBIOS 启动\n它有效，实际上是一种非常非常简单的方式。在你老派的 BIOS PC 上，你有一个或者多个是 MBR 的硬盘。这个 MBR 是另一个实事标准；基本上，磁盘的最开始以特定格式描述了磁盘上的分区，包含一个 '启动引导',一段非常小 BIOS 固件知道如何执行的代码，它的任务是启动操作系统。（现代的启动引导通常更大能够包含 MBR 空间和必要使用的多阶段设计，MBR 中的位知道如何从其他位置加载下一阶段，但这对于我们来说并不是现在的重点）。\n\n所有 BIOS 固件都知道，在启动系统的上下文中，是哪个磁盘有操作系统。你，BIOS 基础计算机的所有者，可以告诉 BIOS 固件你要启动的哪个磁盘上的系统。固件不明白这范围以外的事情了。它执行启动引导找到具体硬盘上的 MBR ，就完了。固件再也不会被调用了。\n\n在 BIOS 的世界里，显然所有形式的多重引导都在固件层之上处理。固件层不知道什么是启动引导，或者什么是操作系统。它更不知道分区是什么。所有它能做的只是从磁盘的 MBR 分区执行启动引到程序。您也无法从固件外部配置引导过程。\n\n## UEFI 启动：背景\n好的，我们已经有 BIOS 世界的基础了。现在让我们看一下在UEFI系统上启动的工作方式。使您不了解这篇文章的细节，也请理解：它完全不同。彻底完全地不同与 BIOS 的启动方式。你不能将你对 BIOS 引导过程来理解 UEFI 启动。你需要知道这是一个完全不同的世界。\n\n这还有一件重要的十需要知道：许多 UEFI 固件实现了某种 BIOS 兼容模式，通常被叫称为 CSM。许多 UEFI 固件能像 BIOS 固件一样启动-它们会找磁盘上的 MBR，并且执行 MBR 里的启动引导，然后将所有内容留给该引导程序。人们有时会错误地将使用此功能称为“禁用 UEFI”，这是语法上的错误。你不能“禁用”你系统上的固件。这是很笨的术语。不要用它，但理解人们真正想说的东西。他们想说 UEFI 固件能以\"BIOS 模式“启动系统而不是原生 UEFI 模式。\n\n我将描述下原生 UEFI 启动。如果你有基于 UEFI 系统，其固件具有 BIOS 兼容性功能，并且你决定使用它。那么就启动而言，你可以假装你的系统是基于 BIOS 的，做所有事的方式跟 BIOS 启动方式一样。但是，如果要执行此操作，请确保您始终应用它。我真心强烈不推荐你将 UEFI-原生 与 BIOS-兼容的永久安装操作系统的引导，特别是在相同的磁盘上。这是非常非常糟糕的主意，这会造成你身心痛苦。如果你决定这样做，不要来向我哭。\n\n为了理智，我假设磁盘尺有所短  GPT 分区表，和 EFI FAT32 [EFI 系统分区](https://en.wikipedia.org/wiki/EFI_System_partition)。根据要深入研究这些内容的深度，您可能会发现，并不是严格说来，您可以始终假设在处理UEFI本机启动时将要使用 GPT 磁盘和 EFI FAT32 ESP，但是 UEFI 规范与 GPT 磁盘和 EFI FAT32 ESP 紧密相关，在99％的情况下，这是您要处理的问题。除非你正在使用 Macs，坦白说，Macs 很混乱。\n\n**编辑注解:** 以下内容（取决于含义和复杂性）在 2014-01-26 经过大量修改，此帖子的初始版本发布后几个小时根据 Peter Jones 的反馈。认为这是 V2.0 版的文章。早期版本以不太准确和混乱的方式编写。\n\n## UEFI 原生启动：它背后真正做了什么\n好吧，顺便说一句，让我们开始讨论。这就是原生 UEFI 引导实际上是如何工作的。拥有一些高级背景知道可能会有所帮助。\n\nUEFI 在固件级提供了很多基础架构来处理系统启动。它远不及 BIOS 那么简单。不像 BIOS，UEFI 真正地理解，要从不同程度上，磁盘分区、启动引导程序和操作系统等概念。\n\n你可以看一下 BIOS 引导过程，再看一下 UEFI 过程，看 UEFI 流程如何扩展各种位以解决特定问题。\n\n这 BIOS/MBR 查找引导程序的方式非常简陋，当你思考它时。它就像非特别的酱：这是在磁盘头一段极小的空间里包含神奇的代码，它只对系统固件有意义，只能用特殊工具来写它。这种方法存在几个问题。\n* 这不方便处理 - 你需要特殊的固件来写 MBR 分区， 也就只有一个办法搞清楚它是什么，dd 出内容然后分析它。\n* 如上所述，MBR 它本身没那么大不足以容纳许多现代引导程序。它所做的是安装它们自身的一小部分到 MBR 适当的位置，剩余的空间到磁盘常规 MBR 结束到第一分区开始之的空白空间。这有一个很大的问题（好吧，这整个设计就是个大问题，但是从未注意到），这就是关于第一分区的开始位置没有可靠的约定，因此很难确保会有足够的空间。通常可以认为，没有足够的空间用于某些引导加载程序配置。\n* 设计没有提供为选择引导目标（磁盘除外）的任何标准代理层或机制...但是对于人们想选择磁盘意外的引导目标。比如，他们想有个可启动的东西-通常是操作系统-每个磁盘。唯一的方式是这样，在 BIOS/MBR 时间里是引导程序来处理它；但是仍没有一个被广泛认可的约定来完成以正常的方式来完成这些。有许多许多的方法，没有一个可以与其他任何一个互操作，写一个在 OS/OS 安装代理层能干净地处理多重引导问题的工具那太难了。\n* 该设计没有提供从磁盘以外的任何东西引导的标准方法。我不想在这篇文章真正的讨论这个问题，但请注意，这是 UEFI 引导的另一个优势：它提供了从例如远程服务器引导的标准方式。\n* 没有提供机制可以用于配置高于固件的级别来配置固件的启动行为。\n\n所以你能想象 UEFI 精灵围坐在一起考虑这个问题，并提出了解决方案。取代固件只知道磁盘和每个磁盘上的“魔术”区域-引导加载程序代码可能驻留的位置，UEFI 对于处理启动引导的固件有更多的基础设施。让我们看看它定义的所有与这里相关的东西。\n\n# EFI 可执行文件\nUEFI 规格定义了一种可执行格式并要求所有 UEFI 固件能够执行这种格式的代码。当您为本机 UEFI 编写引导加载程序时，你将以这种格式编写。这种方式十分简单明了，不需要过多的解释：这是个好东西，现在我们有了一个固件规范真正地定义了固件可执行通用代码格式。\n\n# GPT(GUID 分区表)格式\n[GUID 分区表](https://en.wikipedia.org/wiki/GUID_Partition_Table) 格式非常贴符合 UEFI 规范，此外，没有什么特别复杂的或需要过多解释的，这只是规范提供的基础。GPT 只是做分区表的标准-信息在磁盘的头部，它定义了磁盘包含什么分区。它是在许多方面比 MBR/'MS-DOS' 做更好的分区标准，UEFI 规范要求符合 UEFI 的固件必须能够解释 GPT（它同样要求能够执行 MBR，为了向后兼容）。所有这些都是有用的基础：这里正在发生的事情是规范正在建立某些功能，固件层以上的所有内容都可以依赖于固件。\n\n# EFI 系统分区\n实际上，在修订本文时，我确实想将头放在 EFI 系统分区概念上，因为它非常精彩的部分。实际上，”EFI 系统分区“这概念正是回答 MBR 空间“特殊调味料”的问题。正如我们在上面看到的，在磁盘开始时一些未定义的空白空间的概念是“引导加载程序代码所在的位置”，这是一个非常糟糕的设计。EFI 系统分区就是来解决这个问题的。\n\n解决办法是：我们要求固件能够一些具体的文件系统。UEFI 规范要求合格的固件应该能读取 FAT12， FAT 格式的 FAT16 和 FAT32 变体。实际上，它所做的是编篆对那么格式特定的解释，因为他们在 UEFI 被接受时就已经存在了，就是说符合 UEFI 的固件必须能够读这些格式。规范如下：\n\n“被可扩展固件接口支持的文件系统是基于 FAT 文件系统。EFI 定义了明确记录和可测试的 FAT 版本。符合 EFI 规范","slug":"译：UEFI 启动真正做了什么","published":1,"date":"2020-09-04T07:44:40.921Z","updated":"2020-09-04T07:44:40.921Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckenyxa5g0008kilckw7o6j0b","content":"<p>该文译自 Adam Willianson 的 “UEFI boot:how does that actually work, then?”</p>\n<p>又是 AdamW 文章时间了！如果你是想找简短而生动的文章，请到别处。</p>\n<p><a href=\"http://kparal.wordpress.com/\" target=\"_blank\" rel=\"noopener\">Kamil Paral</a> 友好地提示我，我是一名狂热的纸制化着。时刻注意自己有什么问题。</p>\n<p><em>对行业大众的重要注解：</em> 这篇博客只针对普通大众：目的是消除一些普通神话和帮助普通大众更好的理解 UEFI。这不是低级的完全的详细描述也不能保证 100% 技术上准确的解释，我不是一名专业的固件工程师或者类似的人。如果你实际上是在构建操作系统或者其他的东西，请不要依赖我的简单说明或者向我请求帮助；我只是互联网上的白痴。如果你想做善事并且有钱的话，加入 UEFI 论坛询问您的供应商或检查您的参考实施或其他。如果你没有钱，那就问你有经验的同事，好的。<em>重要注解结束</em></p>\n<p>也许你已经在网上读了很多关于 UEFI 的文章了。这里有一点很重要的信息你应该知道：它们 95% 的都是垃圾。如果你想知道关于 UEFI，或者拓展关于 UEFI 规范以外的知识，<a href=\"http://mjg59.dreamwidth.org/\" target=\"_blank\" rel=\"noopener\">mig59’s blog</a> 和一些看起来可靠的相关人员 - <a href=\"http://www.rodsbooks.com/linux-uefi/\" target=\"_blank\" rel=\"noopener\">Rod Smith</a>, <a href=\"http://blog.uncooperative.org/\" target=\"_blank\" rel=\"noopener\">Peter Jones</a>，Chris Murphy 和一些相对较少的文档，这些 OS 的开发人员实际上知道 UEFI 到底做了什么。你所认为你认识像误解的混合毒药，误解、半真相、炒作和彻底的谎言。所以你应该完全忘了它们。</p>\n<p>好的，我们已经走上正道了。我最想讨论的就是引导加载了，因为那是对于大多数人最重要的固件，一些网站一直发一些误解的东西并且引起人们的误解。</p>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>首先，让我们摆脱一些术语。BIOS 和 UEFI 都是计算机的固件。BISO 类型的固件（大多数）仅在 IBM PC 兼容计算机上找到。UEFI 相对来说更大通用，可以在非 IMB 兼容计算机上找到。UEFI</p>\n<p>你不能有 ‘UEFI BIOS’，也没有 ‘UEFI BIOS‘。请千万不要说 ‘UEFI BIOS’. BIOS 并非所有 PC 固件的通用术语。它只是 PC 固件的一种类型。你的计算机有一个固件。如果它是 IBM PC 兼容计算机，几乎可以肯定是一个 BIOS 或者 UEFI 固件。如果你正在跑 <a href=\"http://www.coreboot.org/\" target=\"_blank\" rel=\"noopener\">Coreboot</a>，先生/女士祝贺您，您是个例外，你应该为你自己感到自豪。</p>\n<p>安全启动和 UEFI 并非是一个事。千万不要交换使用这些术语。安全系统是 UEFI 规范里一个单独有效的可选项，在 UEFI 规范的版本 2.2 中添加。稍后我再确切的讨论它是什么，但是现在，只需要记住它和 UEFI 不是一样东西。你需要明白安全启动是什么，UEFI 是什么，任何时间你应该知道你自己在说什么。我们先来说 UEFI，后面我们再说安全启动作为 UEFI 的拓展，因为基本上就是这样。</p>\n<p>奖金历史记录：UEFI 不是微软发明，不被它控制，并且从未被微软控制。它的前生和基础，EFI 是英特尔开发并推行的。UEFI 被<a href=\"http://uefi.org/\" target=\"_blank\" rel=\"noopener\">UEFI 联盟</a>管理。微软是 UEFI 联盟成员之一。还有红帽、苹果还有很多主要的 PC 厂家，英特尔（很明显）、AMD、和<a href=\"http://uefi.org/members\" target=\"_blank\" rel=\"noopener\">其他主要的次要的硬件软件公司和组织的清单</a>。这是一个广泛的共识规范，和一大堆必要的麻烦，这些我们后面再单独讲。这不是任何一家公司的 “邪恶之车”。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>如果你真正的想理解 UEFI，去读 UEFI 规范是一个很好的办法。你可以这样做，这也很简单。不你用花一分钱，我不是在告诉你阅读是让你最快乐的事情了，因为它不是。但是它会浪费你的时间，你可以在这里找到 <a href=\"http://www.uefi.org/specs/download\" target=\"_blank\" rel=\"noopener\">UEFI 的官网</a>。你必须确认一些选项，但是你不会把你的灵魂签署给撒旦，不用担心。当我写这些事，当前版本是 <a href=\"http://www.uefi.org/sites/default/files/resources/2_4_Errata_A.pdf\" target=\"_blank\" rel=\"noopener\">2.4 Errata A</a>，那就是这篇文章写的版本。这里没有 BIOS 规范，BIOS 是实事上的标准-它的工作方式与1980年代在实际IBM PC上的工作方式相同。这也是 UEFI 存在的原因之一。</p>\n<p>现在，让事情简单点，我们来考虑下两个世界。一个是 IBM PC 兼容计算机世界-以下简称为 PCs - 在 UEFI 和 GPT 存在之前。你们很多人可能对这个世界很熟悉并且可能非常了解。我们来说下在具有 BIOS 固件的 PC 是如何启动的。</p>\n<p>BIOS 启动<br>它有效，实际上是一种非常非常简单的方式。在你老派的 BIOS PC 上，你有一个或者多个是 MBR 的硬盘。这个 MBR 是另一个实事标准；基本上，磁盘的最开始以特定格式描述了磁盘上的分区，包含一个 ‘启动引导’,一段非常小 BIOS 固件知道如何执行的代码，它的任务是启动操作系统。（现代的启动引导通常更大能够包含 MBR 空间和必要使用的多阶段设计，MBR 中的位知道如何从其他位置加载下一阶段，但这对于我们来说并不是现在的重点）。</p>\n<p>所有 BIOS 固件都知道，在启动系统的上下文中，是哪个磁盘有操作系统。你，BIOS 基础计算机的所有者，可以告诉 BIOS 固件你要启动的哪个磁盘上的系统。固件不明白这范围以外的事情了。它执行启动引导找到具体硬盘上的 MBR ，就完了。固件再也不会被调用了。</p>\n<p>在 BIOS 的世界里，显然所有形式的多重引导都在固件层之上处理。固件层不知道什么是启动引导，或者什么是操作系统。它更不知道分区是什么。所有它能做的只是从磁盘的 MBR 分区执行启动引到程序。您也无法从固件外部配置引导过程。</p>\n<h2 id=\"UEFI-启动：背景\"><a href=\"#UEFI-启动：背景\" class=\"headerlink\" title=\"UEFI 启动：背景\"></a>UEFI 启动：背景</h2><p>好的，我们已经有 BIOS 世界的基础了。现在让我们看一下在UEFI系统上启动的工作方式。使您不了解这篇文章的细节，也请理解：它完全不同。彻底完全地不同与 BIOS 的启动方式。你不能将你对 BIOS 引导过程来理解 UEFI 启动。你需要知道这是一个完全不同的世界。</p>\n<p>这还有一件重要的十需要知道：许多 UEFI 固件实现了某种 BIOS 兼容模式，通常被叫称为 CSM。许多 UEFI 固件能像 BIOS 固件一样启动-它们会找磁盘上的 MBR，并且执行 MBR 里的启动引导，然后将所有内容留给该引导程序。人们有时会错误地将使用此功能称为“禁用 UEFI”，这是语法上的错误。你不能“禁用”你系统上的固件。这是很笨的术语。不要用它，但理解人们真正想说的东西。他们想说 UEFI 固件能以”BIOS 模式“启动系统而不是原生 UEFI 模式。</p>\n<p>我将描述下原生 UEFI 启动。如果你有基于 UEFI 系统，其固件具有 BIOS 兼容性功能，并且你决定使用它。那么就启动而言，你可以假装你的系统是基于 BIOS 的，做所有事的方式跟 BIOS 启动方式一样。但是，如果要执行此操作，请确保您始终应用它。我真心强烈不推荐你将 UEFI-原生 与 BIOS-兼容的永久安装操作系统的引导，特别是在相同的磁盘上。这是非常非常糟糕的主意，这会造成你身心痛苦。如果你决定这样做，不要来向我哭。</p>\n<p>为了理智，我假设磁盘尺有所短  GPT 分区表，和 EFI FAT32 <a href=\"https://en.wikipedia.org/wiki/EFI_System_partition\" target=\"_blank\" rel=\"noopener\">EFI 系统分区</a>。根据要深入研究这些内容的深度，您可能会发现，并不是严格说来，您可以始终假设在处理UEFI本机启动时将要使用 GPT 磁盘和 EFI FAT32 ESP，但是 UEFI 规范与 GPT 磁盘和 EFI FAT32 ESP 紧密相关，在99％的情况下，这是您要处理的问题。除非你正在使用 Macs，坦白说，Macs 很混乱。</p>\n<p><strong>编辑注解:</strong> 以下内容（取决于含义和复杂性）在 2014-01-26 经过大量修改，此帖子的初始版本发布后几个小时根据 Peter Jones 的反馈。认为这是 V2.0 版的文章。早期版本以不太准确和混乱的方式编写。</p>\n<h2 id=\"UEFI-原生启动：它背后真正做了什么\"><a href=\"#UEFI-原生启动：它背后真正做了什么\" class=\"headerlink\" title=\"UEFI 原生启动：它背后真正做了什么\"></a>UEFI 原生启动：它背后真正做了什么</h2><p>好吧，顺便说一句，让我们开始讨论。这就是原生 UEFI 引导实际上是如何工作的。拥有一些高级背景知道可能会有所帮助。</p>\n<p>UEFI 在固件级提供了很多基础架构来处理系统启动。它远不及 BIOS 那么简单。不像 BIOS，UEFI 真正地理解，要从不同程度上，磁盘分区、启动引导程序和操作系统等概念。</p>\n<p>你可以看一下 BIOS 引导过程，再看一下 UEFI 过程，看 UEFI 流程如何扩展各种位以解决特定问题。</p>\n<p>这 BIOS/MBR 查找引导程序的方式非常简陋，当你思考它时。它就像非特别的酱：这是在磁盘头一段极小的空间里包含神奇的代码，它只对系统固件有意义，只能用特殊工具来写它。这种方法存在几个问题。</p>\n<ul>\n<li>这不方便处理 - 你需要特殊的固件来写 MBR 分区， 也就只有一个办法搞清楚它是什么，dd 出内容然后分析它。</li>\n<li>如上所述，MBR 它本身没那么大不足以容纳许多现代引导程序。它所做的是安装它们自身的一小部分到 MBR 适当的位置，剩余的空间到磁盘常规 MBR 结束到第一分区开始之的空白空间。这有一个很大的问题（好吧，这整个设计就是个大问题，但是从未注意到），这就是关于第一分区的开始位置没有可靠的约定，因此很难确保会有足够的空间。通常可以认为，没有足够的空间用于某些引导加载程序配置。</li>\n<li>设计没有提供为选择引导目标（磁盘除外）的任何标准代理层或机制…但是对于人们想选择磁盘意外的引导目标。比如，他们想有个可启动的东西-通常是操作系统-每个磁盘。唯一的方式是这样，在 BIOS/MBR 时间里是引导程序来处理它；但是仍没有一个被广泛认可的约定来完成以正常的方式来完成这些。有许多许多的方法，没有一个可以与其他任何一个互操作，写一个在 OS/OS 安装代理层能干净地处理多重引导问题的工具那太难了。</li>\n<li>该设计没有提供从磁盘以外的任何东西引导的标准方法。我不想在这篇文章真正的讨论这个问题，但请注意，这是 UEFI 引导的另一个优势：它提供了从例如远程服务器引导的标准方式。</li>\n<li>没有提供机制可以用于配置高于固件的级别来配置固件的启动行为。</li>\n</ul>\n<p>所以你能想象 UEFI 精灵围坐在一起考虑这个问题，并提出了解决方案。取代固件只知道磁盘和每个磁盘上的“魔术”区域-引导加载程序代码可能驻留的位置，UEFI 对于处理启动引导的固件有更多的基础设施。让我们看看它定义的所有与这里相关的东西。</p>\n<h1 id=\"EFI-可执行文件\"><a href=\"#EFI-可执行文件\" class=\"headerlink\" title=\"EFI 可执行文件\"></a>EFI 可执行文件</h1><p>UEFI 规格定义了一种可执行格式并要求所有 UEFI 固件能够执行这种格式的代码。当您为本机 UEFI 编写引导加载程序时，你将以这种格式编写。这种方式十分简单明了，不需要过多的解释：这是个好东西，现在我们有了一个固件规范真正地定义了固件可执行通用代码格式。</p>\n<h1 id=\"GPT-GUID-分区表-格式\"><a href=\"#GPT-GUID-分区表-格式\" class=\"headerlink\" title=\"GPT(GUID 分区表)格式\"></a>GPT(GUID 分区表)格式</h1><p><a href=\"https://en.wikipedia.org/wiki/GUID_Partition_Table\" target=\"_blank\" rel=\"noopener\">GUID 分区表</a> 格式非常贴符合 UEFI 规范，此外，没有什么特别复杂的或需要过多解释的，这只是规范提供的基础。GPT 只是做分区表的标准-信息在磁盘的头部，它定义了磁盘包含什么分区。它是在许多方面比 MBR/‘MS-DOS’ 做更好的分区标准，UEFI 规范要求符合 UEFI 的固件必须能够解释 GPT（它同样要求能够执行 MBR，为了向后兼容）。所有这些都是有用的基础：这里正在发生的事情是规范正在建立某些功能，固件层以上的所有内容都可以依赖于固件。</p>\n<h1 id=\"EFI-系统分区\"><a href=\"#EFI-系统分区\" class=\"headerlink\" title=\"EFI 系统分区\"></a>EFI 系统分区</h1><p>实际上，在修订本文时，我确实想将头放在 EFI 系统分区概念上，因为它非常精彩的部分。实际上，”EFI 系统分区“这概念正是回答 MBR 空间“特殊调味料”的问题。正如我们在上面看到的，在磁盘开始时一些未定义的空白空间的概念是“引导加载程序代码所在的位置”，这是一个非常糟糕的设计。EFI 系统分区就是来解决这个问题的。</p>\n<p>解决办法是：我们要求固件能够一些具体的文件系统。UEFI 规范要求合格的固件应该能读取 FAT12， FAT 格式的 FAT16 和 FAT32 变体。实际上，它所做的是编篆对那么格式特定的解释，因为他们在 UEFI 被接受时就已经存在了，就是说符合 UEFI 的固件必须能够读这些格式。规范如下：</p>\n<p>“被可扩展固件接口支持的文件系统是基于 FAT 文件系统。EFI 定义了明确记录和可测试的 FAT 版本。符合 EFI 规范</p>\n","site":{"data":{}},"excerpt":"","more":"<p>该文译自 Adam Willianson 的 “UEFI boot:how does that actually work, then?”</p>\n<p>又是 AdamW 文章时间了！如果你是想找简短而生动的文章，请到别处。</p>\n<p><a href=\"http://kparal.wordpress.com/\" target=\"_blank\" rel=\"noopener\">Kamil Paral</a> 友好地提示我，我是一名狂热的纸制化着。时刻注意自己有什么问题。</p>\n<p><em>对行业大众的重要注解：</em> 这篇博客只针对普通大众：目的是消除一些普通神话和帮助普通大众更好的理解 UEFI。这不是低级的完全的详细描述也不能保证 100% 技术上准确的解释，我不是一名专业的固件工程师或者类似的人。如果你实际上是在构建操作系统或者其他的东西，请不要依赖我的简单说明或者向我请求帮助；我只是互联网上的白痴。如果你想做善事并且有钱的话，加入 UEFI 论坛询问您的供应商或检查您的参考实施或其他。如果你没有钱，那就问你有经验的同事，好的。<em>重要注解结束</em></p>\n<p>也许你已经在网上读了很多关于 UEFI 的文章了。这里有一点很重要的信息你应该知道：它们 95% 的都是垃圾。如果你想知道关于 UEFI，或者拓展关于 UEFI 规范以外的知识，<a href=\"http://mjg59.dreamwidth.org/\" target=\"_blank\" rel=\"noopener\">mig59’s blog</a> 和一些看起来可靠的相关人员 - <a href=\"http://www.rodsbooks.com/linux-uefi/\" target=\"_blank\" rel=\"noopener\">Rod Smith</a>, <a href=\"http://blog.uncooperative.org/\" target=\"_blank\" rel=\"noopener\">Peter Jones</a>，Chris Murphy 和一些相对较少的文档，这些 OS 的开发人员实际上知道 UEFI 到底做了什么。你所认为你认识像误解的混合毒药，误解、半真相、炒作和彻底的谎言。所以你应该完全忘了它们。</p>\n<p>好的，我们已经走上正道了。我最想讨论的就是引导加载了，因为那是对于大多数人最重要的固件，一些网站一直发一些误解的东西并且引起人们的误解。</p>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>首先，让我们摆脱一些术语。BIOS 和 UEFI 都是计算机的固件。BISO 类型的固件（大多数）仅在 IBM PC 兼容计算机上找到。UEFI 相对来说更大通用，可以在非 IMB 兼容计算机上找到。UEFI</p>\n<p>你不能有 ‘UEFI BIOS’，也没有 ‘UEFI BIOS‘。请千万不要说 ‘UEFI BIOS’. BIOS 并非所有 PC 固件的通用术语。它只是 PC 固件的一种类型。你的计算机有一个固件。如果它是 IBM PC 兼容计算机，几乎可以肯定是一个 BIOS 或者 UEFI 固件。如果你正在跑 <a href=\"http://www.coreboot.org/\" target=\"_blank\" rel=\"noopener\">Coreboot</a>，先生/女士祝贺您，您是个例外，你应该为你自己感到自豪。</p>\n<p>安全启动和 UEFI 并非是一个事。千万不要交换使用这些术语。安全系统是 UEFI 规范里一个单独有效的可选项，在 UEFI 规范的版本 2.2 中添加。稍后我再确切的讨论它是什么，但是现在，只需要记住它和 UEFI 不是一样东西。你需要明白安全启动是什么，UEFI 是什么，任何时间你应该知道你自己在说什么。我们先来说 UEFI，后面我们再说安全启动作为 UEFI 的拓展，因为基本上就是这样。</p>\n<p>奖金历史记录：UEFI 不是微软发明，不被它控制，并且从未被微软控制。它的前生和基础，EFI 是英特尔开发并推行的。UEFI 被<a href=\"http://uefi.org/\" target=\"_blank\" rel=\"noopener\">UEFI 联盟</a>管理。微软是 UEFI 联盟成员之一。还有红帽、苹果还有很多主要的 PC 厂家，英特尔（很明显）、AMD、和<a href=\"http://uefi.org/members\" target=\"_blank\" rel=\"noopener\">其他主要的次要的硬件软件公司和组织的清单</a>。这是一个广泛的共识规范，和一大堆必要的麻烦，这些我们后面再单独讲。这不是任何一家公司的 “邪恶之车”。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>如果你真正的想理解 UEFI，去读 UEFI 规范是一个很好的办法。你可以这样做，这也很简单。不你用花一分钱，我不是在告诉你阅读是让你最快乐的事情了，因为它不是。但是它会浪费你的时间，你可以在这里找到 <a href=\"http://www.uefi.org/specs/download\" target=\"_blank\" rel=\"noopener\">UEFI 的官网</a>。你必须确认一些选项，但是你不会把你的灵魂签署给撒旦，不用担心。当我写这些事，当前版本是 <a href=\"http://www.uefi.org/sites/default/files/resources/2_4_Errata_A.pdf\" target=\"_blank\" rel=\"noopener\">2.4 Errata A</a>，那就是这篇文章写的版本。这里没有 BIOS 规范，BIOS 是实事上的标准-它的工作方式与1980年代在实际IBM PC上的工作方式相同。这也是 UEFI 存在的原因之一。</p>\n<p>现在，让事情简单点，我们来考虑下两个世界。一个是 IBM PC 兼容计算机世界-以下简称为 PCs - 在 UEFI 和 GPT 存在之前。你们很多人可能对这个世界很熟悉并且可能非常了解。我们来说下在具有 BIOS 固件的 PC 是如何启动的。</p>\n<p>BIOS 启动<br>它有效，实际上是一种非常非常简单的方式。在你老派的 BIOS PC 上，你有一个或者多个是 MBR 的硬盘。这个 MBR 是另一个实事标准；基本上，磁盘的最开始以特定格式描述了磁盘上的分区，包含一个 ‘启动引导’,一段非常小 BIOS 固件知道如何执行的代码，它的任务是启动操作系统。（现代的启动引导通常更大能够包含 MBR 空间和必要使用的多阶段设计，MBR 中的位知道如何从其他位置加载下一阶段，但这对于我们来说并不是现在的重点）。</p>\n<p>所有 BIOS 固件都知道，在启动系统的上下文中，是哪个磁盘有操作系统。你，BIOS 基础计算机的所有者，可以告诉 BIOS 固件你要启动的哪个磁盘上的系统。固件不明白这范围以外的事情了。它执行启动引导找到具体硬盘上的 MBR ，就完了。固件再也不会被调用了。</p>\n<p>在 BIOS 的世界里，显然所有形式的多重引导都在固件层之上处理。固件层不知道什么是启动引导，或者什么是操作系统。它更不知道分区是什么。所有它能做的只是从磁盘的 MBR 分区执行启动引到程序。您也无法从固件外部配置引导过程。</p>\n<h2 id=\"UEFI-启动：背景\"><a href=\"#UEFI-启动：背景\" class=\"headerlink\" title=\"UEFI 启动：背景\"></a>UEFI 启动：背景</h2><p>好的，我们已经有 BIOS 世界的基础了。现在让我们看一下在UEFI系统上启动的工作方式。使您不了解这篇文章的细节，也请理解：它完全不同。彻底完全地不同与 BIOS 的启动方式。你不能将你对 BIOS 引导过程来理解 UEFI 启动。你需要知道这是一个完全不同的世界。</p>\n<p>这还有一件重要的十需要知道：许多 UEFI 固件实现了某种 BIOS 兼容模式，通常被叫称为 CSM。许多 UEFI 固件能像 BIOS 固件一样启动-它们会找磁盘上的 MBR，并且执行 MBR 里的启动引导，然后将所有内容留给该引导程序。人们有时会错误地将使用此功能称为“禁用 UEFI”，这是语法上的错误。你不能“禁用”你系统上的固件。这是很笨的术语。不要用它，但理解人们真正想说的东西。他们想说 UEFI 固件能以”BIOS 模式“启动系统而不是原生 UEFI 模式。</p>\n<p>我将描述下原生 UEFI 启动。如果你有基于 UEFI 系统，其固件具有 BIOS 兼容性功能，并且你决定使用它。那么就启动而言，你可以假装你的系统是基于 BIOS 的，做所有事的方式跟 BIOS 启动方式一样。但是，如果要执行此操作，请确保您始终应用它。我真心强烈不推荐你将 UEFI-原生 与 BIOS-兼容的永久安装操作系统的引导，特别是在相同的磁盘上。这是非常非常糟糕的主意，这会造成你身心痛苦。如果你决定这样做，不要来向我哭。</p>\n<p>为了理智，我假设磁盘尺有所短  GPT 分区表，和 EFI FAT32 <a href=\"https://en.wikipedia.org/wiki/EFI_System_partition\" target=\"_blank\" rel=\"noopener\">EFI 系统分区</a>。根据要深入研究这些内容的深度，您可能会发现，并不是严格说来，您可以始终假设在处理UEFI本机启动时将要使用 GPT 磁盘和 EFI FAT32 ESP，但是 UEFI 规范与 GPT 磁盘和 EFI FAT32 ESP 紧密相关，在99％的情况下，这是您要处理的问题。除非你正在使用 Macs，坦白说，Macs 很混乱。</p>\n<p><strong>编辑注解:</strong> 以下内容（取决于含义和复杂性）在 2014-01-26 经过大量修改，此帖子的初始版本发布后几个小时根据 Peter Jones 的反馈。认为这是 V2.0 版的文章。早期版本以不太准确和混乱的方式编写。</p>\n<h2 id=\"UEFI-原生启动：它背后真正做了什么\"><a href=\"#UEFI-原生启动：它背后真正做了什么\" class=\"headerlink\" title=\"UEFI 原生启动：它背后真正做了什么\"></a>UEFI 原生启动：它背后真正做了什么</h2><p>好吧，顺便说一句，让我们开始讨论。这就是原生 UEFI 引导实际上是如何工作的。拥有一些高级背景知道可能会有所帮助。</p>\n<p>UEFI 在固件级提供了很多基础架构来处理系统启动。它远不及 BIOS 那么简单。不像 BIOS，UEFI 真正地理解，要从不同程度上，磁盘分区、启动引导程序和操作系统等概念。</p>\n<p>你可以看一下 BIOS 引导过程，再看一下 UEFI 过程，看 UEFI 流程如何扩展各种位以解决特定问题。</p>\n<p>这 BIOS/MBR 查找引导程序的方式非常简陋，当你思考它时。它就像非特别的酱：这是在磁盘头一段极小的空间里包含神奇的代码，它只对系统固件有意义，只能用特殊工具来写它。这种方法存在几个问题。</p>\n<ul>\n<li>这不方便处理 - 你需要特殊的固件来写 MBR 分区， 也就只有一个办法搞清楚它是什么，dd 出内容然后分析它。</li>\n<li>如上所述，MBR 它本身没那么大不足以容纳许多现代引导程序。它所做的是安装它们自身的一小部分到 MBR 适当的位置，剩余的空间到磁盘常规 MBR 结束到第一分区开始之的空白空间。这有一个很大的问题（好吧，这整个设计就是个大问题，但是从未注意到），这就是关于第一分区的开始位置没有可靠的约定，因此很难确保会有足够的空间。通常可以认为，没有足够的空间用于某些引导加载程序配置。</li>\n<li>设计没有提供为选择引导目标（磁盘除外）的任何标准代理层或机制…但是对于人们想选择磁盘意外的引导目标。比如，他们想有个可启动的东西-通常是操作系统-每个磁盘。唯一的方式是这样，在 BIOS/MBR 时间里是引导程序来处理它；但是仍没有一个被广泛认可的约定来完成以正常的方式来完成这些。有许多许多的方法，没有一个可以与其他任何一个互操作，写一个在 OS/OS 安装代理层能干净地处理多重引导问题的工具那太难了。</li>\n<li>该设计没有提供从磁盘以外的任何东西引导的标准方法。我不想在这篇文章真正的讨论这个问题，但请注意，这是 UEFI 引导的另一个优势：它提供了从例如远程服务器引导的标准方式。</li>\n<li>没有提供机制可以用于配置高于固件的级别来配置固件的启动行为。</li>\n</ul>\n<p>所以你能想象 UEFI 精灵围坐在一起考虑这个问题，并提出了解决方案。取代固件只知道磁盘和每个磁盘上的“魔术”区域-引导加载程序代码可能驻留的位置，UEFI 对于处理启动引导的固件有更多的基础设施。让我们看看它定义的所有与这里相关的东西。</p>\n<h1 id=\"EFI-可执行文件\"><a href=\"#EFI-可执行文件\" class=\"headerlink\" title=\"EFI 可执行文件\"></a>EFI 可执行文件</h1><p>UEFI 规格定义了一种可执行格式并要求所有 UEFI 固件能够执行这种格式的代码。当您为本机 UEFI 编写引导加载程序时，你将以这种格式编写。这种方式十分简单明了，不需要过多的解释：这是个好东西，现在我们有了一个固件规范真正地定义了固件可执行通用代码格式。</p>\n<h1 id=\"GPT-GUID-分区表-格式\"><a href=\"#GPT-GUID-分区表-格式\" class=\"headerlink\" title=\"GPT(GUID 分区表)格式\"></a>GPT(GUID 分区表)格式</h1><p><a href=\"https://en.wikipedia.org/wiki/GUID_Partition_Table\" target=\"_blank\" rel=\"noopener\">GUID 分区表</a> 格式非常贴符合 UEFI 规范，此外，没有什么特别复杂的或需要过多解释的，这只是规范提供的基础。GPT 只是做分区表的标准-信息在磁盘的头部，它定义了磁盘包含什么分区。它是在许多方面比 MBR/‘MS-DOS’ 做更好的分区标准，UEFI 规范要求符合 UEFI 的固件必须能够解释 GPT（它同样要求能够执行 MBR，为了向后兼容）。所有这些都是有用的基础：这里正在发生的事情是规范正在建立某些功能，固件层以上的所有内容都可以依赖于固件。</p>\n<h1 id=\"EFI-系统分区\"><a href=\"#EFI-系统分区\" class=\"headerlink\" title=\"EFI 系统分区\"></a>EFI 系统分区</h1><p>实际上，在修订本文时，我确实想将头放在 EFI 系统分区概念上，因为它非常精彩的部分。实际上，”EFI 系统分区“这概念正是回答 MBR 空间“特殊调味料”的问题。正如我们在上面看到的，在磁盘开始时一些未定义的空白空间的概念是“引导加载程序代码所在的位置”，这是一个非常糟糕的设计。EFI 系统分区就是来解决这个问题的。</p>\n<p>解决办法是：我们要求固件能够一些具体的文件系统。UEFI 规范要求合格的固件应该能读取 FAT12， FAT 格式的 FAT16 和 FAT32 变体。实际上，它所做的是编篆对那么格式特定的解释，因为他们在 UEFI 被接受时就已经存在了，就是说符合 UEFI 的固件必须能够读这些格式。规范如下：</p>\n<p>“被可扩展固件接口支持的文件系统是基于 FAT 文件系统。EFI 定义了明确记录和可测试的 FAT 版本。符合 EFI 规范</p>\n"},{"title":"软件测试复习概要","date":"2019-01-04T16:00:00.000Z","_content":"\n- [x] 软件测试常用的概念，常用的分类，测试的目的，方法等\n- [x] 软件测试静态测试的概念，技术，分类，执行过程，涉及的活动，测试的对象等\n- [x] 软件测试的模型分类，个各模型的特点，适用场景，规划的阶段及其关系，表达的图形等\n- [x] 面向对象的软件测试概念，与软件开发以及普通测试的关系等\n- [x] 集成测试、系统测试的概念，划分的阶段，先后执行的顺序，输入、输出成果物等\n- [x] 黑盒测试、白盒测试的概念，常用的方法，测试用例的设计过程，以及执行的过程如何实施等\n- [x] 等价类划分、边界值测试、三明治集成测试等概念、用例设计、实施过程\n- [x] 因果图法的概念，用例设计，执行步骤等\n- [x] 基本路径测试法概念，用例设计过程，实施执行过程等（控制流图画法、环形复杂度计算、基本路径获取、用例设计及执行等）\n- [x] 单元测试的概念，主要任务，使用的方法等\n- [x] 软件测试与调试的区别与联系，软件缺陷的概念及其相关知识\n\n<!-- ttoc -->\n\n## 1. 软件测试\n### 1.1 软件测试概念\n1. IEEE 在1983年将软件测试定义为“使用人工或者自动化手段运行或测定某个系统的过程，其目的在于检验他是否满足规定的需求或者是弄清预期结果与实际结果之间的差别“，该定义明确地提出了软件测试以检验是否为目标。\n2. Myers则认为软件测试“是为了发现错误而执行的程序过程”，明确提出了“寻找错误”是测试目的。\n3. 从软件质量保证的角度看，软件测试是一种重要的软件质量保证活动，其动机是通过一些经济、高效的方法，捕捉软件中的错误，从而达到保证软件内在质量的目的。\n\n### 1.2. 软件测试目的\n* 软件测试是为了发现错误而执行程序的过程\n* 测试是为了证明程序有错，而不是证明程序无错\n* 一个好的测试用例在于他能发现至今未发现的错误\n* 一个成功的测试是发现了至今未发现的错误的测试\n\n### 1.3. 软件测试技术分类\n|分类方法||\n|-|-|\n|从是否需要执行被测软件的角度|静态测试、动态测试|\n|从软件测试用例实际方法|黑盒测试、白盒测试|\n|按照软件测试的策略和过程|单元测试、集成测试、确认测试、系统测试、验收测试|\n\n## 2 静态测试\n### 2.1. 静态测试概念\n那些不利用计算机运行被测程序，而是通过其他手段达到测试目的的方法称作静态测试。换句话说，就是计算机并不真正运行被测试的程序，如在项目开发中存在着大量的规格说明，而说明规格是无法用计算机来运行的，所以对于这些软件的规格说明的测试就属于静态测试。\n\n### 2.2. 静态测试主要方法\n- 主要方法：**代码检查、走查、桌面检查、同行评分**\n  - **代码检查**: 所谓代码检查，是以组为单位阅读代码，他是一系列规则和错误检查技术的集合。对代码检查的大多数讨论都集中在规程、所要填写的表格等。这里对整个规程进行简短的概述。\n     - 为代码检查分发材料、安排进程\n     - 在代码检查中起主要作用\n     - 记录发现的所有错误\n     - 确保所有错误能够及时得到修正\n  - **代码走查**：代码走查与代码检查很相似，都是以小组我单位进行代码阅读，是一系列规程和错误检查技术的集合。代码走查的过程与代码检查大体相同，代码走查也是采用持续一至两个小时的不间断会议的形式。但是稍微所有不同，采用的错误检查技术也不一样。\n    代码走查小组有3~5人组成，其中一个人扮演类似代码检查过程中“协调人员”的角色，一个人担任秘书（负责记录所有查出的错误），还有一个人担任测试人员。建议在代码走查小组这最好包括如下人员：\n    （1）一位经验丰富的程序员；\n    （2）一位程序设计语言专家；\n    （3）一位初级程序员（可以给出新颖、不带偏见的观点）；\n    （4）将要负责程序维护的人员\n    （5）一位其他项目的人员\n    （6）一位来自该软件编程小组的程序员\n\n  - **桌面检查**: 可以把桌面检查看作是由个人进行的代码检查或代码走查，即一个人阅读程序，对照错误列表检查程序，使用测试数据对程序进行推演。对于大多数人而言，桌面检查的效率是相当低的。其中的一个原因就是这个过程本身不受到任何约束。另外一个重要原因就是程序员常常不能够有效地测试自己编写的程序。因此最好由其他人而非该程序的编写人员进行桌面检查（例如可以让程序员之间相互交换各自编写的程序，避免自己对自己编写的程序进行桌面检查）。但是使用桌面检查的方法进行软件测试所得到的效果无法同代码走查或代码检查相比。代码检查和代码走查小组由多人组成，能够产生相互促进的效应。如果小组会议能够营造一种良性竞争的气氛，那么工作人员就能够乐于通过发现问题来展示自己的能力。而在桌面检查中，是无法做到这一点的。简而言之，桌面检查胜过没有检查，但测试效果远远不能同代码检查和代码走查相比。\n  - **同行评分**：虽然这种人工评审方法的目的是为了程序员提供一个自我评价的手段，与程序测试并无关系（其目标不是为了发现错误）。但是因为他与代码阅读的思想有关，是一种依据程序整体质量、可维护性、可扩展性、易用行和清晰性对匿名程序进行评价的技术。因此，有必要对其进行简单的了解。大致过程如下：首先挑选一位程序员担任评分过程的管理员，管理员再挑选出大约6~20名具备相似背景的参与者（例如，不同把Java应用程序员与汇编语言系统程序员编为一组）。每个参与者都提供两者由自己编写的程序以供评审，其中的一个程序是能代表参与者自身能力的最好作品，而另一个就是参与者认为质量较差的作品。\n\n## 3. 软件测试与调试的区别与联系\n白盒测试与调试的最终目的都是为了让被测应用(AUT)可以正常安全地运行，都是保证软件质量过程的一个环节。那么，白盒测试与调试有哪些不同呢？\n\n从承担的任务来看，白盒测试同其他类型测试一样，他的任务是发现所开发的项目中的缺陷；但是，调试不属于测试，其任务是纠正软件中的缺陷。\n\n从最终的结果来看，白盒测试有预知的结果，不可预知的知识程序是否通过测试，并且成功测试的结果是发现错误的症状，从而引起调试的进行；而调试的结果是消除项目中的错误。\n\n从执行的过程来看，软件测试只是发现程序中有错误的迹象，没有错误定位，也不需要找到出错原因；软件调试是根据测试报告的记录，在软件测试后纠正错误的工作，包括确定错误位置和修改错误。测试是一个错误发现、改正错误、重新测试的过程；而调试是一个推理过程。\n\n从准备工作来看，测试从已知的调试开始，使用预先定义的程序；调试是以不可知的内部条件开始，做统一性调试。\n\n从执行的计划性来看，测试是有计划的并要进行测试设计；而调试则不受时间约束。\n\n从测试的执行人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。\n\n测试的执行是有规程的，而调试的执行往往要求程序员进行必要推理以至知觉的“飞跃”。\n\n从执行的人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。\n\n从所使用的工具来看，大多数白盒测试的执行和设计可由工具支持，而调试程序员能利用的工具主要是调试器。\n\n## 4. 软件缺陷的概念\n1. 软件没有实现产品的说明书所描述的功能。\n2. 软件实现了产品说明书描述不应有的功能。\n3. 软件执行了产品说明书没讲的操作。\n4. 软件没有实现产品说明书没讲但应该实现的功能。\n5. 从软件测试员的角度来看，软件难以理解、不易使用、运行缓慢，或者最终用户认为不对。\n\n\n## 5. 单元测试\n### 5.1. 单元测试定义\n单元测试是在软件开发过程中要进行的最低级别的测试活动，或者说是针对软件设计的最小单位—程序模块，进行正确性检查的测试工作。其目的在于发现每个程序模块内部可能存在的差错。在单元测试活动中，软件的独立单元在与程序的其他部分相隔离的情况下进行测试。\n\n### 5.2. 单元测试主要任务\n主要工作分为两个步骤：人工静态检查和动态执行跟踪。前者主要是保证代码算法的逻辑正确性（尽量通过人工检查发现代码的逻辑错误）、清晰性、规范性、一致性、算法高效性，并尽可能地发现程序程序中没有发现的错误。后者就是通过设计测试用例，执行待测程序来跟踪比较实际结果与预期结果来发现错误。\n    \n    （1）正确性是指代码逻辑必须正确，能够实现预期的功能\n    （2）清晰性是指代码必须简明、易懂，注释准确没有歧义；\n    （3）规范性是指代码必须符合企业或部门所定义的共同规范，包括命名规则，代码风格\n    （4）一致性是指代码必须在命名上（如相同功能的变量尽量采用相同的标示符）、风格上都保持统一；\n    （5）高效性是指代码不但要满足以上性质，而且需要尽可能降低代码的执行时间。\n\n### 5.3. 单元测试使用方法\n基于代码的白盒测试\n\n## 6. 集成测试\n### 6.1 集成测试定义\n根据实际情况对成语模块采用适当的集成测试策略组装起来，对系统接口以及集成后的功能进行正确性检验的测试工作。\n\n### 6.2 集成测试策略\n#### 6.2.1 三明治集成\n\n    （1）目的：综合利用自顶向下和自底向上两种集成测试策略的优点\n    （2）定义：三明治集成是一种混合增值式测试策略，综合了自顶向下和自顶向上两种集成方法的优点，因此也属于基于功能分解测试。\n    \n### 6.3 集成测试过程\n```gantt\n    title 集成测试过程\n        制定集成测试计划: a,1d\n        设计集成测试: 1d\n        实施集成测试: 1d\n        执行集成测试: 1d\n        评估集成测试: 1d\n```\n\n## 7. 系统测试\n### 7.1. 系统测试的定义\n将已经集成好的软件系统，作为整个计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。\n\n#### 7.2. 集成测试过程\n```gantt\n    title 系统测试过程\n        制定系统测试计划: a,1d\n        设计系统测试: 1d\n        实施系统测试: 1d\n        执行系统测试: 1d\n        评估系统测试: 1d\n``` \n\n## 8. 软件测试模型\n### 8.1. V模型\n      用户需求                      验收测试  \n        需求分析和系统设计      确认测试和系统测试 \n             概要设计         集成测试\n                详细设计   单元测试\n                       编码\n                       \n经典的V模型阶段可以分为\n\n* 单元测试\n* 集成测试\n* 系统测试\n\n**模型特点**：V模型的价值主要在于他非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试阶段和开发过程期间的对应关系:\n\n* 单元测试的主要目的是根据详细设计说明书来验证和确认每个单元模块是否符合预期的要求，发现编码过程中可能存在的各种错误。\n* 集成测试主要目的是根据概要设计来验证和确认各个模块是否已正确集成到一起，主要是检查各单元与其他模块之间的接口上可能存在的错误。\n* 系统测试主要目的是根据需求定义，验证和确认系统作为一个整体是否能够正常有效地运行，例如，判断系统是否达到了用户预期的性能。\n\n### 8.2. W模型\nW模型中测试与开发对应关系如下：\n开发：需求分析、概要设计、　　详细设计、　　编码、　　软件集成、系统集成、部署\n　　　　　↑　　　　↑　　　　　　　↑　　　　　↑　　　　　　↑　　　　↑　　　↑\n测试：需求评审、概要设计评审、详细设计评审、单元测试、集成测试、系统测试、验收测试\n\nW模型强调：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的。W模型有利于尽早地全面的发现问题。例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少总体测试时间，加快项目进度。 但W模型也存在局限性。在W模型中，需求、设计、编码等活动被视为串行的，同时，测试和开发活动也保持着一种线性的前后关系，上一阶段完全结束，才可正式开始下一个阶段工作。这样就无法支持迭代的开发模型。对于当前软件开发复杂多变的情况，W模型并不能解除测试管理面临着困惑。\n\n### 8.3. H模型\n在H模型中，软件测试的过程活动完全独立，形成了一个完全独立的流程，贯穿于整个产品的周期，与其他流程并发进行，某个测试点准备就绪后就可以从测试准备阶段进行到测试执行阶段；软件测试可以根据被测产品的不同分层进行。\n\nH模型揭示了：\n    （1）软件测试不仅仅指测试的执行，还包括很多其他活动。\n    （2）软件测试是一个独立的流程，贯穿产品的整个开发周期，与其他流程并发进行。\n    （3）软件测试要尽早准备，尽早执行。\n    （4）软件测试根据被测物的不同是分层次的，不同层次的测试活动可以是按照某个次序先后进行的，但也可能是反复的。\n    \n## 9. 面向对象测试\n### 9.1.1 面向对象测试基本概念\n面向软件测试技术是新兴的软件测试技术，是专门针对使用面向对象技术开发的软件而提出的一种测试技术。其目的是为了解决传统的软件测试技术，面对面向对象技术开发的软件多少显得有些力不从心的现象。面向对象开发技术和传统的开发技术相比，新增了多态、继承、封装等特点。这些新特点使得开发出来的程序，具有更好的结构更规范的编程风格, 极大地优化了数据使用的安全性, 提高了代码的重用率。由此可见，它们是面向对象开发技术产生巨大吸引力的重要因素。然而，另一方面也影响了软件测试的方法和内容；增加了软件测试的难度；带来了传统软件设计技术所不存在的错误；或者使得传统软件测试中的重点不再显得突出；或者使原来测试经验认为和实践证明的次要方面成为了主要问题。\n\n## 10. 黑白盒测试\n### 10.1. 黑盒测试概念\n黑盒测试也称作功能测试和行为测试，主要是根据功能需求来测试程序是否按照预期工作。黑盒测试的目的是尽量发现代码所表现的外部行为的错误，主要有以下几类：\n\n    （1）功能不正确或不完整；\n    （2）接口错误；\n    （3）接口所使用的数据结构错误；\n    （4）行为或性能错误；\n    （5）初始化和终止错误。\n    \n### 10.2. 黑盒测试用例设计\n常用的黑盒测试用例设计方法主要有以下几中：等价类划分法、边界值分析法、因果图法、决策表法和错误推测法等方法。\n\n#### 10.2.1. 等价类划分法\n等价类划分法是一种重要的、常用的黑盒测试方法，它将不能穷举的测试过程进行合理分类，从而保证设计出来的测试用例具有完整性和代表性。\n\n等价类划分法：是把所有可能的输入数据，即程序的输入域划分为若干部分（子集），然后从每一个子集中选取少数具有代表的数据作为测试用例。\n\n等价类：指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，它们具有等价特性，即每一类的代表性数据在测试中的作用都等价于这一类中的其他数据。这样，对于表特征该类的数据输入将能代表这个子集合的输入。因此，可以合理地假定：测试某等价类的代表值等效于对于这类其他值的测试。\n\n“保险公司绩保费费率的程序”例题见《软件测试技术》(第二版) **P91**。\n\n#### 10.2.2. 边界值分析法\n边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为等价类划分方法的补充，在这个情况下，其测试用例来自等价类的边界。\n\n边界值分析使用与等价类划分方法相同的划分，只是边界值分析假定错误更多地存在于划分的边界上，因此在等价类的边界上以及两侧的情况设计测试用例。\n\n例题：\n$$有二元函数 f(x,y), 其中x\\in[1,12],y\\in[1,31];则采用边界值分析法设计的测试用例是:$$\n\n                {<1,15>;<2,15>;<11,15>;<11,15>;<12,15>;<6,15>;<6,1>;<6,2>;<6,30>;<6,31>}\n    \n 推论：对于一个含有n个变量的程序，采用边界值分析法测试程序会产生 4n+1 个测试用例.\n            \n#### 10.2.3. 因果图法\n一些程序的功能可以用判定表（或称决策表）的形式来表示，并根据输入条件的组合情况规定相应的操作。因果图法就是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。\n\n采用因果图法设计测试用例的步骤：\n\n    （1）列出模块的原因（输入条件）和效果（动作），且给每个原因和效果一个标识符；\n    （2）列出原因——效果图；\n    （3）由于语法或环境的限制，有些原因和结果的组合情况是不可能出现的。为表明这些特定情况，在因果图上使用特殊的符号标明约束条件；\n    （4）把因果图转换成判定表；\n    （5）把判定表的每一列写成一个测试用例。\n\n“因果图法” 例题见《软件测试技术》(第二版) **P100**。\n\n#### 10.2.4. 决策表法\n在所有的黑盒测试中，机遇决策表（也称判定表）的测试是最为严格、最具有逻辑性的测试方法。\n\n构造决策表的 4 个步骤：\n    \n    （1）确定规则的个数，有 n 个条件的决策表有 2^n 个规则（每个条件取真、假值）；\n    （2）列出所有的条件桩和动作桩\n    （3）填入动作项，得到初始决策表；\n    （4）简化决策表，合并相似规则。\n    \n若表中有两条以上规则具有相同的动作，并且在条件项之间存在极为相似的关系，便可以合并。合并后的条件项用符号——表示，说明执行的动作与该条件的取值无关，称为无关条件。\n\n\"三角形问题决策表\" 例题见《软件测试技术》（第二版）**P102**\n\n#### 10.2.5. 错误推测法\n错误推测法的概念：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性地设计测试用例的方法。\n\n错误推测的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。\n\n### 10.3. 白盒测试概念\n白盒测试就是一种用于检查代码是否按照预期工作的验证技术，又称结构测试、逻辑驱动测试或基于程序的测试。白盒测试的主要特点就是正对被测程序的源代码，测试者可能完全不考虑程序的功能。\n\n### 10.4. 白盒测试用例设计\n常用的白盒测试用例设计方法主要有以下几中：逻辑覆盖测试、边界值测试、基本路径测试、循环语句测试、程序插桩测试、数据流测试、变异测试。\n\n#### 10.4.1 逻辑覆盖测试\n\n|类型|定义|\n|:-|:-|\n|语句覆盖|程序中的每个可执行语句至少执行一次|\n|判定覆盖|程序中每个判定的取真分支和取假分支的情况至少经历一次，即判断的真假值均曾被满足|\n|条件覆盖|要使每个判断中每个条件的可能取值至少满足一次|\n|判定-条件覆盖|使得判断中每个条件的所有可能至少出现一次，并且每个判断判定结果也至少出现一次|\n|路径覆盖|测试用例覆盖程序中所有可能的路径|\n\n```C\nIF((A > 1) AND (B = 0) THEN\n    X=X/A\nIF((A = 2) OR (X > 1) THEN\n    X=X+1\n```\n\n```flow\nsta=>start: Start\ncond1=>condition: (A>1) AND (B=0)\ncond2=>condition: (A=2) OR (X>1)\nio1=>operation: X=X/A\nio2=>operation: X=X+1\n\ne=>end: End\n\nsta->cond1(yes)->io1->cond2(yes)->io2->e\nsta->cond1(no,left)->cond2(no,left)->e\n```\n\n#### 10.4.2. 边界值分析\n等价类划分和边界值分析为软件测试提供了一种设计白盒测试用例的策略。\n\n#### 10.4.3. 基本路径测试\n\n#### 10.4.4 循环语句测试\n\n#### 10.4.5 插桩测试\n\n#### 10.4.6 数据流测试\n\n#### 10.4.7 变异测试\n","source":"_posts/软件测试复习.md","raw":"---\ntitle: 软件测试复习概要\ndate: 2019-01-05\ncategories: 学习资料\n\n---\n\n- [x] 软件测试常用的概念，常用的分类，测试的目的，方法等\n- [x] 软件测试静态测试的概念，技术，分类，执行过程，涉及的活动，测试的对象等\n- [x] 软件测试的模型分类，个各模型的特点，适用场景，规划的阶段及其关系，表达的图形等\n- [x] 面向对象的软件测试概念，与软件开发以及普通测试的关系等\n- [x] 集成测试、系统测试的概念，划分的阶段，先后执行的顺序，输入、输出成果物等\n- [x] 黑盒测试、白盒测试的概念，常用的方法，测试用例的设计过程，以及执行的过程如何实施等\n- [x] 等价类划分、边界值测试、三明治集成测试等概念、用例设计、实施过程\n- [x] 因果图法的概念，用例设计，执行步骤等\n- [x] 基本路径测试法概念，用例设计过程，实施执行过程等（控制流图画法、环形复杂度计算、基本路径获取、用例设计及执行等）\n- [x] 单元测试的概念，主要任务，使用的方法等\n- [x] 软件测试与调试的区别与联系，软件缺陷的概念及其相关知识\n\n<!-- ttoc -->\n\n## 1. 软件测试\n### 1.1 软件测试概念\n1. IEEE 在1983年将软件测试定义为“使用人工或者自动化手段运行或测定某个系统的过程，其目的在于检验他是否满足规定的需求或者是弄清预期结果与实际结果之间的差别“，该定义明确地提出了软件测试以检验是否为目标。\n2. Myers则认为软件测试“是为了发现错误而执行的程序过程”，明确提出了“寻找错误”是测试目的。\n3. 从软件质量保证的角度看，软件测试是一种重要的软件质量保证活动，其动机是通过一些经济、高效的方法，捕捉软件中的错误，从而达到保证软件内在质量的目的。\n\n### 1.2. 软件测试目的\n* 软件测试是为了发现错误而执行程序的过程\n* 测试是为了证明程序有错，而不是证明程序无错\n* 一个好的测试用例在于他能发现至今未发现的错误\n* 一个成功的测试是发现了至今未发现的错误的测试\n\n### 1.3. 软件测试技术分类\n|分类方法||\n|-|-|\n|从是否需要执行被测软件的角度|静态测试、动态测试|\n|从软件测试用例实际方法|黑盒测试、白盒测试|\n|按照软件测试的策略和过程|单元测试、集成测试、确认测试、系统测试、验收测试|\n\n## 2 静态测试\n### 2.1. 静态测试概念\n那些不利用计算机运行被测程序，而是通过其他手段达到测试目的的方法称作静态测试。换句话说，就是计算机并不真正运行被测试的程序，如在项目开发中存在着大量的规格说明，而说明规格是无法用计算机来运行的，所以对于这些软件的规格说明的测试就属于静态测试。\n\n### 2.2. 静态测试主要方法\n- 主要方法：**代码检查、走查、桌面检查、同行评分**\n  - **代码检查**: 所谓代码检查，是以组为单位阅读代码，他是一系列规则和错误检查技术的集合。对代码检查的大多数讨论都集中在规程、所要填写的表格等。这里对整个规程进行简短的概述。\n     - 为代码检查分发材料、安排进程\n     - 在代码检查中起主要作用\n     - 记录发现的所有错误\n     - 确保所有错误能够及时得到修正\n  - **代码走查**：代码走查与代码检查很相似，都是以小组我单位进行代码阅读，是一系列规程和错误检查技术的集合。代码走查的过程与代码检查大体相同，代码走查也是采用持续一至两个小时的不间断会议的形式。但是稍微所有不同，采用的错误检查技术也不一样。\n    代码走查小组有3~5人组成，其中一个人扮演类似代码检查过程中“协调人员”的角色，一个人担任秘书（负责记录所有查出的错误），还有一个人担任测试人员。建议在代码走查小组这最好包括如下人员：\n    （1）一位经验丰富的程序员；\n    （2）一位程序设计语言专家；\n    （3）一位初级程序员（可以给出新颖、不带偏见的观点）；\n    （4）将要负责程序维护的人员\n    （5）一位其他项目的人员\n    （6）一位来自该软件编程小组的程序员\n\n  - **桌面检查**: 可以把桌面检查看作是由个人进行的代码检查或代码走查，即一个人阅读程序，对照错误列表检查程序，使用测试数据对程序进行推演。对于大多数人而言，桌面检查的效率是相当低的。其中的一个原因就是这个过程本身不受到任何约束。另外一个重要原因就是程序员常常不能够有效地测试自己编写的程序。因此最好由其他人而非该程序的编写人员进行桌面检查（例如可以让程序员之间相互交换各自编写的程序，避免自己对自己编写的程序进行桌面检查）。但是使用桌面检查的方法进行软件测试所得到的效果无法同代码走查或代码检查相比。代码检查和代码走查小组由多人组成，能够产生相互促进的效应。如果小组会议能够营造一种良性竞争的气氛，那么工作人员就能够乐于通过发现问题来展示自己的能力。而在桌面检查中，是无法做到这一点的。简而言之，桌面检查胜过没有检查，但测试效果远远不能同代码检查和代码走查相比。\n  - **同行评分**：虽然这种人工评审方法的目的是为了程序员提供一个自我评价的手段，与程序测试并无关系（其目标不是为了发现错误）。但是因为他与代码阅读的思想有关，是一种依据程序整体质量、可维护性、可扩展性、易用行和清晰性对匿名程序进行评价的技术。因此，有必要对其进行简单的了解。大致过程如下：首先挑选一位程序员担任评分过程的管理员，管理员再挑选出大约6~20名具备相似背景的参与者（例如，不同把Java应用程序员与汇编语言系统程序员编为一组）。每个参与者都提供两者由自己编写的程序以供评审，其中的一个程序是能代表参与者自身能力的最好作品，而另一个就是参与者认为质量较差的作品。\n\n## 3. 软件测试与调试的区别与联系\n白盒测试与调试的最终目的都是为了让被测应用(AUT)可以正常安全地运行，都是保证软件质量过程的一个环节。那么，白盒测试与调试有哪些不同呢？\n\n从承担的任务来看，白盒测试同其他类型测试一样，他的任务是发现所开发的项目中的缺陷；但是，调试不属于测试，其任务是纠正软件中的缺陷。\n\n从最终的结果来看，白盒测试有预知的结果，不可预知的知识程序是否通过测试，并且成功测试的结果是发现错误的症状，从而引起调试的进行；而调试的结果是消除项目中的错误。\n\n从执行的过程来看，软件测试只是发现程序中有错误的迹象，没有错误定位，也不需要找到出错原因；软件调试是根据测试报告的记录，在软件测试后纠正错误的工作，包括确定错误位置和修改错误。测试是一个错误发现、改正错误、重新测试的过程；而调试是一个推理过程。\n\n从准备工作来看，测试从已知的调试开始，使用预先定义的程序；调试是以不可知的内部条件开始，做统一性调试。\n\n从执行的计划性来看，测试是有计划的并要进行测试设计；而调试则不受时间约束。\n\n从测试的执行人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。\n\n测试的执行是有规程的，而调试的执行往往要求程序员进行必要推理以至知觉的“飞跃”。\n\n从执行的人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。\n\n从所使用的工具来看，大多数白盒测试的执行和设计可由工具支持，而调试程序员能利用的工具主要是调试器。\n\n## 4. 软件缺陷的概念\n1. 软件没有实现产品的说明书所描述的功能。\n2. 软件实现了产品说明书描述不应有的功能。\n3. 软件执行了产品说明书没讲的操作。\n4. 软件没有实现产品说明书没讲但应该实现的功能。\n5. 从软件测试员的角度来看，软件难以理解、不易使用、运行缓慢，或者最终用户认为不对。\n\n\n## 5. 单元测试\n### 5.1. 单元测试定义\n单元测试是在软件开发过程中要进行的最低级别的测试活动，或者说是针对软件设计的最小单位—程序模块，进行正确性检查的测试工作。其目的在于发现每个程序模块内部可能存在的差错。在单元测试活动中，软件的独立单元在与程序的其他部分相隔离的情况下进行测试。\n\n### 5.2. 单元测试主要任务\n主要工作分为两个步骤：人工静态检查和动态执行跟踪。前者主要是保证代码算法的逻辑正确性（尽量通过人工检查发现代码的逻辑错误）、清晰性、规范性、一致性、算法高效性，并尽可能地发现程序程序中没有发现的错误。后者就是通过设计测试用例，执行待测程序来跟踪比较实际结果与预期结果来发现错误。\n    \n    （1）正确性是指代码逻辑必须正确，能够实现预期的功能\n    （2）清晰性是指代码必须简明、易懂，注释准确没有歧义；\n    （3）规范性是指代码必须符合企业或部门所定义的共同规范，包括命名规则，代码风格\n    （4）一致性是指代码必须在命名上（如相同功能的变量尽量采用相同的标示符）、风格上都保持统一；\n    （5）高效性是指代码不但要满足以上性质，而且需要尽可能降低代码的执行时间。\n\n### 5.3. 单元测试使用方法\n基于代码的白盒测试\n\n## 6. 集成测试\n### 6.1 集成测试定义\n根据实际情况对成语模块采用适当的集成测试策略组装起来，对系统接口以及集成后的功能进行正确性检验的测试工作。\n\n### 6.2 集成测试策略\n#### 6.2.1 三明治集成\n\n    （1）目的：综合利用自顶向下和自底向上两种集成测试策略的优点\n    （2）定义：三明治集成是一种混合增值式测试策略，综合了自顶向下和自顶向上两种集成方法的优点，因此也属于基于功能分解测试。\n    \n### 6.3 集成测试过程\n```gantt\n    title 集成测试过程\n        制定集成测试计划: a,1d\n        设计集成测试: 1d\n        实施集成测试: 1d\n        执行集成测试: 1d\n        评估集成测试: 1d\n```\n\n## 7. 系统测试\n### 7.1. 系统测试的定义\n将已经集成好的软件系统，作为整个计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。\n\n#### 7.2. 集成测试过程\n```gantt\n    title 系统测试过程\n        制定系统测试计划: a,1d\n        设计系统测试: 1d\n        实施系统测试: 1d\n        执行系统测试: 1d\n        评估系统测试: 1d\n``` \n\n## 8. 软件测试模型\n### 8.1. V模型\n      用户需求                      验收测试  \n        需求分析和系统设计      确认测试和系统测试 \n             概要设计         集成测试\n                详细设计   单元测试\n                       编码\n                       \n经典的V模型阶段可以分为\n\n* 单元测试\n* 集成测试\n* 系统测试\n\n**模型特点**：V模型的价值主要在于他非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试阶段和开发过程期间的对应关系:\n\n* 单元测试的主要目的是根据详细设计说明书来验证和确认每个单元模块是否符合预期的要求，发现编码过程中可能存在的各种错误。\n* 集成测试主要目的是根据概要设计来验证和确认各个模块是否已正确集成到一起，主要是检查各单元与其他模块之间的接口上可能存在的错误。\n* 系统测试主要目的是根据需求定义，验证和确认系统作为一个整体是否能够正常有效地运行，例如，判断系统是否达到了用户预期的性能。\n\n### 8.2. W模型\nW模型中测试与开发对应关系如下：\n开发：需求分析、概要设计、　　详细设计、　　编码、　　软件集成、系统集成、部署\n　　　　　↑　　　　↑　　　　　　　↑　　　　　↑　　　　　　↑　　　　↑　　　↑\n测试：需求评审、概要设计评审、详细设计评审、单元测试、集成测试、系统测试、验收测试\n\nW模型强调：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的。W模型有利于尽早地全面的发现问题。例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少总体测试时间，加快项目进度。 但W模型也存在局限性。在W模型中，需求、设计、编码等活动被视为串行的，同时，测试和开发活动也保持着一种线性的前后关系，上一阶段完全结束，才可正式开始下一个阶段工作。这样就无法支持迭代的开发模型。对于当前软件开发复杂多变的情况，W模型并不能解除测试管理面临着困惑。\n\n### 8.3. H模型\n在H模型中，软件测试的过程活动完全独立，形成了一个完全独立的流程，贯穿于整个产品的周期，与其他流程并发进行，某个测试点准备就绪后就可以从测试准备阶段进行到测试执行阶段；软件测试可以根据被测产品的不同分层进行。\n\nH模型揭示了：\n    （1）软件测试不仅仅指测试的执行，还包括很多其他活动。\n    （2）软件测试是一个独立的流程，贯穿产品的整个开发周期，与其他流程并发进行。\n    （3）软件测试要尽早准备，尽早执行。\n    （4）软件测试根据被测物的不同是分层次的，不同层次的测试活动可以是按照某个次序先后进行的，但也可能是反复的。\n    \n## 9. 面向对象测试\n### 9.1.1 面向对象测试基本概念\n面向软件测试技术是新兴的软件测试技术，是专门针对使用面向对象技术开发的软件而提出的一种测试技术。其目的是为了解决传统的软件测试技术，面对面向对象技术开发的软件多少显得有些力不从心的现象。面向对象开发技术和传统的开发技术相比，新增了多态、继承、封装等特点。这些新特点使得开发出来的程序，具有更好的结构更规范的编程风格, 极大地优化了数据使用的安全性, 提高了代码的重用率。由此可见，它们是面向对象开发技术产生巨大吸引力的重要因素。然而，另一方面也影响了软件测试的方法和内容；增加了软件测试的难度；带来了传统软件设计技术所不存在的错误；或者使得传统软件测试中的重点不再显得突出；或者使原来测试经验认为和实践证明的次要方面成为了主要问题。\n\n## 10. 黑白盒测试\n### 10.1. 黑盒测试概念\n黑盒测试也称作功能测试和行为测试，主要是根据功能需求来测试程序是否按照预期工作。黑盒测试的目的是尽量发现代码所表现的外部行为的错误，主要有以下几类：\n\n    （1）功能不正确或不完整；\n    （2）接口错误；\n    （3）接口所使用的数据结构错误；\n    （4）行为或性能错误；\n    （5）初始化和终止错误。\n    \n### 10.2. 黑盒测试用例设计\n常用的黑盒测试用例设计方法主要有以下几中：等价类划分法、边界值分析法、因果图法、决策表法和错误推测法等方法。\n\n#### 10.2.1. 等价类划分法\n等价类划分法是一种重要的、常用的黑盒测试方法，它将不能穷举的测试过程进行合理分类，从而保证设计出来的测试用例具有完整性和代表性。\n\n等价类划分法：是把所有可能的输入数据，即程序的输入域划分为若干部分（子集），然后从每一个子集中选取少数具有代表的数据作为测试用例。\n\n等价类：指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，它们具有等价特性，即每一类的代表性数据在测试中的作用都等价于这一类中的其他数据。这样，对于表特征该类的数据输入将能代表这个子集合的输入。因此，可以合理地假定：测试某等价类的代表值等效于对于这类其他值的测试。\n\n“保险公司绩保费费率的程序”例题见《软件测试技术》(第二版) **P91**。\n\n#### 10.2.2. 边界值分析法\n边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为等价类划分方法的补充，在这个情况下，其测试用例来自等价类的边界。\n\n边界值分析使用与等价类划分方法相同的划分，只是边界值分析假定错误更多地存在于划分的边界上，因此在等价类的边界上以及两侧的情况设计测试用例。\n\n例题：\n$$有二元函数 f(x,y), 其中x\\in[1,12],y\\in[1,31];则采用边界值分析法设计的测试用例是:$$\n\n                {<1,15>;<2,15>;<11,15>;<11,15>;<12,15>;<6,15>;<6,1>;<6,2>;<6,30>;<6,31>}\n    \n 推论：对于一个含有n个变量的程序，采用边界值分析法测试程序会产生 4n+1 个测试用例.\n            \n#### 10.2.3. 因果图法\n一些程序的功能可以用判定表（或称决策表）的形式来表示，并根据输入条件的组合情况规定相应的操作。因果图法就是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。\n\n采用因果图法设计测试用例的步骤：\n\n    （1）列出模块的原因（输入条件）和效果（动作），且给每个原因和效果一个标识符；\n    （2）列出原因——效果图；\n    （3）由于语法或环境的限制，有些原因和结果的组合情况是不可能出现的。为表明这些特定情况，在因果图上使用特殊的符号标明约束条件；\n    （4）把因果图转换成判定表；\n    （5）把判定表的每一列写成一个测试用例。\n\n“因果图法” 例题见《软件测试技术》(第二版) **P100**。\n\n#### 10.2.4. 决策表法\n在所有的黑盒测试中，机遇决策表（也称判定表）的测试是最为严格、最具有逻辑性的测试方法。\n\n构造决策表的 4 个步骤：\n    \n    （1）确定规则的个数，有 n 个条件的决策表有 2^n 个规则（每个条件取真、假值）；\n    （2）列出所有的条件桩和动作桩\n    （3）填入动作项，得到初始决策表；\n    （4）简化决策表，合并相似规则。\n    \n若表中有两条以上规则具有相同的动作，并且在条件项之间存在极为相似的关系，便可以合并。合并后的条件项用符号——表示，说明执行的动作与该条件的取值无关，称为无关条件。\n\n\"三角形问题决策表\" 例题见《软件测试技术》（第二版）**P102**\n\n#### 10.2.5. 错误推测法\n错误推测法的概念：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性地设计测试用例的方法。\n\n错误推测的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。\n\n### 10.3. 白盒测试概念\n白盒测试就是一种用于检查代码是否按照预期工作的验证技术，又称结构测试、逻辑驱动测试或基于程序的测试。白盒测试的主要特点就是正对被测程序的源代码，测试者可能完全不考虑程序的功能。\n\n### 10.4. 白盒测试用例设计\n常用的白盒测试用例设计方法主要有以下几中：逻辑覆盖测试、边界值测试、基本路径测试、循环语句测试、程序插桩测试、数据流测试、变异测试。\n\n#### 10.4.1 逻辑覆盖测试\n\n|类型|定义|\n|:-|:-|\n|语句覆盖|程序中的每个可执行语句至少执行一次|\n|判定覆盖|程序中每个判定的取真分支和取假分支的情况至少经历一次，即判断的真假值均曾被满足|\n|条件覆盖|要使每个判断中每个条件的可能取值至少满足一次|\n|判定-条件覆盖|使得判断中每个条件的所有可能至少出现一次，并且每个判断判定结果也至少出现一次|\n|路径覆盖|测试用例覆盖程序中所有可能的路径|\n\n```C\nIF((A > 1) AND (B = 0) THEN\n    X=X/A\nIF((A = 2) OR (X > 1) THEN\n    X=X+1\n```\n\n```flow\nsta=>start: Start\ncond1=>condition: (A>1) AND (B=0)\ncond2=>condition: (A=2) OR (X>1)\nio1=>operation: X=X/A\nio2=>operation: X=X+1\n\ne=>end: End\n\nsta->cond1(yes)->io1->cond2(yes)->io2->e\nsta->cond1(no,left)->cond2(no,left)->e\n```\n\n#### 10.4.2. 边界值分析\n等价类划分和边界值分析为软件测试提供了一种设计白盒测试用例的策略。\n\n#### 10.4.3. 基本路径测试\n\n#### 10.4.4 循环语句测试\n\n#### 10.4.5 插桩测试\n\n#### 10.4.6 数据流测试\n\n#### 10.4.7 变异测试\n","slug":"软件测试复习","published":1,"updated":"2020-09-04T07:44:40.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckenyxa5i000akilcyguq9tq0","content":"<ul>\n<li><input checked disabled type=\"checkbox\"> 软件测试常用的概念，常用的分类，测试的目的，方法等</li>\n<li><input checked disabled type=\"checkbox\"> 软件测试静态测试的概念，技术，分类，执行过程，涉及的活动，测试的对象等</li>\n<li><input checked disabled type=\"checkbox\"> 软件测试的模型分类，个各模型的特点，适用场景，规划的阶段及其关系，表达的图形等</li>\n<li><input checked disabled type=\"checkbox\"> 面向对象的软件测试概念，与软件开发以及普通测试的关系等</li>\n<li><input checked disabled type=\"checkbox\"> 集成测试、系统测试的概念，划分的阶段，先后执行的顺序，输入、输出成果物等</li>\n<li><input checked disabled type=\"checkbox\"> 黑盒测试、白盒测试的概念，常用的方法，测试用例的设计过程，以及执行的过程如何实施等</li>\n<li><input checked disabled type=\"checkbox\"> 等价类划分、边界值测试、三明治集成测试等概念、用例设计、实施过程</li>\n<li><input checked disabled type=\"checkbox\"> 因果图法的概念，用例设计，执行步骤等</li>\n<li><input checked disabled type=\"checkbox\"> 基本路径测试法概念，用例设计过程，实施执行过程等（控制流图画法、环形复杂度计算、基本路径获取、用例设计及执行等）</li>\n<li><input checked disabled type=\"checkbox\"> 单元测试的概念，主要任务，使用的方法等</li>\n<li><input checked disabled type=\"checkbox\"> 软件测试与调试的区别与联系，软件缺陷的概念及其相关知识</li>\n</ul>\n<!-- ttoc -->\n\n<h2 id=\"1-软件测试\"><a href=\"#1-软件测试\" class=\"headerlink\" title=\"1. 软件测试\"></a>1. 软件测试</h2><h3 id=\"1-1-软件测试概念\"><a href=\"#1-1-软件测试概念\" class=\"headerlink\" title=\"1.1 软件测试概念\"></a>1.1 软件测试概念</h3><ol>\n<li>IEEE 在1983年将软件测试定义为“使用人工或者自动化手段运行或测定某个系统的过程，其目的在于检验他是否满足规定的需求或者是弄清预期结果与实际结果之间的差别“，该定义明确地提出了软件测试以检验是否为目标。</li>\n<li>Myers则认为软件测试“是为了发现错误而执行的程序过程”，明确提出了“寻找错误”是测试目的。</li>\n<li>从软件质量保证的角度看，软件测试是一种重要的软件质量保证活动，其动机是通过一些经济、高效的方法，捕捉软件中的错误，从而达到保证软件内在质量的目的。</li>\n</ol>\n<h3 id=\"1-2-软件测试目的\"><a href=\"#1-2-软件测试目的\" class=\"headerlink\" title=\"1.2. 软件测试目的\"></a>1.2. 软件测试目的</h3><ul>\n<li>软件测试是为了发现错误而执行程序的过程</li>\n<li>测试是为了证明程序有错，而不是证明程序无错</li>\n<li>一个好的测试用例在于他能发现至今未发现的错误</li>\n<li>一个成功的测试是发现了至今未发现的错误的测试</li>\n</ul>\n<h3 id=\"1-3-软件测试技术分类\"><a href=\"#1-3-软件测试技术分类\" class=\"headerlink\" title=\"1.3. 软件测试技术分类\"></a>1.3. 软件测试技术分类</h3><table>\n<thead>\n<tr>\n<th>分类方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>从是否需要执行被测软件的角度</td>\n<td>静态测试、动态测试</td>\n</tr>\n<tr>\n<td>从软件测试用例实际方法</td>\n<td>黑盒测试、白盒测试</td>\n</tr>\n<tr>\n<td>按照软件测试的策略和过程</td>\n<td>单元测试、集成测试、确认测试、系统测试、验收测试</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-静态测试\"><a href=\"#2-静态测试\" class=\"headerlink\" title=\"2 静态测试\"></a>2 静态测试</h2><h3 id=\"2-1-静态测试概念\"><a href=\"#2-1-静态测试概念\" class=\"headerlink\" title=\"2.1. 静态测试概念\"></a>2.1. 静态测试概念</h3><p>那些不利用计算机运行被测程序，而是通过其他手段达到测试目的的方法称作静态测试。换句话说，就是计算机并不真正运行被测试的程序，如在项目开发中存在着大量的规格说明，而说明规格是无法用计算机来运行的，所以对于这些软件的规格说明的测试就属于静态测试。</p>\n<h3 id=\"2-2-静态测试主要方法\"><a href=\"#2-2-静态测试主要方法\" class=\"headerlink\" title=\"2.2. 静态测试主要方法\"></a>2.2. 静态测试主要方法</h3><ul>\n<li><p>主要方法：<strong>代码检查、走查、桌面检查、同行评分</strong></p>\n<ul>\n<li><p><strong>代码检查</strong>: 所谓代码检查，是以组为单位阅读代码，他是一系列规则和错误检查技术的集合。对代码检查的大多数讨论都集中在规程、所要填写的表格等。这里对整个规程进行简短的概述。</p>\n<ul>\n<li>为代码检查分发材料、安排进程</li>\n<li>在代码检查中起主要作用</li>\n<li>记录发现的所有错误</li>\n<li>确保所有错误能够及时得到修正</li>\n</ul>\n</li>\n<li><p><strong>代码走查</strong>：代码走查与代码检查很相似，都是以小组我单位进行代码阅读，是一系列规程和错误检查技术的集合。代码走查的过程与代码检查大体相同，代码走查也是采用持续一至两个小时的不间断会议的形式。但是稍微所有不同，采用的错误检查技术也不一样。<br>代码走查小组有3~5人组成，其中一个人扮演类似代码检查过程中“协调人员”的角色，一个人担任秘书（负责记录所有查出的错误），还有一个人担任测试人员。建议在代码走查小组这最好包括如下人员：<br>（1）一位经验丰富的程序员；<br>（2）一位程序设计语言专家；<br>（3）一位初级程序员（可以给出新颖、不带偏见的观点）；<br>（4）将要负责程序维护的人员<br>（5）一位其他项目的人员<br>（6）一位来自该软件编程小组的程序员</p>\n</li>\n<li><p><strong>桌面检查</strong>: 可以把桌面检查看作是由个人进行的代码检查或代码走查，即一个人阅读程序，对照错误列表检查程序，使用测试数据对程序进行推演。对于大多数人而言，桌面检查的效率是相当低的。其中的一个原因就是这个过程本身不受到任何约束。另外一个重要原因就是程序员常常不能够有效地测试自己编写的程序。因此最好由其他人而非该程序的编写人员进行桌面检查（例如可以让程序员之间相互交换各自编写的程序，避免自己对自己编写的程序进行桌面检查）。但是使用桌面检查的方法进行软件测试所得到的效果无法同代码走查或代码检查相比。代码检查和代码走查小组由多人组成，能够产生相互促进的效应。如果小组会议能够营造一种良性竞争的气氛，那么工作人员就能够乐于通过发现问题来展示自己的能力。而在桌面检查中，是无法做到这一点的。简而言之，桌面检查胜过没有检查，但测试效果远远不能同代码检查和代码走查相比。</p>\n</li>\n<li><p><strong>同行评分</strong>：虽然这种人工评审方法的目的是为了程序员提供一个自我评价的手段，与程序测试并无关系（其目标不是为了发现错误）。但是因为他与代码阅读的思想有关，是一种依据程序整体质量、可维护性、可扩展性、易用行和清晰性对匿名程序进行评价的技术。因此，有必要对其进行简单的了解。大致过程如下：首先挑选一位程序员担任评分过程的管理员，管理员再挑选出大约6~20名具备相似背景的参与者（例如，不同把Java应用程序员与汇编语言系统程序员编为一组）。每个参与者都提供两者由自己编写的程序以供评审，其中的一个程序是能代表参与者自身能力的最好作品，而另一个就是参与者认为质量较差的作品。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-软件测试与调试的区别与联系\"><a href=\"#3-软件测试与调试的区别与联系\" class=\"headerlink\" title=\"3. 软件测试与调试的区别与联系\"></a>3. 软件测试与调试的区别与联系</h2><p>白盒测试与调试的最终目的都是为了让被测应用(AUT)可以正常安全地运行，都是保证软件质量过程的一个环节。那么，白盒测试与调试有哪些不同呢？</p>\n<p>从承担的任务来看，白盒测试同其他类型测试一样，他的任务是发现所开发的项目中的缺陷；但是，调试不属于测试，其任务是纠正软件中的缺陷。</p>\n<p>从最终的结果来看，白盒测试有预知的结果，不可预知的知识程序是否通过测试，并且成功测试的结果是发现错误的症状，从而引起调试的进行；而调试的结果是消除项目中的错误。</p>\n<p>从执行的过程来看，软件测试只是发现程序中有错误的迹象，没有错误定位，也不需要找到出错原因；软件调试是根据测试报告的记录，在软件测试后纠正错误的工作，包括确定错误位置和修改错误。测试是一个错误发现、改正错误、重新测试的过程；而调试是一个推理过程。</p>\n<p>从准备工作来看，测试从已知的调试开始，使用预先定义的程序；调试是以不可知的内部条件开始，做统一性调试。</p>\n<p>从执行的计划性来看，测试是有计划的并要进行测试设计；而调试则不受时间约束。</p>\n<p>从测试的执行人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。</p>\n<p>测试的执行是有规程的，而调试的执行往往要求程序员进行必要推理以至知觉的“飞跃”。</p>\n<p>从执行的人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。</p>\n<p>从所使用的工具来看，大多数白盒测试的执行和设计可由工具支持，而调试程序员能利用的工具主要是调试器。</p>\n<h2 id=\"4-软件缺陷的概念\"><a href=\"#4-软件缺陷的概念\" class=\"headerlink\" title=\"4. 软件缺陷的概念\"></a>4. 软件缺陷的概念</h2><ol>\n<li>软件没有实现产品的说明书所描述的功能。</li>\n<li>软件实现了产品说明书描述不应有的功能。</li>\n<li>软件执行了产品说明书没讲的操作。</li>\n<li>软件没有实现产品说明书没讲但应该实现的功能。</li>\n<li>从软件测试员的角度来看，软件难以理解、不易使用、运行缓慢，或者最终用户认为不对。</li>\n</ol>\n<h2 id=\"5-单元测试\"><a href=\"#5-单元测试\" class=\"headerlink\" title=\"5. 单元测试\"></a>5. 单元测试</h2><h3 id=\"5-1-单元测试定义\"><a href=\"#5-1-单元测试定义\" class=\"headerlink\" title=\"5.1. 单元测试定义\"></a>5.1. 单元测试定义</h3><p>单元测试是在软件开发过程中要进行的最低级别的测试活动，或者说是针对软件设计的最小单位—程序模块，进行正确性检查的测试工作。其目的在于发现每个程序模块内部可能存在的差错。在单元测试活动中，软件的独立单元在与程序的其他部分相隔离的情况下进行测试。</p>\n<h3 id=\"5-2-单元测试主要任务\"><a href=\"#5-2-单元测试主要任务\" class=\"headerlink\" title=\"5.2. 单元测试主要任务\"></a>5.2. 单元测试主要任务</h3><p>主要工作分为两个步骤：人工静态检查和动态执行跟踪。前者主要是保证代码算法的逻辑正确性（尽量通过人工检查发现代码的逻辑错误）、清晰性、规范性、一致性、算法高效性，并尽可能地发现程序程序中没有发现的错误。后者就是通过设计测试用例，执行待测程序来跟踪比较实际结果与预期结果来发现错误。</p>\n<pre><code>（1）正确性是指代码逻辑必须正确，能够实现预期的功能\n（2）清晰性是指代码必须简明、易懂，注释准确没有歧义；\n（3）规范性是指代码必须符合企业或部门所定义的共同规范，包括命名规则，代码风格\n（4）一致性是指代码必须在命名上（如相同功能的变量尽量采用相同的标示符）、风格上都保持统一；\n（5）高效性是指代码不但要满足以上性质，而且需要尽可能降低代码的执行时间。</code></pre><h3 id=\"5-3-单元测试使用方法\"><a href=\"#5-3-单元测试使用方法\" class=\"headerlink\" title=\"5.3. 单元测试使用方法\"></a>5.3. 单元测试使用方法</h3><p>基于代码的白盒测试</p>\n<h2 id=\"6-集成测试\"><a href=\"#6-集成测试\" class=\"headerlink\" title=\"6. 集成测试\"></a>6. 集成测试</h2><h3 id=\"6-1-集成测试定义\"><a href=\"#6-1-集成测试定义\" class=\"headerlink\" title=\"6.1 集成测试定义\"></a>6.1 集成测试定义</h3><p>根据实际情况对成语模块采用适当的集成测试策略组装起来，对系统接口以及集成后的功能进行正确性检验的测试工作。</p>\n<h3 id=\"6-2-集成测试策略\"><a href=\"#6-2-集成测试策略\" class=\"headerlink\" title=\"6.2 集成测试策略\"></a>6.2 集成测试策略</h3><h4 id=\"6-2-1-三明治集成\"><a href=\"#6-2-1-三明治集成\" class=\"headerlink\" title=\"6.2.1 三明治集成\"></a>6.2.1 三明治集成</h4><pre><code>（1）目的：综合利用自顶向下和自底向上两种集成测试策略的优点\n（2）定义：三明治集成是一种混合增值式测试策略，综合了自顶向下和自顶向上两种集成方法的优点，因此也属于基于功能分解测试。</code></pre><h3 id=\"6-3-集成测试过程\"><a href=\"#6-3-集成测试过程\" class=\"headerlink\" title=\"6.3 集成测试过程\"></a>6.3 集成测试过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title 集成测试过程</span><br><span class=\"line\">    制定集成测试计划: a,1d</span><br><span class=\"line\">    设计集成测试: 1d</span><br><span class=\"line\">    实施集成测试: 1d</span><br><span class=\"line\">    执行集成测试: 1d</span><br><span class=\"line\">    评估集成测试: 1d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-系统测试\"><a href=\"#7-系统测试\" class=\"headerlink\" title=\"7. 系统测试\"></a>7. 系统测试</h2><h3 id=\"7-1-系统测试的定义\"><a href=\"#7-1-系统测试的定义\" class=\"headerlink\" title=\"7.1. 系统测试的定义\"></a>7.1. 系统测试的定义</h3><p>将已经集成好的软件系统，作为整个计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。</p>\n<h4 id=\"7-2-集成测试过程\"><a href=\"#7-2-集成测试过程\" class=\"headerlink\" title=\"7.2. 集成测试过程\"></a>7.2. 集成测试过程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    title 系统测试过程</span><br><span class=\"line\">        制定系统测试计划: a,1d</span><br><span class=\"line\">        设计系统测试: 1d</span><br><span class=\"line\">        实施系统测试: 1d</span><br><span class=\"line\">        执行系统测试: 1d</span><br><span class=\"line\">        评估系统测试: 1d</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">## 8. 软件测试模型</span><br><span class=\"line\">### 8.1. V模型</span><br><span class=\"line\">      用户需求                      验收测试  </span><br><span class=\"line\">        需求分析和系统设计      确认测试和系统测试 </span><br><span class=\"line\">             概要设计         集成测试</span><br><span class=\"line\">                详细设计   单元测试</span><br><span class=\"line\">                       编码</span><br><span class=\"line\">                       </span><br><span class=\"line\">经典的V模型阶段可以分为</span><br><span class=\"line\"></span><br><span class=\"line\">* 单元测试</span><br><span class=\"line\">* 集成测试</span><br><span class=\"line\">* 系统测试</span><br><span class=\"line\"></span><br><span class=\"line\">**模型特点**：V模型的价值主要在于他非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试阶段和开发过程期间的对应关系:</span><br><span class=\"line\"></span><br><span class=\"line\">* 单元测试的主要目的是根据详细设计说明书来验证和确认每个单元模块是否符合预期的要求，发现编码过程中可能存在的各种错误。</span><br><span class=\"line\">* 集成测试主要目的是根据概要设计来验证和确认各个模块是否已正确集成到一起，主要是检查各单元与其他模块之间的接口上可能存在的错误。</span><br><span class=\"line\">* 系统测试主要目的是根据需求定义，验证和确认系统作为一个整体是否能够正常有效地运行，例如，判断系统是否达到了用户预期的性能。</span><br><span class=\"line\"></span><br><span class=\"line\">### 8.2. W模型</span><br><span class=\"line\">W模型中测试与开发对应关系如下：</span><br><span class=\"line\">开发：需求分析、概要设计、　　详细设计、　　编码、　　软件集成、系统集成、部署</span><br><span class=\"line\">　　　　　↑　　　　↑　　　　　　　↑　　　　　↑　　　　　　↑　　　　↑　　　↑</span><br><span class=\"line\">测试：需求评审、概要设计评审、详细设计评审、单元测试、集成测试、系统测试、验收测试</span><br><span class=\"line\"></span><br><span class=\"line\">W模型强调：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的。W模型有利于尽早地全面的发现问题。例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少总体测试时间，加快项目进度。 但W模型也存在局限性。在W模型中，需求、设计、编码等活动被视为串行的，同时，测试和开发活动也保持着一种线性的前后关系，上一阶段完全结束，才可正式开始下一个阶段工作。这样就无法支持迭代的开发模型。对于当前软件开发复杂多变的情况，W模型并不能解除测试管理面临着困惑。</span><br><span class=\"line\"></span><br><span class=\"line\">### 8.3. H模型</span><br><span class=\"line\">在H模型中，软件测试的过程活动完全独立，形成了一个完全独立的流程，贯穿于整个产品的周期，与其他流程并发进行，某个测试点准备就绪后就可以从测试准备阶段进行到测试执行阶段；软件测试可以根据被测产品的不同分层进行。</span><br><span class=\"line\"></span><br><span class=\"line\">H模型揭示了：</span><br><span class=\"line\">    （1）软件测试不仅仅指测试的执行，还包括很多其他活动。</span><br><span class=\"line\">    （2）软件测试是一个独立的流程，贯穿产品的整个开发周期，与其他流程并发进行。</span><br><span class=\"line\">    （3）软件测试要尽早准备，尽早执行。</span><br><span class=\"line\">    （4）软件测试根据被测物的不同是分层次的，不同层次的测试活动可以是按照某个次序先后进行的，但也可能是反复的。</span><br><span class=\"line\">    </span><br><span class=\"line\">## 9. 面向对象测试</span><br><span class=\"line\">### 9.1.1 面向对象测试基本概念</span><br><span class=\"line\">面向软件测试技术是新兴的软件测试技术，是专门针对使用面向对象技术开发的软件而提出的一种测试技术。其目的是为了解决传统的软件测试技术，面对面向对象技术开发的软件多少显得有些力不从心的现象。面向对象开发技术和传统的开发技术相比，新增了多态、继承、封装等特点。这些新特点使得开发出来的程序，具有更好的结构更规范的编程风格, 极大地优化了数据使用的安全性, 提高了代码的重用率。由此可见，它们是面向对象开发技术产生巨大吸引力的重要因素。然而，另一方面也影响了软件测试的方法和内容；增加了软件测试的难度；带来了传统软件设计技术所不存在的错误；或者使得传统软件测试中的重点不再显得突出；或者使原来测试经验认为和实践证明的次要方面成为了主要问题。</span><br><span class=\"line\"></span><br><span class=\"line\">## 10. 黑白盒测试</span><br><span class=\"line\">### 10.1. 黑盒测试概念</span><br><span class=\"line\">黑盒测试也称作功能测试和行为测试，主要是根据功能需求来测试程序是否按照预期工作。黑盒测试的目的是尽量发现代码所表现的外部行为的错误，主要有以下几类：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）功能不正确或不完整；</span><br><span class=\"line\">    （2）接口错误；</span><br><span class=\"line\">    （3）接口所使用的数据结构错误；</span><br><span class=\"line\">    （4）行为或性能错误；</span><br><span class=\"line\">    （5）初始化和终止错误。</span><br><span class=\"line\">    </span><br><span class=\"line\">### 10.2. 黑盒测试用例设计</span><br><span class=\"line\">常用的黑盒测试用例设计方法主要有以下几中：等价类划分法、边界值分析法、因果图法、决策表法和错误推测法等方法。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.1. 等价类划分法</span><br><span class=\"line\">等价类划分法是一种重要的、常用的黑盒测试方法，它将不能穷举的测试过程进行合理分类，从而保证设计出来的测试用例具有完整性和代表性。</span><br><span class=\"line\"></span><br><span class=\"line\">等价类划分法：是把所有可能的输入数据，即程序的输入域划分为若干部分（子集），然后从每一个子集中选取少数具有代表的数据作为测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">等价类：指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，它们具有等价特性，即每一类的代表性数据在测试中的作用都等价于这一类中的其他数据。这样，对于表特征该类的数据输入将能代表这个子集合的输入。因此，可以合理地假定：测试某等价类的代表值等效于对于这类其他值的测试。</span><br><span class=\"line\"></span><br><span class=\"line\">“保险公司绩保费费率的程序”例题见《软件测试技术》(第二版) **P91**。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.2. 边界值分析法</span><br><span class=\"line\">边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为等价类划分方法的补充，在这个情况下，其测试用例来自等价类的边界。</span><br><span class=\"line\"></span><br><span class=\"line\">边界值分析使用与等价类划分方法相同的划分，只是边界值分析假定错误更多地存在于划分的边界上，因此在等价类的边界上以及两侧的情况设计测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">例题：</span><br><span class=\"line\">$$有二元函数 f(x,y), 其中x\\in[1,12],y\\in[1,31];则采用边界值分析法设计的测试用例是:$$</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;&lt;1,15&gt;;&lt;2,15&gt;;&lt;11,15&gt;;&lt;11,15&gt;;&lt;12,15&gt;;&lt;6,15&gt;;&lt;6,1&gt;;&lt;6,2&gt;;&lt;6,30&gt;;&lt;6,31&gt;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"> 推论：对于一个含有n个变量的程序，采用边界值分析法测试程序会产生 4n+1 个测试用例.</span><br><span class=\"line\">            </span><br><span class=\"line\">#### 10.2.3. 因果图法</span><br><span class=\"line\">一些程序的功能可以用判定表（或称决策表）的形式来表示，并根据输入条件的组合情况规定相应的操作。因果图法就是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。</span><br><span class=\"line\"></span><br><span class=\"line\">采用因果图法设计测试用例的步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）列出模块的原因（输入条件）和效果（动作），且给每个原因和效果一个标识符；</span><br><span class=\"line\">    （2）列出原因——效果图；</span><br><span class=\"line\">    （3）由于语法或环境的限制，有些原因和结果的组合情况是不可能出现的。为表明这些特定情况，在因果图上使用特殊的符号标明约束条件；</span><br><span class=\"line\">    （4）把因果图转换成判定表；</span><br><span class=\"line\">    （5）把判定表的每一列写成一个测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">“因果图法” 例题见《软件测试技术》(第二版) **P100**。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.4. 决策表法</span><br><span class=\"line\">在所有的黑盒测试中，机遇决策表（也称判定表）的测试是最为严格、最具有逻辑性的测试方法。</span><br><span class=\"line\"></span><br><span class=\"line\">构造决策表的 4 个步骤：</span><br><span class=\"line\">    </span><br><span class=\"line\">    （1）确定规则的个数，有 n 个条件的决策表有 2^n 个规则（每个条件取真、假值）；</span><br><span class=\"line\">    （2）列出所有的条件桩和动作桩</span><br><span class=\"line\">    （3）填入动作项，得到初始决策表；</span><br><span class=\"line\">    （4）简化决策表，合并相似规则。</span><br><span class=\"line\">    </span><br><span class=\"line\">若表中有两条以上规则具有相同的动作，并且在条件项之间存在极为相似的关系，便可以合并。合并后的条件项用符号——表示，说明执行的动作与该条件的取值无关，称为无关条件。</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;三角形问题决策表&quot; 例题见《软件测试技术》（第二版）**P102**</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.5. 错误推测法</span><br><span class=\"line\">错误推测法的概念：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性地设计测试用例的方法。</span><br><span class=\"line\"></span><br><span class=\"line\">错误推测的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">### 10.3. 白盒测试概念</span><br><span class=\"line\">白盒测试就是一种用于检查代码是否按照预期工作的验证技术，又称结构测试、逻辑驱动测试或基于程序的测试。白盒测试的主要特点就是正对被测程序的源代码，测试者可能完全不考虑程序的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">### 10.4. 白盒测试用例设计</span><br><span class=\"line\">常用的白盒测试用例设计方法主要有以下几中：逻辑覆盖测试、边界值测试、基本路径测试、循环语句测试、程序插桩测试、数据流测试、变异测试。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.4.1 逻辑覆盖测试</span><br><span class=\"line\"></span><br><span class=\"line\">|类型|定义|</span><br><span class=\"line\">|:-|:-|</span><br><span class=\"line\">|语句覆盖|程序中的每个可执行语句至少执行一次|</span><br><span class=\"line\">|判定覆盖|程序中每个判定的取真分支和取假分支的情况至少经历一次，即判断的真假值均曾被满足|</span><br><span class=\"line\">|条件覆盖|要使每个判断中每个条件的可能取值至少满足一次|</span><br><span class=\"line\">|判定-条件覆盖|使得判断中每个条件的所有可能至少出现一次，并且每个判断判定结果也至少出现一次|</span><br><span class=\"line\">|路径覆盖|测试用例覆盖程序中所有可能的路径|</span><br><span class=\"line\"></span><br><span class=\"line\">```C</span><br><span class=\"line\">IF((A &gt; 1) AND (B = 0) THEN</span><br><span class=\"line\">    X=X/A</span><br><span class=\"line\">IF((A = 2) OR (X &gt; 1) THEN</span><br><span class=\"line\">    X=X+1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sta=&gt;start: Start</span><br><span class=\"line\">cond1=&gt;condition: (A&gt;1) AND (B=0)</span><br><span class=\"line\">cond2=&gt;condition: (A=2) OR (X&gt;1)</span><br><span class=\"line\">io1=&gt;operation: X=X/A</span><br><span class=\"line\">io2=&gt;operation: X=X+1</span><br><span class=\"line\"></span><br><span class=\"line\">e=&gt;end: End</span><br><span class=\"line\"></span><br><span class=\"line\">sta-&gt;cond1(yes)-&gt;io1-&gt;cond2(yes)-&gt;io2-&gt;e</span><br><span class=\"line\">sta-&gt;cond1(no,left)-&gt;cond2(no,left)-&gt;e</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-4-2-边界值分析\"><a href=\"#10-4-2-边界值分析\" class=\"headerlink\" title=\"10.4.2. 边界值分析\"></a>10.4.2. 边界值分析</h4><p>等价类划分和边界值分析为软件测试提供了一种设计白盒测试用例的策略。</p>\n<h4 id=\"10-4-3-基本路径测试\"><a href=\"#10-4-3-基本路径测试\" class=\"headerlink\" title=\"10.4.3. 基本路径测试\"></a>10.4.3. 基本路径测试</h4><h4 id=\"10-4-4-循环语句测试\"><a href=\"#10-4-4-循环语句测试\" class=\"headerlink\" title=\"10.4.4 循环语句测试\"></a>10.4.4 循环语句测试</h4><h4 id=\"10-4-5-插桩测试\"><a href=\"#10-4-5-插桩测试\" class=\"headerlink\" title=\"10.4.5 插桩测试\"></a>10.4.5 插桩测试</h4><h4 id=\"10-4-6-数据流测试\"><a href=\"#10-4-6-数据流测试\" class=\"headerlink\" title=\"10.4.6 数据流测试\"></a>10.4.6 数据流测试</h4><h4 id=\"10-4-7-变异测试\"><a href=\"#10-4-7-变异测试\" class=\"headerlink\" title=\"10.4.7 变异测试\"></a>10.4.7 变异测试</h4>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><input checked disabled type=\"checkbox\"> 软件测试常用的概念，常用的分类，测试的目的，方法等</li>\n<li><input checked disabled type=\"checkbox\"> 软件测试静态测试的概念，技术，分类，执行过程，涉及的活动，测试的对象等</li>\n<li><input checked disabled type=\"checkbox\"> 软件测试的模型分类，个各模型的特点，适用场景，规划的阶段及其关系，表达的图形等</li>\n<li><input checked disabled type=\"checkbox\"> 面向对象的软件测试概念，与软件开发以及普通测试的关系等</li>\n<li><input checked disabled type=\"checkbox\"> 集成测试、系统测试的概念，划分的阶段，先后执行的顺序，输入、输出成果物等</li>\n<li><input checked disabled type=\"checkbox\"> 黑盒测试、白盒测试的概念，常用的方法，测试用例的设计过程，以及执行的过程如何实施等</li>\n<li><input checked disabled type=\"checkbox\"> 等价类划分、边界值测试、三明治集成测试等概念、用例设计、实施过程</li>\n<li><input checked disabled type=\"checkbox\"> 因果图法的概念，用例设计，执行步骤等</li>\n<li><input checked disabled type=\"checkbox\"> 基本路径测试法概念，用例设计过程，实施执行过程等（控制流图画法、环形复杂度计算、基本路径获取、用例设计及执行等）</li>\n<li><input checked disabled type=\"checkbox\"> 单元测试的概念，主要任务，使用的方法等</li>\n<li><input checked disabled type=\"checkbox\"> 软件测试与调试的区别与联系，软件缺陷的概念及其相关知识</li>\n</ul>\n<!-- ttoc -->\n\n<h2 id=\"1-软件测试\"><a href=\"#1-软件测试\" class=\"headerlink\" title=\"1. 软件测试\"></a>1. 软件测试</h2><h3 id=\"1-1-软件测试概念\"><a href=\"#1-1-软件测试概念\" class=\"headerlink\" title=\"1.1 软件测试概念\"></a>1.1 软件测试概念</h3><ol>\n<li>IEEE 在1983年将软件测试定义为“使用人工或者自动化手段运行或测定某个系统的过程，其目的在于检验他是否满足规定的需求或者是弄清预期结果与实际结果之间的差别“，该定义明确地提出了软件测试以检验是否为目标。</li>\n<li>Myers则认为软件测试“是为了发现错误而执行的程序过程”，明确提出了“寻找错误”是测试目的。</li>\n<li>从软件质量保证的角度看，软件测试是一种重要的软件质量保证活动，其动机是通过一些经济、高效的方法，捕捉软件中的错误，从而达到保证软件内在质量的目的。</li>\n</ol>\n<h3 id=\"1-2-软件测试目的\"><a href=\"#1-2-软件测试目的\" class=\"headerlink\" title=\"1.2. 软件测试目的\"></a>1.2. 软件测试目的</h3><ul>\n<li>软件测试是为了发现错误而执行程序的过程</li>\n<li>测试是为了证明程序有错，而不是证明程序无错</li>\n<li>一个好的测试用例在于他能发现至今未发现的错误</li>\n<li>一个成功的测试是发现了至今未发现的错误的测试</li>\n</ul>\n<h3 id=\"1-3-软件测试技术分类\"><a href=\"#1-3-软件测试技术分类\" class=\"headerlink\" title=\"1.3. 软件测试技术分类\"></a>1.3. 软件测试技术分类</h3><table>\n<thead>\n<tr>\n<th>分类方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>从是否需要执行被测软件的角度</td>\n<td>静态测试、动态测试</td>\n</tr>\n<tr>\n<td>从软件测试用例实际方法</td>\n<td>黑盒测试、白盒测试</td>\n</tr>\n<tr>\n<td>按照软件测试的策略和过程</td>\n<td>单元测试、集成测试、确认测试、系统测试、验收测试</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-静态测试\"><a href=\"#2-静态测试\" class=\"headerlink\" title=\"2 静态测试\"></a>2 静态测试</h2><h3 id=\"2-1-静态测试概念\"><a href=\"#2-1-静态测试概念\" class=\"headerlink\" title=\"2.1. 静态测试概念\"></a>2.1. 静态测试概念</h3><p>那些不利用计算机运行被测程序，而是通过其他手段达到测试目的的方法称作静态测试。换句话说，就是计算机并不真正运行被测试的程序，如在项目开发中存在着大量的规格说明，而说明规格是无法用计算机来运行的，所以对于这些软件的规格说明的测试就属于静态测试。</p>\n<h3 id=\"2-2-静态测试主要方法\"><a href=\"#2-2-静态测试主要方法\" class=\"headerlink\" title=\"2.2. 静态测试主要方法\"></a>2.2. 静态测试主要方法</h3><ul>\n<li><p>主要方法：<strong>代码检查、走查、桌面检查、同行评分</strong></p>\n<ul>\n<li><p><strong>代码检查</strong>: 所谓代码检查，是以组为单位阅读代码，他是一系列规则和错误检查技术的集合。对代码检查的大多数讨论都集中在规程、所要填写的表格等。这里对整个规程进行简短的概述。</p>\n<ul>\n<li>为代码检查分发材料、安排进程</li>\n<li>在代码检查中起主要作用</li>\n<li>记录发现的所有错误</li>\n<li>确保所有错误能够及时得到修正</li>\n</ul>\n</li>\n<li><p><strong>代码走查</strong>：代码走查与代码检查很相似，都是以小组我单位进行代码阅读，是一系列规程和错误检查技术的集合。代码走查的过程与代码检查大体相同，代码走查也是采用持续一至两个小时的不间断会议的形式。但是稍微所有不同，采用的错误检查技术也不一样。<br>代码走查小组有3~5人组成，其中一个人扮演类似代码检查过程中“协调人员”的角色，一个人担任秘书（负责记录所有查出的错误），还有一个人担任测试人员。建议在代码走查小组这最好包括如下人员：<br>（1）一位经验丰富的程序员；<br>（2）一位程序设计语言专家；<br>（3）一位初级程序员（可以给出新颖、不带偏见的观点）；<br>（4）将要负责程序维护的人员<br>（5）一位其他项目的人员<br>（6）一位来自该软件编程小组的程序员</p>\n</li>\n<li><p><strong>桌面检查</strong>: 可以把桌面检查看作是由个人进行的代码检查或代码走查，即一个人阅读程序，对照错误列表检查程序，使用测试数据对程序进行推演。对于大多数人而言，桌面检查的效率是相当低的。其中的一个原因就是这个过程本身不受到任何约束。另外一个重要原因就是程序员常常不能够有效地测试自己编写的程序。因此最好由其他人而非该程序的编写人员进行桌面检查（例如可以让程序员之间相互交换各自编写的程序，避免自己对自己编写的程序进行桌面检查）。但是使用桌面检查的方法进行软件测试所得到的效果无法同代码走查或代码检查相比。代码检查和代码走查小组由多人组成，能够产生相互促进的效应。如果小组会议能够营造一种良性竞争的气氛，那么工作人员就能够乐于通过发现问题来展示自己的能力。而在桌面检查中，是无法做到这一点的。简而言之，桌面检查胜过没有检查，但测试效果远远不能同代码检查和代码走查相比。</p>\n</li>\n<li><p><strong>同行评分</strong>：虽然这种人工评审方法的目的是为了程序员提供一个自我评价的手段，与程序测试并无关系（其目标不是为了发现错误）。但是因为他与代码阅读的思想有关，是一种依据程序整体质量、可维护性、可扩展性、易用行和清晰性对匿名程序进行评价的技术。因此，有必要对其进行简单的了解。大致过程如下：首先挑选一位程序员担任评分过程的管理员，管理员再挑选出大约6~20名具备相似背景的参与者（例如，不同把Java应用程序员与汇编语言系统程序员编为一组）。每个参与者都提供两者由自己编写的程序以供评审，其中的一个程序是能代表参与者自身能力的最好作品，而另一个就是参与者认为质量较差的作品。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-软件测试与调试的区别与联系\"><a href=\"#3-软件测试与调试的区别与联系\" class=\"headerlink\" title=\"3. 软件测试与调试的区别与联系\"></a>3. 软件测试与调试的区别与联系</h2><p>白盒测试与调试的最终目的都是为了让被测应用(AUT)可以正常安全地运行，都是保证软件质量过程的一个环节。那么，白盒测试与调试有哪些不同呢？</p>\n<p>从承担的任务来看，白盒测试同其他类型测试一样，他的任务是发现所开发的项目中的缺陷；但是，调试不属于测试，其任务是纠正软件中的缺陷。</p>\n<p>从最终的结果来看，白盒测试有预知的结果，不可预知的知识程序是否通过测试，并且成功测试的结果是发现错误的症状，从而引起调试的进行；而调试的结果是消除项目中的错误。</p>\n<p>从执行的过程来看，软件测试只是发现程序中有错误的迹象，没有错误定位，也不需要找到出错原因；软件调试是根据测试报告的记录，在软件测试后纠正错误的工作，包括确定错误位置和修改错误。测试是一个错误发现、改正错误、重新测试的过程；而调试是一个推理过程。</p>\n<p>从准备工作来看，测试从已知的调试开始，使用预先定义的程序；调试是以不可知的内部条件开始，做统一性调试。</p>\n<p>从执行的计划性来看，测试是有计划的并要进行测试设计；而调试则不受时间约束。</p>\n<p>从测试的执行人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。</p>\n<p>测试的执行是有规程的，而调试的执行往往要求程序员进行必要推理以至知觉的“飞跃”。</p>\n<p>从执行的人员来看，测试经常是由独立的测试组在不了解软件设计的条件下完成的，而调试必须由程序员来完成。</p>\n<p>从所使用的工具来看，大多数白盒测试的执行和设计可由工具支持，而调试程序员能利用的工具主要是调试器。</p>\n<h2 id=\"4-软件缺陷的概念\"><a href=\"#4-软件缺陷的概念\" class=\"headerlink\" title=\"4. 软件缺陷的概念\"></a>4. 软件缺陷的概念</h2><ol>\n<li>软件没有实现产品的说明书所描述的功能。</li>\n<li>软件实现了产品说明书描述不应有的功能。</li>\n<li>软件执行了产品说明书没讲的操作。</li>\n<li>软件没有实现产品说明书没讲但应该实现的功能。</li>\n<li>从软件测试员的角度来看，软件难以理解、不易使用、运行缓慢，或者最终用户认为不对。</li>\n</ol>\n<h2 id=\"5-单元测试\"><a href=\"#5-单元测试\" class=\"headerlink\" title=\"5. 单元测试\"></a>5. 单元测试</h2><h3 id=\"5-1-单元测试定义\"><a href=\"#5-1-单元测试定义\" class=\"headerlink\" title=\"5.1. 单元测试定义\"></a>5.1. 单元测试定义</h3><p>单元测试是在软件开发过程中要进行的最低级别的测试活动，或者说是针对软件设计的最小单位—程序模块，进行正确性检查的测试工作。其目的在于发现每个程序模块内部可能存在的差错。在单元测试活动中，软件的独立单元在与程序的其他部分相隔离的情况下进行测试。</p>\n<h3 id=\"5-2-单元测试主要任务\"><a href=\"#5-2-单元测试主要任务\" class=\"headerlink\" title=\"5.2. 单元测试主要任务\"></a>5.2. 单元测试主要任务</h3><p>主要工作分为两个步骤：人工静态检查和动态执行跟踪。前者主要是保证代码算法的逻辑正确性（尽量通过人工检查发现代码的逻辑错误）、清晰性、规范性、一致性、算法高效性，并尽可能地发现程序程序中没有发现的错误。后者就是通过设计测试用例，执行待测程序来跟踪比较实际结果与预期结果来发现错误。</p>\n<pre><code>（1）正确性是指代码逻辑必须正确，能够实现预期的功能\n（2）清晰性是指代码必须简明、易懂，注释准确没有歧义；\n（3）规范性是指代码必须符合企业或部门所定义的共同规范，包括命名规则，代码风格\n（4）一致性是指代码必须在命名上（如相同功能的变量尽量采用相同的标示符）、风格上都保持统一；\n（5）高效性是指代码不但要满足以上性质，而且需要尽可能降低代码的执行时间。</code></pre><h3 id=\"5-3-单元测试使用方法\"><a href=\"#5-3-单元测试使用方法\" class=\"headerlink\" title=\"5.3. 单元测试使用方法\"></a>5.3. 单元测试使用方法</h3><p>基于代码的白盒测试</p>\n<h2 id=\"6-集成测试\"><a href=\"#6-集成测试\" class=\"headerlink\" title=\"6. 集成测试\"></a>6. 集成测试</h2><h3 id=\"6-1-集成测试定义\"><a href=\"#6-1-集成测试定义\" class=\"headerlink\" title=\"6.1 集成测试定义\"></a>6.1 集成测试定义</h3><p>根据实际情况对成语模块采用适当的集成测试策略组装起来，对系统接口以及集成后的功能进行正确性检验的测试工作。</p>\n<h3 id=\"6-2-集成测试策略\"><a href=\"#6-2-集成测试策略\" class=\"headerlink\" title=\"6.2 集成测试策略\"></a>6.2 集成测试策略</h3><h4 id=\"6-2-1-三明治集成\"><a href=\"#6-2-1-三明治集成\" class=\"headerlink\" title=\"6.2.1 三明治集成\"></a>6.2.1 三明治集成</h4><pre><code>（1）目的：综合利用自顶向下和自底向上两种集成测试策略的优点\n（2）定义：三明治集成是一种混合增值式测试策略，综合了自顶向下和自顶向上两种集成方法的优点，因此也属于基于功能分解测试。</code></pre><h3 id=\"6-3-集成测试过程\"><a href=\"#6-3-集成测试过程\" class=\"headerlink\" title=\"6.3 集成测试过程\"></a>6.3 集成测试过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title 集成测试过程</span><br><span class=\"line\">    制定集成测试计划: a,1d</span><br><span class=\"line\">    设计集成测试: 1d</span><br><span class=\"line\">    实施集成测试: 1d</span><br><span class=\"line\">    执行集成测试: 1d</span><br><span class=\"line\">    评估集成测试: 1d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-系统测试\"><a href=\"#7-系统测试\" class=\"headerlink\" title=\"7. 系统测试\"></a>7. 系统测试</h2><h3 id=\"7-1-系统测试的定义\"><a href=\"#7-1-系统测试的定义\" class=\"headerlink\" title=\"7.1. 系统测试的定义\"></a>7.1. 系统测试的定义</h3><p>将已经集成好的软件系统，作为整个计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。</p>\n<h4 id=\"7-2-集成测试过程\"><a href=\"#7-2-集成测试过程\" class=\"headerlink\" title=\"7.2. 集成测试过程\"></a>7.2. 集成测试过程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    title 系统测试过程</span><br><span class=\"line\">        制定系统测试计划: a,1d</span><br><span class=\"line\">        设计系统测试: 1d</span><br><span class=\"line\">        实施系统测试: 1d</span><br><span class=\"line\">        执行系统测试: 1d</span><br><span class=\"line\">        评估系统测试: 1d</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">## 8. 软件测试模型</span><br><span class=\"line\">### 8.1. V模型</span><br><span class=\"line\">      用户需求                      验收测试  </span><br><span class=\"line\">        需求分析和系统设计      确认测试和系统测试 </span><br><span class=\"line\">             概要设计         集成测试</span><br><span class=\"line\">                详细设计   单元测试</span><br><span class=\"line\">                       编码</span><br><span class=\"line\">                       </span><br><span class=\"line\">经典的V模型阶段可以分为</span><br><span class=\"line\"></span><br><span class=\"line\">* 单元测试</span><br><span class=\"line\">* 集成测试</span><br><span class=\"line\">* 系统测试</span><br><span class=\"line\"></span><br><span class=\"line\">**模型特点**：V模型的价值主要在于他非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试阶段和开发过程期间的对应关系:</span><br><span class=\"line\"></span><br><span class=\"line\">* 单元测试的主要目的是根据详细设计说明书来验证和确认每个单元模块是否符合预期的要求，发现编码过程中可能存在的各种错误。</span><br><span class=\"line\">* 集成测试主要目的是根据概要设计来验证和确认各个模块是否已正确集成到一起，主要是检查各单元与其他模块之间的接口上可能存在的错误。</span><br><span class=\"line\">* 系统测试主要目的是根据需求定义，验证和确认系统作为一个整体是否能够正常有效地运行，例如，判断系统是否达到了用户预期的性能。</span><br><span class=\"line\"></span><br><span class=\"line\">### 8.2. W模型</span><br><span class=\"line\">W模型中测试与开发对应关系如下：</span><br><span class=\"line\">开发：需求分析、概要设计、　　详细设计、　　编码、　　软件集成、系统集成、部署</span><br><span class=\"line\">　　　　　↑　　　　↑　　　　　　　↑　　　　　↑　　　　　　↑　　　　↑　　　↑</span><br><span class=\"line\">测试：需求评审、概要设计评审、详细设计评审、单元测试、集成测试、系统测试、验收测试</span><br><span class=\"line\"></span><br><span class=\"line\">W模型强调：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的。W模型有利于尽早地全面的发现问题。例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少总体测试时间，加快项目进度。 但W模型也存在局限性。在W模型中，需求、设计、编码等活动被视为串行的，同时，测试和开发活动也保持着一种线性的前后关系，上一阶段完全结束，才可正式开始下一个阶段工作。这样就无法支持迭代的开发模型。对于当前软件开发复杂多变的情况，W模型并不能解除测试管理面临着困惑。</span><br><span class=\"line\"></span><br><span class=\"line\">### 8.3. H模型</span><br><span class=\"line\">在H模型中，软件测试的过程活动完全独立，形成了一个完全独立的流程，贯穿于整个产品的周期，与其他流程并发进行，某个测试点准备就绪后就可以从测试准备阶段进行到测试执行阶段；软件测试可以根据被测产品的不同分层进行。</span><br><span class=\"line\"></span><br><span class=\"line\">H模型揭示了：</span><br><span class=\"line\">    （1）软件测试不仅仅指测试的执行，还包括很多其他活动。</span><br><span class=\"line\">    （2）软件测试是一个独立的流程，贯穿产品的整个开发周期，与其他流程并发进行。</span><br><span class=\"line\">    （3）软件测试要尽早准备，尽早执行。</span><br><span class=\"line\">    （4）软件测试根据被测物的不同是分层次的，不同层次的测试活动可以是按照某个次序先后进行的，但也可能是反复的。</span><br><span class=\"line\">    </span><br><span class=\"line\">## 9. 面向对象测试</span><br><span class=\"line\">### 9.1.1 面向对象测试基本概念</span><br><span class=\"line\">面向软件测试技术是新兴的软件测试技术，是专门针对使用面向对象技术开发的软件而提出的一种测试技术。其目的是为了解决传统的软件测试技术，面对面向对象技术开发的软件多少显得有些力不从心的现象。面向对象开发技术和传统的开发技术相比，新增了多态、继承、封装等特点。这些新特点使得开发出来的程序，具有更好的结构更规范的编程风格, 极大地优化了数据使用的安全性, 提高了代码的重用率。由此可见，它们是面向对象开发技术产生巨大吸引力的重要因素。然而，另一方面也影响了软件测试的方法和内容；增加了软件测试的难度；带来了传统软件设计技术所不存在的错误；或者使得传统软件测试中的重点不再显得突出；或者使原来测试经验认为和实践证明的次要方面成为了主要问题。</span><br><span class=\"line\"></span><br><span class=\"line\">## 10. 黑白盒测试</span><br><span class=\"line\">### 10.1. 黑盒测试概念</span><br><span class=\"line\">黑盒测试也称作功能测试和行为测试，主要是根据功能需求来测试程序是否按照预期工作。黑盒测试的目的是尽量发现代码所表现的外部行为的错误，主要有以下几类：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）功能不正确或不完整；</span><br><span class=\"line\">    （2）接口错误；</span><br><span class=\"line\">    （3）接口所使用的数据结构错误；</span><br><span class=\"line\">    （4）行为或性能错误；</span><br><span class=\"line\">    （5）初始化和终止错误。</span><br><span class=\"line\">    </span><br><span class=\"line\">### 10.2. 黑盒测试用例设计</span><br><span class=\"line\">常用的黑盒测试用例设计方法主要有以下几中：等价类划分法、边界值分析法、因果图法、决策表法和错误推测法等方法。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.1. 等价类划分法</span><br><span class=\"line\">等价类划分法是一种重要的、常用的黑盒测试方法，它将不能穷举的测试过程进行合理分类，从而保证设计出来的测试用例具有完整性和代表性。</span><br><span class=\"line\"></span><br><span class=\"line\">等价类划分法：是把所有可能的输入数据，即程序的输入域划分为若干部分（子集），然后从每一个子集中选取少数具有代表的数据作为测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">等价类：指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，它们具有等价特性，即每一类的代表性数据在测试中的作用都等价于这一类中的其他数据。这样，对于表特征该类的数据输入将能代表这个子集合的输入。因此，可以合理地假定：测试某等价类的代表值等效于对于这类其他值的测试。</span><br><span class=\"line\"></span><br><span class=\"line\">“保险公司绩保费费率的程序”例题见《软件测试技术》(第二版) **P91**。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.2. 边界值分析法</span><br><span class=\"line\">边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为等价类划分方法的补充，在这个情况下，其测试用例来自等价类的边界。</span><br><span class=\"line\"></span><br><span class=\"line\">边界值分析使用与等价类划分方法相同的划分，只是边界值分析假定错误更多地存在于划分的边界上，因此在等价类的边界上以及两侧的情况设计测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">例题：</span><br><span class=\"line\">$$有二元函数 f(x,y), 其中x\\in[1,12],y\\in[1,31];则采用边界值分析法设计的测试用例是:$$</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;&lt;1,15&gt;;&lt;2,15&gt;;&lt;11,15&gt;;&lt;11,15&gt;;&lt;12,15&gt;;&lt;6,15&gt;;&lt;6,1&gt;;&lt;6,2&gt;;&lt;6,30&gt;;&lt;6,31&gt;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"> 推论：对于一个含有n个变量的程序，采用边界值分析法测试程序会产生 4n+1 个测试用例.</span><br><span class=\"line\">            </span><br><span class=\"line\">#### 10.2.3. 因果图法</span><br><span class=\"line\">一些程序的功能可以用判定表（或称决策表）的形式来表示，并根据输入条件的组合情况规定相应的操作。因果图法就是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。</span><br><span class=\"line\"></span><br><span class=\"line\">采用因果图法设计测试用例的步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）列出模块的原因（输入条件）和效果（动作），且给每个原因和效果一个标识符；</span><br><span class=\"line\">    （2）列出原因——效果图；</span><br><span class=\"line\">    （3）由于语法或环境的限制，有些原因和结果的组合情况是不可能出现的。为表明这些特定情况，在因果图上使用特殊的符号标明约束条件；</span><br><span class=\"line\">    （4）把因果图转换成判定表；</span><br><span class=\"line\">    （5）把判定表的每一列写成一个测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">“因果图法” 例题见《软件测试技术》(第二版) **P100**。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.4. 决策表法</span><br><span class=\"line\">在所有的黑盒测试中，机遇决策表（也称判定表）的测试是最为严格、最具有逻辑性的测试方法。</span><br><span class=\"line\"></span><br><span class=\"line\">构造决策表的 4 个步骤：</span><br><span class=\"line\">    </span><br><span class=\"line\">    （1）确定规则的个数，有 n 个条件的决策表有 2^n 个规则（每个条件取真、假值）；</span><br><span class=\"line\">    （2）列出所有的条件桩和动作桩</span><br><span class=\"line\">    （3）填入动作项，得到初始决策表；</span><br><span class=\"line\">    （4）简化决策表，合并相似规则。</span><br><span class=\"line\">    </span><br><span class=\"line\">若表中有两条以上规则具有相同的动作，并且在条件项之间存在极为相似的关系，便可以合并。合并后的条件项用符号——表示，说明执行的动作与该条件的取值无关，称为无关条件。</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;三角形问题决策表&quot; 例题见《软件测试技术》（第二版）**P102**</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.2.5. 错误推测法</span><br><span class=\"line\">错误推测法的概念：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性地设计测试用例的方法。</span><br><span class=\"line\"></span><br><span class=\"line\">错误推测的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。</span><br><span class=\"line\"></span><br><span class=\"line\">### 10.3. 白盒测试概念</span><br><span class=\"line\">白盒测试就是一种用于检查代码是否按照预期工作的验证技术，又称结构测试、逻辑驱动测试或基于程序的测试。白盒测试的主要特点就是正对被测程序的源代码，测试者可能完全不考虑程序的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">### 10.4. 白盒测试用例设计</span><br><span class=\"line\">常用的白盒测试用例设计方法主要有以下几中：逻辑覆盖测试、边界值测试、基本路径测试、循环语句测试、程序插桩测试、数据流测试、变异测试。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 10.4.1 逻辑覆盖测试</span><br><span class=\"line\"></span><br><span class=\"line\">|类型|定义|</span><br><span class=\"line\">|:-|:-|</span><br><span class=\"line\">|语句覆盖|程序中的每个可执行语句至少执行一次|</span><br><span class=\"line\">|判定覆盖|程序中每个判定的取真分支和取假分支的情况至少经历一次，即判断的真假值均曾被满足|</span><br><span class=\"line\">|条件覆盖|要使每个判断中每个条件的可能取值至少满足一次|</span><br><span class=\"line\">|判定-条件覆盖|使得判断中每个条件的所有可能至少出现一次，并且每个判断判定结果也至少出现一次|</span><br><span class=\"line\">|路径覆盖|测试用例覆盖程序中所有可能的路径|</span><br><span class=\"line\"></span><br><span class=\"line\">```C</span><br><span class=\"line\">IF((A &gt; 1) AND (B = 0) THEN</span><br><span class=\"line\">    X=X/A</span><br><span class=\"line\">IF((A = 2) OR (X &gt; 1) THEN</span><br><span class=\"line\">    X=X+1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sta=&gt;start: Start</span><br><span class=\"line\">cond1=&gt;condition: (A&gt;1) AND (B=0)</span><br><span class=\"line\">cond2=&gt;condition: (A=2) OR (X&gt;1)</span><br><span class=\"line\">io1=&gt;operation: X=X/A</span><br><span class=\"line\">io2=&gt;operation: X=X+1</span><br><span class=\"line\"></span><br><span class=\"line\">e=&gt;end: End</span><br><span class=\"line\"></span><br><span class=\"line\">sta-&gt;cond1(yes)-&gt;io1-&gt;cond2(yes)-&gt;io2-&gt;e</span><br><span class=\"line\">sta-&gt;cond1(no,left)-&gt;cond2(no,left)-&gt;e</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-4-2-边界值分析\"><a href=\"#10-4-2-边界值分析\" class=\"headerlink\" title=\"10.4.2. 边界值分析\"></a>10.4.2. 边界值分析</h4><p>等价类划分和边界值分析为软件测试提供了一种设计白盒测试用例的策略。</p>\n<h4 id=\"10-4-3-基本路径测试\"><a href=\"#10-4-3-基本路径测试\" class=\"headerlink\" title=\"10.4.3. 基本路径测试\"></a>10.4.3. 基本路径测试</h4><h4 id=\"10-4-4-循环语句测试\"><a href=\"#10-4-4-循环语句测试\" class=\"headerlink\" title=\"10.4.4 循环语句测试\"></a>10.4.4 循环语句测试</h4><h4 id=\"10-4-5-插桩测试\"><a href=\"#10-4-5-插桩测试\" class=\"headerlink\" title=\"10.4.5 插桩测试\"></a>10.4.5 插桩测试</h4><h4 id=\"10-4-6-数据流测试\"><a href=\"#10-4-6-数据流测试\" class=\"headerlink\" title=\"10.4.6 数据流测试\"></a>10.4.6 数据流测试</h4><h4 id=\"10-4-7-变异测试\"><a href=\"#10-4-7-变异测试\" class=\"headerlink\" title=\"10.4.7 变异测试\"></a>10.4.7 变异测试</h4>"},{"title":"路由器通过锐捷认证","date":"2018-12-18T16:00:00.000Z","comments":1,"_content":"\n# 为什么一般路由器不能用于校园联通网络认证？\n我们家里常用的路由器一般只支持 [PPPoE协议](https://baike.baidu.com/item/PPPOE/139247?fr=aladdin) , 而我们校园的联通网用的是锐捷认证的方式，这种拨号方式比较特殊所以一般路由器并不支持。[mentohust](https://baike.baidu.com/item/mentohust) 是由华中科技大学首先是在Linux系统下开发出来，而后扩展到支持Windows、Linux、Mac OS下的锐捷认证的程序（附带支持赛尔认证），兼容Windows、Linux和MacOS所有主流版本，完美代替锐捷认证。\n现在市面上的智能路由器的官方固件里一般都集成了这种认证方式，一些路由三方固件也支持这种认证方式，比如 `openwrt` , `ddwrt` , `Pandora` , `梅林` 这些。路由器里面装的就是 `Linux` 系统，就利用 `mentohust` 来实现锐捷认证。所以校园联通网还是可以使用路由器的。这里我讲述一种我自己使用的方式，用 ***极路由1S*** 来上网。至于再刷三方固件的来运行 `mentohust` 的方式也是可以的，只不过这里不做描述。\n\n# 具体操作\n\n## 准备材料\n> * 硬件部分\n> 淘宝上或者咸鱼，转转上去买一个 ***极路由1S*** 买新的一般在100左右，二手的50左右。建议大家买二手，因为路由器不容易坏，一般不用担心无法正常使用这个问题。\n> * 软件部分 \n> \n\n| 软件名 | 功能说明 |\n| ------ | -------- |\n| Putty | ssh连接 |\n| Winscp | 文件传输 |\n| Notepad++ | 编辑器 |\n| Mentohusttool | 抓包 |\n\n[**软件包下载连接**](https://github.com/Caffreyfans/Public-Source/releases/download/1.0/hiwifi-1S.zip)\n所需要的软件全部打包到压缩文件里，解压安装即可使用。软件只能在 `windows 64位` 系统上安装，如果你是其他类型的系统，请自行下载同名软件。软件下载好之后请安装到电脑上，以备使用，这些软件都是我从官方下载打包的，如果不放心请到官方下载同名软件。\n## 申请极路由开发者权限\n当我们拿到路由器并且上电之后，我们首先需要做的就是申请开发者权限。因为这个操作需要官方那边给你授权，这个授权过程会需要几天。申请开发者权限的主要目的是让极路由打开 `ssh` 服务。当我们打开了路由器的 `ssh` 服务就可以通过 `Putty` 远程登陆到路由器操作了。\n\n1. 首先让路由器联网，联网方式可以用无线中继的方式或者用别人连好网的路由器牵根线到自己的路由器![已连接网络图](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/3.png) \n\n2. 点开智能插件，选择插件市场![已连接网络图](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/1.png) \n\n3. 在全部插件里面选择开发者模式，点击安装![已连接网络图](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/2.png) \n\n\n## 抓包与修改包文件\n我们需要用到 `Mentohusttool` 抓包，然后用 `Notepad++` 修改包文件,把自己联通的网线连接到自己的电脑上\n\n1. 打开 `MentoHUSTTool-RP.exe` 后选择开始，弹出来的文件选择框里，从你的 `成都信息工程大学校园网认证客户端` 的安装包文件里选中 `8021.exe` 这个应用程序，然后进入抓包就绪态(客户端默认安装位置为 `C:\\Program Files\\Ruijie Networks\\Ruijie Supplicant` ,自定义位置请自行找到)\n![MentoHUSTool-RP.exe](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/5.png)\n\n2. 然后在 `成都信息工程大学校园网认证客户端` 里填好自己的账号密码，点击连接抓包程序会自己抓到包\n![MentoHUSTool-RP.exe](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/4.png)\n\n3. 将抓到的包命名成 `1` 保存在桌面上\n这里需要注意这个 `1.mpf` 文件名不能修改成其他的，因为后面的脚本里设置的就是这个名字，修改成其他的会出错。\n![MentoHUSTool-RP.exe](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/7.png)\n\n4. 将得到的 `1.mpf` 文件用 `Notepad++` 打开，在 `Notepad++` 里选择插件管理\n![Notepad](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/6.png)\n\n5. 在插件管理器里找到 `HEX-Editor` 点击 `Install` 安装，安装成功后重启 `Notepad++`\n![Notepad](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/9.png)\n\n6. 在插件里选择 `Hex-Editor` 找到 `View in HEX` 选项并点击，之后你会看到打开文件内容有所变化\n![Notepad](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/10.png)\n\n7. 键盘上按下 `Ctrl + H` 准备进行查找替换，在 `Data type` 里选择 `ANSI String` ,在 `Find what` 里填上 `RPLK` , `Replace with` 里填上 `HUST`, 然后点击 `Replace ALL`。修改好之后保存文件,然后就可以关闭前面打开过的程序了\n![Notepad++](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/11.png)\n\n\n## 上传文件并执行 ***Shell*** 命令\n用一根网线连接的你的电脑,或者连接路由器的 `WiFi` ,待你路由器打开了 `开发者模式` 后就可以执行这步操作了\n\n1. 打开 `Winscp` ,在文件协议里选择 `SCP` ,主机名填上 `hiwifi.com` ,端口号填上 `1022` ,用户名填上 `root` ,密码填上你路由器登录密码(默认为 `admin` )\n\n![Winscp](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/12.png)\n\n2. 然后直接将你桌面上修改好的 `1.mpf` 文件直接拖到路由器的 `/root` 文件夹下，待文件传送好了就可以关闭 `Winscp` 了\n![Winscp](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/13.png)\n\n3. 打开 `Putty` , `Host Name` 里面填上 `hiwifi.com` , `Port` 里面填上 `1022` ,然后点击 `Open` 选项，然后在弹出的新窗口的 `login as` 里填上 `root` 之后按下键盘的 `回车键`,然后输入你路由器的登录,密码跟 `Winscp` 里填的是一样的，填密码的时候回没有回显，填好密码之后按下 `回车键` ,成功登录到路由器后台\n\n4. 执行 `shell` 命令,将下列命令复制并粘贴到刚刚打开的路由器命令行里(在putty里点击鼠标右键粘贴),然后按下回车,等脚本执行完了就可以关闭 `Putty` 了\n``` shell\ncd /tmp &&curl -k -o shadow.sh https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/scripts/shadow.sh && sh shadow.sh && rm shadow.sh\n```\n![Putty](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/15.png)\n\n## 复制MAC与开启锐捷认证\n执行完这步就能成功让路由器联网了\n\n1. 在电脑上按下 `Win + r` ,然后在里面输入 `cmd`\n![CMD](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/21.png)\n\n2. 输入 `ipconfig -all` 查询电脑的 `MAC` 地址\n![MAC](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/22.png)\n\n3. 在路由器管理界面的首页中点击 `MAC地址克隆`,在里面选择 `手动输入` ,填上刚才获得的 `MAC` 地址，其中 `-` 用 `:` 代替,然后点击保存\n![MAC](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/23.png)\n\n4. 在路由器的 `互联网` 里打开 `锐捷认证` ,填上图示信息,点击 `8021x.exe` 后面的选择文件并在 `成都信息工程大学校园网认证客户端` 的安装文件中选取同名文件上传, `SuConfig.dat` 、`W32N55.dll` 执行相同操作,然后点击 `提交`\n![锐捷认证](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/17.png)\n\n5. 点击 `查看日志` 当出现如图信息表明认证成功！\n![锐捷认证](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/18.png)\n\n\n## 彩蛋\n\n\n1. 路由器管理界面有个 `安全上网` 这其实是 `SS` 客户端只要你填上你的节点信息,并开启就可以让路由器下的所有设备实现科学上网\n![安全上网](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/20.png)\n\n2. 成功开启 `SS` 之后\n![安全上网](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/19.png)\n","source":"_posts/路由器通过锐捷认证.md","raw":"---\ntitle: 路由器通过锐捷认证\ndate: 2018-12-19\ncategories: 路由器\ncomments: true\n---\n\n# 为什么一般路由器不能用于校园联通网络认证？\n我们家里常用的路由器一般只支持 [PPPoE协议](https://baike.baidu.com/item/PPPOE/139247?fr=aladdin) , 而我们校园的联通网用的是锐捷认证的方式，这种拨号方式比较特殊所以一般路由器并不支持。[mentohust](https://baike.baidu.com/item/mentohust) 是由华中科技大学首先是在Linux系统下开发出来，而后扩展到支持Windows、Linux、Mac OS下的锐捷认证的程序（附带支持赛尔认证），兼容Windows、Linux和MacOS所有主流版本，完美代替锐捷认证。\n现在市面上的智能路由器的官方固件里一般都集成了这种认证方式，一些路由三方固件也支持这种认证方式，比如 `openwrt` , `ddwrt` , `Pandora` , `梅林` 这些。路由器里面装的就是 `Linux` 系统，就利用 `mentohust` 来实现锐捷认证。所以校园联通网还是可以使用路由器的。这里我讲述一种我自己使用的方式，用 ***极路由1S*** 来上网。至于再刷三方固件的来运行 `mentohust` 的方式也是可以的，只不过这里不做描述。\n\n# 具体操作\n\n## 准备材料\n> * 硬件部分\n> 淘宝上或者咸鱼，转转上去买一个 ***极路由1S*** 买新的一般在100左右，二手的50左右。建议大家买二手，因为路由器不容易坏，一般不用担心无法正常使用这个问题。\n> * 软件部分 \n> \n\n| 软件名 | 功能说明 |\n| ------ | -------- |\n| Putty | ssh连接 |\n| Winscp | 文件传输 |\n| Notepad++ | 编辑器 |\n| Mentohusttool | 抓包 |\n\n[**软件包下载连接**](https://github.com/Caffreyfans/Public-Source/releases/download/1.0/hiwifi-1S.zip)\n所需要的软件全部打包到压缩文件里，解压安装即可使用。软件只能在 `windows 64位` 系统上安装，如果你是其他类型的系统，请自行下载同名软件。软件下载好之后请安装到电脑上，以备使用，这些软件都是我从官方下载打包的，如果不放心请到官方下载同名软件。\n## 申请极路由开发者权限\n当我们拿到路由器并且上电之后，我们首先需要做的就是申请开发者权限。因为这个操作需要官方那边给你授权，这个授权过程会需要几天。申请开发者权限的主要目的是让极路由打开 `ssh` 服务。当我们打开了路由器的 `ssh` 服务就可以通过 `Putty` 远程登陆到路由器操作了。\n\n1. 首先让路由器联网，联网方式可以用无线中继的方式或者用别人连好网的路由器牵根线到自己的路由器![已连接网络图](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/3.png) \n\n2. 点开智能插件，选择插件市场![已连接网络图](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/1.png) \n\n3. 在全部插件里面选择开发者模式，点击安装![已连接网络图](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/2.png) \n\n\n## 抓包与修改包文件\n我们需要用到 `Mentohusttool` 抓包，然后用 `Notepad++` 修改包文件,把自己联通的网线连接到自己的电脑上\n\n1. 打开 `MentoHUSTTool-RP.exe` 后选择开始，弹出来的文件选择框里，从你的 `成都信息工程大学校园网认证客户端` 的安装包文件里选中 `8021.exe` 这个应用程序，然后进入抓包就绪态(客户端默认安装位置为 `C:\\Program Files\\Ruijie Networks\\Ruijie Supplicant` ,自定义位置请自行找到)\n![MentoHUSTool-RP.exe](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/5.png)\n\n2. 然后在 `成都信息工程大学校园网认证客户端` 里填好自己的账号密码，点击连接抓包程序会自己抓到包\n![MentoHUSTool-RP.exe](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/4.png)\n\n3. 将抓到的包命名成 `1` 保存在桌面上\n这里需要注意这个 `1.mpf` 文件名不能修改成其他的，因为后面的脚本里设置的就是这个名字，修改成其他的会出错。\n![MentoHUSTool-RP.exe](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/7.png)\n\n4. 将得到的 `1.mpf` 文件用 `Notepad++` 打开，在 `Notepad++` 里选择插件管理\n![Notepad](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/6.png)\n\n5. 在插件管理器里找到 `HEX-Editor` 点击 `Install` 安装，安装成功后重启 `Notepad++`\n![Notepad](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/9.png)\n\n6. 在插件里选择 `Hex-Editor` 找到 `View in HEX` 选项并点击，之后你会看到打开文件内容有所变化\n![Notepad](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/10.png)\n\n7. 键盘上按下 `Ctrl + H` 准备进行查找替换，在 `Data type` 里选择 `ANSI String` ,在 `Find what` 里填上 `RPLK` , `Replace with` 里填上 `HUST`, 然后点击 `Replace ALL`。修改好之后保存文件,然后就可以关闭前面打开过的程序了\n![Notepad++](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/11.png)\n\n\n## 上传文件并执行 ***Shell*** 命令\n用一根网线连接的你的电脑,或者连接路由器的 `WiFi` ,待你路由器打开了 `开发者模式` 后就可以执行这步操作了\n\n1. 打开 `Winscp` ,在文件协议里选择 `SCP` ,主机名填上 `hiwifi.com` ,端口号填上 `1022` ,用户名填上 `root` ,密码填上你路由器登录密码(默认为 `admin` )\n\n![Winscp](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/12.png)\n\n2. 然后直接将你桌面上修改好的 `1.mpf` 文件直接拖到路由器的 `/root` 文件夹下，待文件传送好了就可以关闭 `Winscp` 了\n![Winscp](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/13.png)\n\n3. 打开 `Putty` , `Host Name` 里面填上 `hiwifi.com` , `Port` 里面填上 `1022` ,然后点击 `Open` 选项，然后在弹出的新窗口的 `login as` 里填上 `root` 之后按下键盘的 `回车键`,然后输入你路由器的登录,密码跟 `Winscp` 里填的是一样的，填密码的时候回没有回显，填好密码之后按下 `回车键` ,成功登录到路由器后台\n\n4. 执行 `shell` 命令,将下列命令复制并粘贴到刚刚打开的路由器命令行里(在putty里点击鼠标右键粘贴),然后按下回车,等脚本执行完了就可以关闭 `Putty` 了\n``` shell\ncd /tmp &&curl -k -o shadow.sh https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/scripts/shadow.sh && sh shadow.sh && rm shadow.sh\n```\n![Putty](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/15.png)\n\n## 复制MAC与开启锐捷认证\n执行完这步就能成功让路由器联网了\n\n1. 在电脑上按下 `Win + r` ,然后在里面输入 `cmd`\n![CMD](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/21.png)\n\n2. 输入 `ipconfig -all` 查询电脑的 `MAC` 地址\n![MAC](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/22.png)\n\n3. 在路由器管理界面的首页中点击 `MAC地址克隆`,在里面选择 `手动输入` ,填上刚才获得的 `MAC` 地址，其中 `-` 用 `:` 代替,然后点击保存\n![MAC](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/23.png)\n\n4. 在路由器的 `互联网` 里打开 `锐捷认证` ,填上图示信息,点击 `8021x.exe` 后面的选择文件并在 `成都信息工程大学校园网认证客户端` 的安装文件中选取同名文件上传, `SuConfig.dat` 、`W32N55.dll` 执行相同操作,然后点击 `提交`\n![锐捷认证](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/17.png)\n\n5. 点击 `查看日志` 当出现如图信息表明认证成功！\n![锐捷认证](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/18.png)\n\n\n## 彩蛋\n\n\n1. 路由器管理界面有个 `安全上网` 这其实是 `SS` 客户端只要你填上你的节点信息,并开启就可以让路由器下的所有设备实现科学上网\n![安全上网](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/20.png)\n\n2. 成功开启 `SS` 之后\n![安全上网](https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/19.png)\n","slug":"路由器通过锐捷认证","published":1,"updated":"2020-09-04T07:44:40.921Z","layout":"post","photos":[],"link":"","_id":"ckenyxa5j000bkilcv5plcora","content":"<h1 id=\"为什么一般路由器不能用于校园联通网络认证？\"><a href=\"#为什么一般路由器不能用于校园联通网络认证？\" class=\"headerlink\" title=\"为什么一般路由器不能用于校园联通网络认证？\"></a>为什么一般路由器不能用于校园联通网络认证？</h1><p>我们家里常用的路由器一般只支持 <a href=\"https://baike.baidu.com/item/PPPOE/139247?fr=aladdin\" target=\"_blank\" rel=\"noopener\">PPPoE协议</a> , 而我们校园的联通网用的是锐捷认证的方式，这种拨号方式比较特殊所以一般路由器并不支持。<a href=\"https://baike.baidu.com/item/mentohust\" target=\"_blank\" rel=\"noopener\">mentohust</a> 是由华中科技大学首先是在Linux系统下开发出来，而后扩展到支持Windows、Linux、Mac OS下的锐捷认证的程序（附带支持赛尔认证），兼容Windows、Linux和MacOS所有主流版本，完美代替锐捷认证。<br>现在市面上的智能路由器的官方固件里一般都集成了这种认证方式，一些路由三方固件也支持这种认证方式，比如 <code>openwrt</code> , <code>ddwrt</code> , <code>Pandora</code> , <code>梅林</code> 这些。路由器里面装的就是 <code>Linux</code> 系统，就利用 <code>mentohust</code> 来实现锐捷认证。所以校园联通网还是可以使用路由器的。这里我讲述一种我自己使用的方式，用 <strong><em>极路由1S</em></strong> 来上网。至于再刷三方固件的来运行 <code>mentohust</code> 的方式也是可以的，只不过这里不做描述。</p>\n<h1 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h1><h2 id=\"准备材料\"><a href=\"#准备材料\" class=\"headerlink\" title=\"准备材料\"></a>准备材料</h2><blockquote>\n<ul>\n<li>硬件部分<br>淘宝上或者咸鱼，转转上去买一个 <strong><em>极路由1S</em></strong> 买新的一般在100左右，二手的50左右。建议大家买二手，因为路由器不容易坏，一般不用担心无法正常使用这个问题。</li>\n<li>软件部分 </li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>软件名</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Putty</td>\n<td>ssh连接</td>\n</tr>\n<tr>\n<td>Winscp</td>\n<td>文件传输</td>\n</tr>\n<tr>\n<td>Notepad++</td>\n<td>编辑器</td>\n</tr>\n<tr>\n<td>Mentohusttool</td>\n<td>抓包</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://github.com/Caffreyfans/Public-Source/releases/download/1.0/hiwifi-1S.zip\" target=\"_blank\" rel=\"noopener\"><strong>软件包下载连接</strong></a><br>所需要的软件全部打包到压缩文件里，解压安装即可使用。软件只能在 <code>windows 64位</code> 系统上安装，如果你是其他类型的系统，请自行下载同名软件。软件下载好之后请安装到电脑上，以备使用，这些软件都是我从官方下载打包的，如果不放心请到官方下载同名软件。</p>\n<h2 id=\"申请极路由开发者权限\"><a href=\"#申请极路由开发者权限\" class=\"headerlink\" title=\"申请极路由开发者权限\"></a>申请极路由开发者权限</h2><p>当我们拿到路由器并且上电之后，我们首先需要做的就是申请开发者权限。因为这个操作需要官方那边给你授权，这个授权过程会需要几天。申请开发者权限的主要目的是让极路由打开 <code>ssh</code> 服务。当我们打开了路由器的 <code>ssh</code> 服务就可以通过 <code>Putty</code> 远程登陆到路由器操作了。</p>\n<ol>\n<li><p>首先让路由器联网，联网方式可以用无线中继的方式或者用别人连好网的路由器牵根线到自己的路由器<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/3.png\" alt=\"已连接网络图\"> </p>\n</li>\n<li><p>点开智能插件，选择插件市场<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/1.png\" alt=\"已连接网络图\"> </p>\n</li>\n<li><p>在全部插件里面选择开发者模式，点击安装<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/2.png\" alt=\"已连接网络图\"> </p>\n</li>\n</ol>\n<h2 id=\"抓包与修改包文件\"><a href=\"#抓包与修改包文件\" class=\"headerlink\" title=\"抓包与修改包文件\"></a>抓包与修改包文件</h2><p>我们需要用到 <code>Mentohusttool</code> 抓包，然后用 <code>Notepad++</code> 修改包文件,把自己联通的网线连接到自己的电脑上</p>\n<ol>\n<li><p>打开 <code>MentoHUSTTool-RP.exe</code> 后选择开始，弹出来的文件选择框里，从你的 <code>成都信息工程大学校园网认证客户端</code> 的安装包文件里选中 <code>8021.exe</code> 这个应用程序，然后进入抓包就绪态(客户端默认安装位置为 <code>C:\\Program Files\\Ruijie Networks\\Ruijie Supplicant</code> ,自定义位置请自行找到)<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/5.png\" alt=\"MentoHUSTool-RP.exe\"></p>\n</li>\n<li><p>然后在 <code>成都信息工程大学校园网认证客户端</code> 里填好自己的账号密码，点击连接抓包程序会自己抓到包<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/4.png\" alt=\"MentoHUSTool-RP.exe\"></p>\n</li>\n<li><p>将抓到的包命名成 <code>1</code> 保存在桌面上<br>这里需要注意这个 <code>1.mpf</code> 文件名不能修改成其他的，因为后面的脚本里设置的就是这个名字，修改成其他的会出错。<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/7.png\" alt=\"MentoHUSTool-RP.exe\"></p>\n</li>\n<li><p>将得到的 <code>1.mpf</code> 文件用 <code>Notepad++</code> 打开，在 <code>Notepad++</code> 里选择插件管理<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/6.png\" alt=\"Notepad\"></p>\n</li>\n<li><p>在插件管理器里找到 <code>HEX-Editor</code> 点击 <code>Install</code> 安装，安装成功后重启 <code>Notepad++</code><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/9.png\" alt=\"Notepad\"></p>\n</li>\n<li><p>在插件里选择 <code>Hex-Editor</code> 找到 <code>View in HEX</code> 选项并点击，之后你会看到打开文件内容有所变化<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/10.png\" alt=\"Notepad\"></p>\n</li>\n<li><p>键盘上按下 <code>Ctrl + H</code> 准备进行查找替换，在 <code>Data type</code> 里选择 <code>ANSI String</code> ,在 <code>Find what</code> 里填上 <code>RPLK</code> , <code>Replace with</code> 里填上 <code>HUST</code>, 然后点击 <code>Replace ALL</code>。修改好之后保存文件,然后就可以关闭前面打开过的程序了<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/11.png\" alt=\"Notepad++\"></p>\n</li>\n</ol>\n<h2 id=\"上传文件并执行-Shell-命令\"><a href=\"#上传文件并执行-Shell-命令\" class=\"headerlink\" title=\"上传文件并执行 Shell 命令\"></a>上传文件并执行 <strong><em>Shell</em></strong> 命令</h2><p>用一根网线连接的你的电脑,或者连接路由器的 <code>WiFi</code> ,待你路由器打开了 <code>开发者模式</code> 后就可以执行这步操作了</p>\n<ol>\n<li>打开 <code>Winscp</code> ,在文件协议里选择 <code>SCP</code> ,主机名填上 <code>hiwifi.com</code> ,端口号填上 <code>1022</code> ,用户名填上 <code>root</code> ,密码填上你路由器登录密码(默认为 <code>admin</code> )</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/12.png\" alt=\"Winscp\"></p>\n<ol start=\"2\">\n<li><p>然后直接将你桌面上修改好的 <code>1.mpf</code> 文件直接拖到路由器的 <code>/root</code> 文件夹下，待文件传送好了就可以关闭 <code>Winscp</code> 了<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/13.png\" alt=\"Winscp\"></p>\n</li>\n<li><p>打开 <code>Putty</code> , <code>Host Name</code> 里面填上 <code>hiwifi.com</code> , <code>Port</code> 里面填上 <code>1022</code> ,然后点击 <code>Open</code> 选项，然后在弹出的新窗口的 <code>login as</code> 里填上 <code>root</code> 之后按下键盘的 <code>回车键</code>,然后输入你路由器的登录,密码跟 <code>Winscp</code> 里填的是一样的，填密码的时候回没有回显，填好密码之后按下 <code>回车键</code> ,成功登录到路由器后台</p>\n</li>\n<li><p>执行 <code>shell</code> 命令,将下列命令复制并粘贴到刚刚打开的路由器命令行里(在putty里点击鼠标右键粘贴),然后按下回车,等脚本执行完了就可以关闭 <code>Putty</code> 了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /tmp &amp;&amp;curl -k -o shadow.sh https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/scripts/shadow.sh &amp;&amp; sh shadow.sh &amp;&amp; rm shadow.sh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/15.png\" alt=\"Putty\"></p>\n<h2 id=\"复制MAC与开启锐捷认证\"><a href=\"#复制MAC与开启锐捷认证\" class=\"headerlink\" title=\"复制MAC与开启锐捷认证\"></a>复制MAC与开启锐捷认证</h2><p>执行完这步就能成功让路由器联网了</p>\n<ol>\n<li><p>在电脑上按下 <code>Win + r</code> ,然后在里面输入 <code>cmd</code><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/21.png\" alt=\"CMD\"></p>\n</li>\n<li><p>输入 <code>ipconfig -all</code> 查询电脑的 <code>MAC</code> 地址<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/22.png\" alt=\"MAC\"></p>\n</li>\n<li><p>在路由器管理界面的首页中点击 <code>MAC地址克隆</code>,在里面选择 <code>手动输入</code> ,填上刚才获得的 <code>MAC</code> 地址，其中 <code>-</code> 用 <code>:</code> 代替,然后点击保存<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/23.png\" alt=\"MAC\"></p>\n</li>\n<li><p>在路由器的 <code>互联网</code> 里打开 <code>锐捷认证</code> ,填上图示信息,点击 <code>8021x.exe</code> 后面的选择文件并在 <code>成都信息工程大学校园网认证客户端</code> 的安装文件中选取同名文件上传, <code>SuConfig.dat</code> 、<code>W32N55.dll</code> 执行相同操作,然后点击 <code>提交</code><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/17.png\" alt=\"锐捷认证\"></p>\n</li>\n<li><p>点击 <code>查看日志</code> 当出现如图信息表明认证成功！<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/18.png\" alt=\"锐捷认证\"></p>\n</li>\n</ol>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><ol>\n<li><p>路由器管理界面有个 <code>安全上网</code> 这其实是 <code>SS</code> 客户端只要你填上你的节点信息,并开启就可以让路由器下的所有设备实现科学上网<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/20.png\" alt=\"安全上网\"></p>\n</li>\n<li><p>成功开启 <code>SS</code> 之后<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/19.png\" alt=\"安全上网\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么一般路由器不能用于校园联通网络认证？\"><a href=\"#为什么一般路由器不能用于校园联通网络认证？\" class=\"headerlink\" title=\"为什么一般路由器不能用于校园联通网络认证？\"></a>为什么一般路由器不能用于校园联通网络认证？</h1><p>我们家里常用的路由器一般只支持 <a href=\"https://baike.baidu.com/item/PPPOE/139247?fr=aladdin\" target=\"_blank\" rel=\"noopener\">PPPoE协议</a> , 而我们校园的联通网用的是锐捷认证的方式，这种拨号方式比较特殊所以一般路由器并不支持。<a href=\"https://baike.baidu.com/item/mentohust\" target=\"_blank\" rel=\"noopener\">mentohust</a> 是由华中科技大学首先是在Linux系统下开发出来，而后扩展到支持Windows、Linux、Mac OS下的锐捷认证的程序（附带支持赛尔认证），兼容Windows、Linux和MacOS所有主流版本，完美代替锐捷认证。<br>现在市面上的智能路由器的官方固件里一般都集成了这种认证方式，一些路由三方固件也支持这种认证方式，比如 <code>openwrt</code> , <code>ddwrt</code> , <code>Pandora</code> , <code>梅林</code> 这些。路由器里面装的就是 <code>Linux</code> 系统，就利用 <code>mentohust</code> 来实现锐捷认证。所以校园联通网还是可以使用路由器的。这里我讲述一种我自己使用的方式，用 <strong><em>极路由1S</em></strong> 来上网。至于再刷三方固件的来运行 <code>mentohust</code> 的方式也是可以的，只不过这里不做描述。</p>\n<h1 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h1><h2 id=\"准备材料\"><a href=\"#准备材料\" class=\"headerlink\" title=\"准备材料\"></a>准备材料</h2><blockquote>\n<ul>\n<li>硬件部分<br>淘宝上或者咸鱼，转转上去买一个 <strong><em>极路由1S</em></strong> 买新的一般在100左右，二手的50左右。建议大家买二手，因为路由器不容易坏，一般不用担心无法正常使用这个问题。</li>\n<li>软件部分 </li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>软件名</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Putty</td>\n<td>ssh连接</td>\n</tr>\n<tr>\n<td>Winscp</td>\n<td>文件传输</td>\n</tr>\n<tr>\n<td>Notepad++</td>\n<td>编辑器</td>\n</tr>\n<tr>\n<td>Mentohusttool</td>\n<td>抓包</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://github.com/Caffreyfans/Public-Source/releases/download/1.0/hiwifi-1S.zip\" target=\"_blank\" rel=\"noopener\"><strong>软件包下载连接</strong></a><br>所需要的软件全部打包到压缩文件里，解压安装即可使用。软件只能在 <code>windows 64位</code> 系统上安装，如果你是其他类型的系统，请自行下载同名软件。软件下载好之后请安装到电脑上，以备使用，这些软件都是我从官方下载打包的，如果不放心请到官方下载同名软件。</p>\n<h2 id=\"申请极路由开发者权限\"><a href=\"#申请极路由开发者权限\" class=\"headerlink\" title=\"申请极路由开发者权限\"></a>申请极路由开发者权限</h2><p>当我们拿到路由器并且上电之后，我们首先需要做的就是申请开发者权限。因为这个操作需要官方那边给你授权，这个授权过程会需要几天。申请开发者权限的主要目的是让极路由打开 <code>ssh</code> 服务。当我们打开了路由器的 <code>ssh</code> 服务就可以通过 <code>Putty</code> 远程登陆到路由器操作了。</p>\n<ol>\n<li><p>首先让路由器联网，联网方式可以用无线中继的方式或者用别人连好网的路由器牵根线到自己的路由器<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/3.png\" alt=\"已连接网络图\"> </p>\n</li>\n<li><p>点开智能插件，选择插件市场<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/1.png\" alt=\"已连接网络图\"> </p>\n</li>\n<li><p>在全部插件里面选择开发者模式，点击安装<img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/2.png\" alt=\"已连接网络图\"> </p>\n</li>\n</ol>\n<h2 id=\"抓包与修改包文件\"><a href=\"#抓包与修改包文件\" class=\"headerlink\" title=\"抓包与修改包文件\"></a>抓包与修改包文件</h2><p>我们需要用到 <code>Mentohusttool</code> 抓包，然后用 <code>Notepad++</code> 修改包文件,把自己联通的网线连接到自己的电脑上</p>\n<ol>\n<li><p>打开 <code>MentoHUSTTool-RP.exe</code> 后选择开始，弹出来的文件选择框里，从你的 <code>成都信息工程大学校园网认证客户端</code> 的安装包文件里选中 <code>8021.exe</code> 这个应用程序，然后进入抓包就绪态(客户端默认安装位置为 <code>C:\\Program Files\\Ruijie Networks\\Ruijie Supplicant</code> ,自定义位置请自行找到)<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/5.png\" alt=\"MentoHUSTool-RP.exe\"></p>\n</li>\n<li><p>然后在 <code>成都信息工程大学校园网认证客户端</code> 里填好自己的账号密码，点击连接抓包程序会自己抓到包<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/4.png\" alt=\"MentoHUSTool-RP.exe\"></p>\n</li>\n<li><p>将抓到的包命名成 <code>1</code> 保存在桌面上<br>这里需要注意这个 <code>1.mpf</code> 文件名不能修改成其他的，因为后面的脚本里设置的就是这个名字，修改成其他的会出错。<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/7.png\" alt=\"MentoHUSTool-RP.exe\"></p>\n</li>\n<li><p>将得到的 <code>1.mpf</code> 文件用 <code>Notepad++</code> 打开，在 <code>Notepad++</code> 里选择插件管理<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/6.png\" alt=\"Notepad\"></p>\n</li>\n<li><p>在插件管理器里找到 <code>HEX-Editor</code> 点击 <code>Install</code> 安装，安装成功后重启 <code>Notepad++</code><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/9.png\" alt=\"Notepad\"></p>\n</li>\n<li><p>在插件里选择 <code>Hex-Editor</code> 找到 <code>View in HEX</code> 选项并点击，之后你会看到打开文件内容有所变化<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/10.png\" alt=\"Notepad\"></p>\n</li>\n<li><p>键盘上按下 <code>Ctrl + H</code> 准备进行查找替换，在 <code>Data type</code> 里选择 <code>ANSI String</code> ,在 <code>Find what</code> 里填上 <code>RPLK</code> , <code>Replace with</code> 里填上 <code>HUST</code>, 然后点击 <code>Replace ALL</code>。修改好之后保存文件,然后就可以关闭前面打开过的程序了<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/11.png\" alt=\"Notepad++\"></p>\n</li>\n</ol>\n<h2 id=\"上传文件并执行-Shell-命令\"><a href=\"#上传文件并执行-Shell-命令\" class=\"headerlink\" title=\"上传文件并执行 Shell 命令\"></a>上传文件并执行 <strong><em>Shell</em></strong> 命令</h2><p>用一根网线连接的你的电脑,或者连接路由器的 <code>WiFi</code> ,待你路由器打开了 <code>开发者模式</code> 后就可以执行这步操作了</p>\n<ol>\n<li>打开 <code>Winscp</code> ,在文件协议里选择 <code>SCP</code> ,主机名填上 <code>hiwifi.com</code> ,端口号填上 <code>1022</code> ,用户名填上 <code>root</code> ,密码填上你路由器登录密码(默认为 <code>admin</code> )</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/12.png\" alt=\"Winscp\"></p>\n<ol start=\"2\">\n<li><p>然后直接将你桌面上修改好的 <code>1.mpf</code> 文件直接拖到路由器的 <code>/root</code> 文件夹下，待文件传送好了就可以关闭 <code>Winscp</code> 了<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/13.png\" alt=\"Winscp\"></p>\n</li>\n<li><p>打开 <code>Putty</code> , <code>Host Name</code> 里面填上 <code>hiwifi.com</code> , <code>Port</code> 里面填上 <code>1022</code> ,然后点击 <code>Open</code> 选项，然后在弹出的新窗口的 <code>login as</code> 里填上 <code>root</code> 之后按下键盘的 <code>回车键</code>,然后输入你路由器的登录,密码跟 <code>Winscp</code> 里填的是一样的，填密码的时候回没有回显，填好密码之后按下 <code>回车键</code> ,成功登录到路由器后台</p>\n</li>\n<li><p>执行 <code>shell</code> 命令,将下列命令复制并粘贴到刚刚打开的路由器命令行里(在putty里点击鼠标右键粘贴),然后按下回车,等脚本执行完了就可以关闭 <code>Putty</code> 了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /tmp &amp;&amp;curl -k -o shadow.sh https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/scripts/shadow.sh &amp;&amp; sh shadow.sh &amp;&amp; rm shadow.sh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/15.png\" alt=\"Putty\"></p>\n<h2 id=\"复制MAC与开启锐捷认证\"><a href=\"#复制MAC与开启锐捷认证\" class=\"headerlink\" title=\"复制MAC与开启锐捷认证\"></a>复制MAC与开启锐捷认证</h2><p>执行完这步就能成功让路由器联网了</p>\n<ol>\n<li><p>在电脑上按下 <code>Win + r</code> ,然后在里面输入 <code>cmd</code><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/21.png\" alt=\"CMD\"></p>\n</li>\n<li><p>输入 <code>ipconfig -all</code> 查询电脑的 <code>MAC</code> 地址<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/22.png\" alt=\"MAC\"></p>\n</li>\n<li><p>在路由器管理界面的首页中点击 <code>MAC地址克隆</code>,在里面选择 <code>手动输入</code> ,填上刚才获得的 <code>MAC</code> 地址，其中 <code>-</code> 用 <code>:</code> 代替,然后点击保存<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/23.png\" alt=\"MAC\"></p>\n</li>\n<li><p>在路由器的 <code>互联网</code> 里打开 <code>锐捷认证</code> ,填上图示信息,点击 <code>8021x.exe</code> 后面的选择文件并在 <code>成都信息工程大学校园网认证客户端</code> 的安装文件中选取同名文件上传, <code>SuConfig.dat</code> 、<code>W32N55.dll</code> 执行相同操作,然后点击 <code>提交</code><br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/17.png\" alt=\"锐捷认证\"></p>\n</li>\n<li><p>点击 <code>查看日志</code> 当出现如图信息表明认证成功！<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/18.png\" alt=\"锐捷认证\"></p>\n</li>\n</ol>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><ol>\n<li><p>路由器管理界面有个 <code>安全上网</code> 这其实是 <code>SS</code> 客户端只要你填上你的节点信息,并开启就可以让路由器下的所有设备实现科学上网<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/20.png\" alt=\"安全上网\"></p>\n</li>\n<li><p>成功开启 <code>SS</code> 之后<br><img src=\"https://raw.githubusercontent.com/Caffreyfans/Public-Source/master/pictures/router%20pictures/19.png\" alt=\"安全上网\"></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckenyxa570000kilctg3s2paz","category_id":"ckenyxa5c0004kilcu867eruc","_id":"ckenyxa5l000dkilcjrpa52xf"},{"post_id":"ckenyxa5b0002kilcg2e1lz4q","category_id":"ckenyxa5c0004kilcu867eruc","_id":"ckenyxa5m000fkilc39xkipfv"},{"post_id":"ckenyxa5e0005kilcw45xxiub","category_id":"ckenyxa5c0004kilcu867eruc","_id":"ckenyxa5m000gkilctakxtsar"},{"post_id":"ckenyxa5f0007kilcdi1k5nqn","category_id":"ckenyxa5l000ekilcj67ht80y","_id":"ckenyxa5m000ikilcbikoclvo"},{"post_id":"ckenyxa5i000akilcyguq9tq0","category_id":"ckenyxa5m000hkilcb0bypbft","_id":"ckenyxa5m000kkilcl2fxz99u"},{"post_id":"ckenyxa5j000bkilcv5plcora","category_id":"ckenyxa5m000jkilc4356o7oo","_id":"ckenyxa5n000lkilcrcmsjen4"}],"PostTag":[],"Tag":[]}}